cscope 15 $HOME/os-labs/os-lab1 -q 0000003131 0000285410
	@boot/asm.h

2 
	#GDT_ENTRY
(
n
) \

3 ((
n
Ë<< 3)

	)

5 
	#SEG_NULLASM
 \

6 .
w‹d
 0, 0; \

7 .
byã
 0, 0, 0, 0

	)

11 
	#SEG_ASM
(
ty≥
,
ba£
,
lim
) \

12 .
	`w‹d
 (((
lim
Ë>> 12Ë& 0xffff), ((
ba£
) & 0xffff); \

13 .
	`byã
 (((
ba£
Ë>> 16Ë& 0xff), (0x90 | (
ty≥
)), \

14 (0xC0 | (((
lim
Ë>> 28Ë& 0xf)), (((
ba£
Ë>> 24Ë& 0xff)

	)

	@boot/boot.h

2 
	sELFHódî
 {

3 
	mmagic
;

4 
	mñf
[12];

5 
	mty≥
;

6 
	mmachöe
;

7 
	mvîsi⁄
;

8 
	míåy
;

9 
	mphoff
;

10 
	mshoff
;

11 
	mÊags
;

12 
	mehsize
;

13 
	mphítsize
;

14 
	mphnum
;

15 
	mshítsize
;

16 
	mshnum
;

17 
	msh°∫dx
;

21 
	sProgømHódî
 {

22 
	mty≥
;

23 
	moff
;

24 
	mvaddr
;

25 
	m∑ddr
;

26 
	mfûesz
;

27 
	mmemsz
;

28 
	mÊags
;

29 
	mÆign
;

36 
ölöe
 

37 
	$ö_byã
(
p‹t
) {

38 
d©a
;

39 
asm
 vﬁ©ûe("ö %1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

40  
d©a
;

41 
	}
}

42 
ölöe
 

43 
	$ö_l⁄g
(
p‹t
) {

44 
d©a
;

45 
asm
 vﬁ©ûe("ö %1, %0" : "˜" (
d©a
Ë: "d" (
p‹t
));

46  
d©a
;

47 
	}
}

48 
ölöe
 

49 
	$out_byã
(
p‹t
, 
d©a
) {

50 
asm
 vﬁ©ûe("ouà%0,%1" : : "a" (
d©a
), "d" (
p‹t
));

51 
	}
}

	@boot/main.c

10 
	~"boŸ.h
"

12 
	#SECTSIZE
 512

	)

13 
	#KOFFSET
 0xC0000000

	)

15 
ªad£g
(*, , );

18 
	$boŸmaö
() {

19 
ELFHódî
 *
ñf
;

20 
ProgømHódî
 *
ph
, *
ïh
;

21 * 
∑
, *
i
;

22 (*
íåy
)();

23 
j
;

27 
ñf
 = (
ELFHódî
*)0x8000;

31 
	`ªad£g
((*)
ñf
, 4096, 0);

34 
ph
 = (
ProgømHódî
*)((*)
ñf
 +Élf->
phoff
);

35 
ïh
 = 
ph
 + 
ñf
->
phnum
;

36 ; 
ph
 < 
ïh
;Öh ++) {

37 
∑
 = (*)(
ph
->
∑ddr
 - 
KOFFSET
);

38 
	`ªad£g
(
∑
, 
ph
->
fûesz
,Öh->
off
);

39 
i
 = 
∑
 + 
ph
->
fûesz
; i <Ö®+Öh->
memsz
; *i ++ = 0);

43 
íåy
 = ((*)())(
ñf
->íåy - 
KOFFSET
);

44 
	`íåy
();

45 
	}
}

48 
	$waôdisk
() {

49 (
	`ö_byã
(0x1F7) & 0xC0) != 0x40);

50 
	}
}

54 
	$ªad£˘
(*
d°
, 
off£t
) {

55 
i
;

57 
	`waôdisk
();

58 
	`out_byã
(0x1F2, 1);

59 
	`out_byã
(0x1F3, 
off£t
);

60 
	`out_byã
(0x1F4, 
off£t
 >> 8);

61 
	`out_byã
(0x1F5, 
off£t
 >> 16);

62 
	`out_byã
(0x1F6, (
off£t
 >> 24) | 0xE0);

63 
	`out_byã
(0x1F7, 0x20);

66 
	`waôdisk
();

67 
i
 = 0; i < 
SECTSIZE
 / 4; i ++) {

68 ((*)
d°
)[
i
] = 
	`ö_l⁄g
(0x1F0);

70 
	}
}

74 
	$ªad£g
(*
∑
, 
cou¡
, 
off£t
) {

75 *
ïa
;

76 
ïa
 = 
∑
 + 
cou¡
;

77 
∑
 -
off£t
 % 
SECTSIZE
;

78 
off£t
 = (off£à/ 
SECTSIZE
) + 1;

79 ; 
∑
 < 
ïa
;Ö®+
SECTSIZE
, 
off£t
 ++)

80 
	`ªad£˘
(
∑
, 
off£t
);

81 
	}
}

	@include/adt/list.h

1 #i‚de‡
__LIST_H__


2 
	#__LIST_H__


	)

4 
	~"as£π.h
"

6 
	sLi°Hód
 {

7 
Li°Hód
 *
	m¥ev
, *
	m√xt
;

9 
Li°Hód
 
	tLi°Hód
;

11 
	#li°_íåy
(
±r
, 
ty≥
, 
membî
) \

12 ((
ty≥
*)((*)(
±r
Ë- ()(&(—y≥*)0)->
membî
)))

	)

14 
ölöe
 

15 
	$li°_add
(
Li°Hód
 *
¥ev
, Li°Hód *
√xt
, Li°Hód *
d©a
) {

16 
Li°Hód
 *
p
;

17 
p
 = 
¥ev
->
√xt
;Ö !=Örev;Ö =Ö->next){

18 
	`as£π
(
d©a
 !
p
);

20 
	`as£π
(
d©a
 !
¥ev
);

21 
	`as£π
(
d©a
 !
NULL
);

22 
d©a
->
¥ev
 =Örev;

23 
d©a
->
√xt
 =Çext;

24 i‡(
¥ev
 !
NULL
Ë¥ev->
√xt
 = 
d©a
;

25 i‡(
√xt
 !
NULL
Ë√xt->
¥ev
 = 
d©a
;

26 
	}
}

28 
ölöe
 

29 
	$li°_add_bef‹e
(
Li°Hód
 *
li°
, Li°Hód *
d©a
) {

30 
	`as£π
(
li°
 !
NULL
);

31 
	`li°_add
(
li°
->
¥ev
,Üi°, 
d©a
);

32 
	}
}

34 
ölöe
 

35 
	$li°_add_a·î
(
Li°Hód
 *
li°
, Li°Hód *
d©a
) {

36 
	`as£π
(
li°
 !
NULL
);

37 
	`li°_add
(
li°
,Üi°->
√xt
, 
d©a
);

38 
	}
}

40 
ölöe
 

41 
	$li°_dñ
(
Li°Hód
 *
d©a
) {

42 
	`as£π
(
d©a
 !
NULL
);

43 
Li°Hód
 *
¥ev
 = 
d©a
->prev;

44 
Li°Hód
 *
√xt
 = 
d©a
->next;

45 
	`as£π
(
¥ev
 =
NULL
 ||Öªv->
√xt
 =
d©a
);

46 
	`as£π
(
√xt
 =
NULL
 ||Çext->
¥ev
 =
d©a
);

47 i‡(
¥ev
 !
NULL
Ë¥ev->
√xt
 =Çext;

48 i‡(
√xt
 !
NULL
Ë√xt->
¥ev
 =Örev;

49 
	}
}

51 
ölöe
 

52 
	$li°_öô
(
Li°Hód
 *
li°
) {

53 
	`as£π
(
li°
 !
NULL
);

54 
li°
->
¥ev
 =Üi°->
√xt
 =Üist;

55 
	}
}

57 
ölöe
 
boﬁ


58 
	$li°_em±y
(
Li°Hód
 *
li°
) {

59 
	`as£π
(
li°
 !
NULL
);

60  
li°
 =li°->
√xt
;

61 
	}
}

63 
	#li°_f‹óch
(
±r
, 
hód
) \

64 (
±r
Ë(
hód
)->
√xt
; (±rË!(hód); (±rË’å)->√xt)

	)

	@include/assert.h

1 #i‚de‡
__ASSERT_H__


2 
	#__ASSERT_H__


	)

4 
	~"x86/x86.h
"

5 
	~"comm⁄.h
"

8 
	#∑nic
(...) do { \

9 
	`˛i
(); \

10 
	`¥ötk
("\n\33[1;31msystemÖanic\33[0m in function \"%s\",Üine %d, file \"%s\":\n", \

11 
__FUNCTION__
, 
__LINE__
, 
__FILE__
); \

12 
	`¥ötk
(
__VA_ARGS__
); \

13 1Ë
	`waô_öå
(); \

14 } 0)

	)

17 
	#as£π
(
c⁄d
) do { \

18 if(!(
c⁄d
)) { \

19 
	`∑nic
("assertion fail (%s) in function \"%s\",Üine %d, file \"%s\"\n", \

20 #c⁄d, 
__FUNCTION__
, 
__LINE__
, 
__FILE__
); \

22 } 0)

	)

	@include/common.h

1 #i‚de‡
__COMMON_H__


2 
	#__COMMON_H__


	)

4 
	~"ty≥s.h
"

5 
	~"c⁄°.h
"

7 
¥ötk
(c⁄° *
˘l
, ...);

8 
hexBﬂrd
[];

9 
£rül_¥ötc
();

11 
	~"as£π.h
"

	@include/const.h

1 #i‚de‡
__CONST_H__


2 
	#__CONST_H__


	)

4 
	#åue
 1

	)

5 
	#Ál£
 0

	)

7 
	#NULL
 ((*)0)

	)

	@include/hal.h

1 #i‚de‡
__HAL_H__


2 
	#__HAL_H__


	)

4 
	~"comm⁄.h
"

5 
	~"adt/li°.h
"

7 
	#DEV_READ
 1

	)

8 
	#DEV_WRITE
 2

	)

10 
	#MSG_HARD_INTR
 -2

	)

12 
add_úq_h™dÀ
(, (*)());

14 
	sDevi˚
 {

15 c⁄° *
«me
;

16 
pid_t
 
pid
;

17 
dev_id
;

19 
Li°Hód
 
li°
;

20 } 
	tDev
;

22 
size_t
 
	`dev_ªad
(c⁄° *
dev_«me
, 
pid_t
 
ªq°_pid
, *
buf
 ,
off_t
 
off£t
, size_à
Àn
);

23 
size_t
 
	`dev_wrôe
(c⁄° *
dev_«me
, 
pid_t
 
ªq°_pid
, *
buf
 ,
off_t
 
off£t
, size_à
Àn
);

25 
	`hÆ_ªgi°î
(c⁄° *
«me
, 
pid_t
 
pid
, 
dev_id
);

26 
	`hÆ_gë_id
(c⁄° *
«me
, 
pid_t
 *
pid
, *
dev_id
);

27 
	`hÆ_li°
();

	@include/kernel.h

1 #i‚de‡
__KERNEL_H__


2 
	#__KERNEL_H__


	)

4 
	~"comm⁄.h
"

5 
	~"x86/x86.h
"

6 
	~"mem‹y.h
"

7 
	~"¥o˚ss.h
"

8 
	~"hÆ.h
"

9 
	~"m™agemít.h
"

	@include/management.h

1 #i‚de‡
__MANAGEMENT_H__


2 
	#__MANAGEMENT_H__


	)

4 
size_t
 
do_ªad
(
fûe_«me
, 
uöt8_t
 *
buf
, 
off_t
 
off£t
, size_à
Àn
);

6 
pid_t
 
	gFM
, 
	gPM
, 
	gMM
;

8 
	#NEW_PAGE
 -3

	)

9 
	#SHARE_KERNEL_PAGE
 -4

	)

12 
	sELFHódî
 {

13 
	mmagic
;

14 
	mñf
[12];

15 
	mty≥
;

16 
	mmachöe
;

17 
	mvîsi⁄
;

18 
	míåy
;

19 
	mphoff
;

20 
	mshoff
;

21 
	mÊags
;

22 
	mehsize
;

23 
	mphítsize
;

24 
	mphnum
;

25 
	mshítsize
;

26 
	mshnum
;

27 
	msh°∫dx
;

31 
	sProgømHódî
 {

32 
	mty≥
;

33 
	moff
;

34 
	mvaddr
;

35 
	m∑ddr
;

36 
	mfûesz
;

37 
	mmemsz
;

38 
	mÊags
;

39 
	mÆign
;

	@include/memory.h

1 #i‚de‡
__MEMORY_H__


2 
	#__MEMORY_H__


	)

4 
	~"x86/x86.h
"

6 
	#KOFFSET
 0xC0000000

	)

8 
ölöe
 
CR3
* 
gë_k¸3
();

9 
ölöe
 
PDE
* 
gë_kpdú
();

10 
ölöe
 
PTE
* 
gë_k±abÀ
();

12 
make_övÆid_pde
(
PDE
 *);

13 
make_övÆid_±e
(
PTE
 *);

14 
make_pde
(
PDE
 *, *);

15 
make_±e
(
PTE
 *, *);

17 
	#va_to_∑
(
addr
) \

18 ((*)(((
uöt32_t
)(
addr
)Ë- 
KOFFSET
))

	)

20 
	#∑_to_va
(
addr
) \

21 ((*)(((
uöt32_t
)(
addr
)Ë+ 
KOFFSET
))

	)

24 
	#KMEM
 (16 * 1024 * 1024)

	)

27 
	#PHY_MEM
 (128 * 1024 * 1024)

	)

	@include/process.h

1 #i‚de‡
__PROCESS_H__


2 
	#__PROCESS_H__


	)

4 
	~"adt/li°.h
"

6 
	#INTR
 
	`as£π
(
	`ªad_eÊags
(Ë& 
IF_MASK
)

	)

7 
	#NOINTR
 
	`as£π
(~
	`ªad_eÊags
(Ë& 
IF_MASK
)

	)

9 
	#ANY
 -1

	)

11 
	#KSTACK_SIZE
 4096

	)

12 
	#MAXPCB_NUM
 20

	)

13 
	#IF_MASK
 0x200

	)

14 
	#MAXMSG_NUM
 1024

	)

16 
	#NR_MAX_FILE
 8

	)

17 
	#NR_FILE_SIZE
 (128 * 1024)

	)

20 
	sSem≠h‹e
 {

21 
	mtokí
;

22 
Li°Hód
 
	mblock
;

23 }
	tSem
;

25 
	sPCB
 {

26 *
	mtf
;

27 
uöt8_t
 
	mk°ack
[
KSTACK_SIZE
];

28 
Li°Hód
 
	mli°
;

29 
uöt32_t
 
	mlock_˙t
;

30 
uöt32_t
 
	moutmo°_if
;

31 
pid_t
 
	mpid
;

32 
Li°Hód
 
	mmaû
;

33 
Sem
 
	mmaû_num
;

34 
CR3
 
	m¸3
;

35 } 
	tPCB
;

37 
	sMesßge
 {

38 
pid_t
 
	m§c
, 
	mde°
;

40 
	mty≥
;

41 
	mªt
;

44 
	mi
[5];

46 
pid_t
 
	mªq_pid
;

47 
	mdev_id
;

48 *
	mbuf
;

49 
off_t
 
	moff£t
;

50 
size_t
 
	mÀn
;

53 
Li°Hód
 
	mli°
;

54 } 
	tMsg
;

56 
lock
();

57 
u∆ock
();

58 
¶ìp
(
Li°Hód
 *);

59 
wakeup
(
PCB
 *);

60 
¸óã_£m
(
Sem
 *, );

61 
P
(
Sem
 *);

62 
V
(
Sem
 *);

63 
£nd
(
pid_t
 
de°
, 
Msg
 *
m
);

64 
ª˚ive
(
pid_t
 
§c
, 
Msg
 *
m
);

65 
PCB
* 
¸óã_kthªad
(*);

66 
PCB
* 
„tch_pcb
(
pid_t
);

68 
c›y_‰om_kî√l
(
PCB
* 
pcb
, * 
de°
, * 
§c
, 
Àn
);

70 
c›y_to_kî√l
(
PCB
* 
pcb
, * 
de°
, * 
§c
, 
Àn
);

72 
°r˝y_to_kî√l
(
PCB
* 
pcb
, * 
de°
, * 
§c
);

74 
°r˝y_‰om_kî√l
(
PCB
* 
pcb
, * 
de°
, * 
§c
);

76 
PCB
 
pcb
[
MAXPCB_NUM
], 
idÀ
, *
cuºít
;

77 
Li°Hód
 
ªady
, 
msg_poﬁ
;

78 
pid_t
 
≤um
;

79 
Msg
 
msgs
[
MAXMSG_NUM
];

	@include/string.h

1 #i‚de‡
__STRING_H__


2 
	#__STRING_H__


	)

4 
	~"comm⁄.h
"

6 *
ôﬂ
();

7 
mem˝y
(*, c⁄° *, 
size_t
);

8 
mem£t
(*, 
uöt8_t
, 
size_t
);

9 
size_t
 
°æí
(const *);

10 
°r˝y
(*
d
, c⁄° *
s
);

11 
°rcmp
(c⁄° *
d
, c⁄° *
s
);

	@include/time.h

1 #i‚de‡
__TIME_H__


2 
	#__TIME_H__


	)

4 
	#HZ
 100

	)

6 
	sTime
 {

7 
	myór
, 
	mm⁄th
, 
	mday
;

8 
	mhour
, 
	mmöuã
, 
	m£c⁄d
;

9 } 
	tTime
;

10 
ölöe
 
gë_jiffy
();

12 
gë_time
(
Time
 *
tm
);

	@include/types.h

1 #i‚de‡
__TYPES_H__


2 
	#__TYPES_H__


	)

6 
	tuöt32_t
;

7 
	töt32_t
;

8 
	tuöt16_t
;

9 
	töt16_t
;

10 
	tuöt8_t
;

11 
	töt8_t
;

12 
	tboﬁ
;

14 
	tpid_t
;

15 
	tsize_t
;

16 
	toff_t
;

	@include/x86/cpu.h

1 #i‚de‡
__X86_CPU_H__


2 
	#__X86_CPU_H__


	)

4 
	~"comm⁄.h
"

7 
	uCR0
 {

9 
uöt32_t
 
	m¥Ÿe˘_íabÀ
 : 1;

10 
uöt32_t
 
	mm⁄ô‹_c›ro˚ss‹
 : 1;

11 
uöt32_t
 
	memuœti⁄
 : 1;

12 
uöt32_t
 
	mèsk_swôched
 : 1;

13 
uöt32_t
 
	mexãnsi⁄_ty≥
 : 1;

14 
uöt32_t
 
	mnumîic_îr‹
 : 1;

15 
uöt32_t
 
	m∑d0
 : 10;

16 
uöt32_t
 
	mwrôe_¥Ÿe˘
 : 1;

17 
uöt32_t
 
	m∑d1
 : 1;

18 
uöt32_t
 
	mÆignmít_mask
 : 1;

19 
uöt32_t
 
	m∑d2
 : 10;

20 
uöt32_t
 
	mno_wrôe_through
 : 1;

21 
uöt32_t
 
	mˇche_dißbÀ
 : 1;

22 
uöt32_t
 
	m∑gög
 : 1;

24 
uöt32_t
 
	mvÆ
;

25 } 
	tCR0
;

28 
	uCR3
 {

30 
uöt32_t
 
	m∑d0
 : 3;

31 
uöt32_t
 
	m∑ge_wrôe_through
 : 1;

32 
uöt32_t
 
	m∑ge_ˇche_dißbÀ
 : 1;

33 
uöt32_t
 
	m∑d1
 : 7;

34 
uöt32_t
 
	m∑ge_dúe˘‹y_ba£
 : 20;

36 
uöt32_t
 
	mvÆ
;

37 } 
	tCR3
;

40 
ölöe
 
uöt32_t


41 
	$ªad_¸0
() {

42 
uöt32_t
 
vÆ
;

43 
asm
 vﬁ©ûe("mov»%%¸0, %0" : "Ù"(
vÆ
));

44  
vÆ
;

45 
	}
}

48 
ölöe
 

49 
	$wrôe_¸0
(
CR0
 *
¸0
) {

50 
asm
 vﬁ©ûe("mov»%0, %%¸0" : : "r"(
¸0
->
vÆ
));

51 
	}
}

54 
ölöe
 

55 
	$wrôe_¸3
(
CR3
 *
¸3
) {

56 
asm
 vﬁ©ûe("mov»%0, %%¸3" : : "r"(
¸3
->
vÆ
));

57 
	}
}

60 
ölöe
 

61 
	$wrôe_gdå
(*
addr
, 
uöt32_t
 
size
) {

62 vﬁ©ûê
uöt16_t
 
d©a
[3];

63 
d©a
[0] = 
size
 - 1;

64 
d©a
[1] = (
uöt32_t
)
addr
;

65 
d©a
[2] = ((
uöt32_t
)
addr
) >> 16;

66 
asm
 vﬁ©ûe("lgdà(%0)" : : "r"(
d©a
));

67 
	}
}

70 
ölöe
 

71 
	$wrôe_idå
(*
addr
, 
uöt32_t
 
size
) {

72 vﬁ©ûê
uöt16_t
 
d©a
[3];

73 
d©a
[0] = 
size
 - 1;

74 
d©a
[1] = (
uöt32_t
)
addr
;

75 
d©a
[2] = ((
uöt32_t
)
addr
) >> 16;

76 
asm
 vﬁ©ûe("lidà(%0)" : : "r"(
d©a
));

77 
	}
}

80 
ölöe
 

81 
	$wrôe_å
(
uöt16_t
 
£À˘‹
) {

82 
asm
 vﬁ©ûe("…∏%0" : : "r"(
£À˘‹
));

83 
	}
}

86 
ölöe
 
uöt32_t


87 
	$ªad_eÊags
() {

88 vﬁ©ûê
uöt32_t
 
vÆ
;

89 
asm
 vﬁ©ûe("pushf;Ö›»%0" : "Ùm"(
vÆ
): :"memory");

90  
vÆ
;

91 
	}
}

94 
ölöe
 

95 
	$°i
() {

96 
asm
 volatile("sti");

97 
	}
}

100 
ölöe
 

101 
	$˛i
() {

102 
asm
 volatile("cli");

103 
	}
}

106 
ölöe
 

107 
	$waô_öå
() {

108 
asm
 volatile("hlt");

109 
	}
}

112 
	#NR_IRQ
 256

	)

	@include/x86/io.h

1 #i‚de‡
__X86_IO_H__


2 
	#__X86_IO_H__


	)

4 
	~"comm⁄.h
"

6 
ölöe
 
uöt8_t


7 
	$ö_byã
(
uöt16_t
 
p‹t
) {

8 
uöt8_t
 
d©a
;

9 
asm
 vﬁ©ûe("ö %1, %0" : "˜"(
d©a
Ë: "d"(
p‹t
));

10  
d©a
;

11 
	}
}

13 
ölöe
 
uöt32_t


14 
	$ö_l⁄g
(
uöt16_t
 
p‹t
) {

15 
uöt32_t
 
d©a
;

16 
asm
 vﬁ©ûe("ö %1, %0" : "˜"(
d©a
Ë: "d"(
p‹t
));

17  
d©a
;

18 
	}
}

20 
ölöe
 

21 
	$out_byã
(
uöt16_t
 
p‹t
, 
uöt8_t
 
d©a
) {

22 
asm
 vﬁ©ûe("ouà%%Æ, %%dx" : : "a"(
d©a
), "d"(
p‹t
));

23 
	}
}

25 
ölöe
 

26 
	$out_l⁄g
(
uöt16_t
 
p‹t
, 
uöt32_t
 
d©a
) {

27 
asm
 vﬁ©ûe("ouà%%óx, %%dx" : : "a"(
d©a
), "d"(
p‹t
));

28 
	}
}

	@include/x86/memory.h

1 #i‚de‡
__X86_MEMORY_H__


2 
	#__X86_MEMORY_H__


	)

4 
	#SEG_CODEDATA
 1

	)

5 
	#SEG_32BIT
 1

	)

6 
	#SEG_4KB_GRANULARITY
 1

	)

7 
	#SEG_TSS_32BIT
 0x9

	)

9 
	#DPL_KERNEL
 0

	)

10 
	#DPL_USER
 3

	)

12 
	#SEG_WRITABLE
 0x2

	)

13 
	#SEG_READABLE
 0x2

	)

14 
	#SEG_EXECUTABLE
 0x8

	)

16 
	#NR_SEGMENTS
 6

	)

17 
	#SEG_NULL
 0

	)

18 
	#SEG_KERNEL_CODE
 1

	)

19 
	#SEG_KERNEL_DATA
 2

	)

20 
	#SEG_USER_CODE
 3

	)

21 
	#SEG_USER_DATA
 4

	)

22 
	#SEG_TSS
 5

	)

24 
	#SELECTOR_KERNEL
(
s
Ë–(†<< 3Ë| 
DPL_KERNEL
 )

	)

25 
	#SELECTOR_USER
(
s
Ë–(†<< 3Ë| 
DPL_USER
 )

	)

28 
	#PAGE_SIZE
 4096

	)

29 
	#NR_PDE
 1024

	)

30 
	#NR_PTE
 1024

	)

31 
	#PD_SIZE
 ((
NR_PTE
Ë* (
PAGE_SIZE
))

	)

35 
	#Æign_to_∑ge
 
	`__©åibuã
((
	`Æig√d
(
PAGE_SIZE
)))

	)

38 #i‚de‡
__ASSEMBLER__


40 
	~"comm⁄.h
"

43 
	uPageDúe˘‹yE¡ry
 {

45 
uöt32_t
 
	m¥e£¡
 : 1;

46 
uöt32_t
 
	mªad_wrôe
 : 1;

47 
uöt32_t
 
	mu£r_su≥rvis‹
 : 1;

48 
uöt32_t
 
	m∑ge_wrôe_through
 : 1;

49 
uöt32_t
 
	m∑ge_ˇche_dißbÀ
 : 1;

50 
uöt32_t
 
	mac˚s£d
 : 1;

51 
uöt32_t
 
	m∑d0
 : 6;

52 
uöt32_t
 
	m∑ge_‰ame
 : 20;

54 
uöt32_t
 
	mvÆ
;

55 } 
	tPDE
;

58 
	uPageTabÀE¡ry
 {

60 
uöt32_t
 
	m¥e£¡
 : 1;

61 
uöt32_t
 
	mªad_wrôe
 : 1;

62 
uöt32_t
 
	mu£r_su≥rvis‹
 : 1;

63 
uöt32_t
 
	m∑ge_wrôe_through
 : 1;

64 
uöt32_t
 
	m∑ge_ˇche_dißbÀ
 : 1;

65 
uöt32_t
 
	mac˚s£d
 : 1;

66 
uöt32_t
 
	mdúty
 : 1;

67 
uöt32_t
 
	m∑d0
 : 1;

68 
uöt32_t
 
	mglobÆ
 : 1;

69 
uöt32_t
 
	m∑d1
 : 3;

70 
uöt32_t
 
	m∑ge_‰ame
 : 20;

72 
uöt32_t
 
	mvÆ
;

73 } 
	tPTE
;

76 
	sSegmítDes¸ùt‹
 {

77 
uöt32_t
 
	mlimô_15_0
 : 16;

78 
uöt32_t
 
	mba£_15_0
 : 16;

79 
uöt32_t
 
	mba£_23_16
 : 8;

80 
uöt32_t
 
	mty≥
 : 4;

81 
uöt32_t
 
	m£gmít_ty≥
 : 1;

82 
uöt32_t
 
	m¥ivûege_Àvñ
 : 2;

83 
uöt32_t
 
	m¥e£¡
 : 1;

84 
uöt32_t
 
	mlimô_19_16
 : 4;

85 
uöt32_t
 
	mso·_u£
 : 1;

86 
uöt32_t
 
	m›î©i⁄_size
 : 1;

87 
uöt32_t
 
	m∑d0
 : 1;

88 
uöt32_t
 
	mgønuœrôy
 : 1;

89 
uöt32_t
 
	mba£_31_24
 : 8;

90 } 
	tSegDesc
;

93 
	sTSS
 {

94 
uöt32_t
 
	m¥ev
;

95 
uöt32_t
 
	me•0
;

96 
uöt32_t
 
	mss0
;

97 
uöt8_t
 
	md⁄t_ˇª
[88];

98 } 
	tTSS
;

100 
	sG©eDes¸ùt‹
 {

101 
uöt32_t
 
	moff£t_15_0
 : 16;

102 
uöt32_t
 
	m£gmít
 : 16;

103 
uöt32_t
 
	m∑d0
 : 8;

104 
uöt32_t
 
	mty≥
 : 4;

105 
uöt32_t
 
	msy°em
 : 1;

106 
uöt32_t
 
	m¥ivûege_Àvñ
 : 2;

107 
uöt32_t
 
	m¥e£¡
 : 1;

108 
uöt32_t
 
	moff£t_31_16
 : 16;

109 } 
	tG©eDesc
;

111 
	sTøpFøme
 {

112 
uöt32_t
 
	medi
, 
	mesi
, 
	mebp
, 
	mxxx
, 
	mebx
, 
	medx
, 
	mecx
, 
	móx
;

113 
uöt32_t
 
	mgs
, 
	mfs
, 
	mes
, 
	mds
;

114 
öt32_t
 
	múq
;

115 
uöt32_t
 
	mîr‹_code
;

116 
uöt32_t
 
	meù
, 
	mcs
, 
	meÊags
;

117 
uöt32_t
 
	mªt
, 
	m¨gs
;

118 
uöt32_t
 
	me•
, 
	mss
;

119 } 
	tTøpFøme
;

	@include/x86/x86.h

1 #i‚de‡
__X86_H__


2 
	#__X86_H__


	)

6 
	~"˝u.h
"

7 
	~"mem‹y.h
"

8 
	~"io.h
"

	@src/kernel/drivers/drivers.c

1 
	~"hÆ.h
"

3 
öô_hÆ
();

4 
öô_timî
();

5 
öô_ây
();

6 
öô_ide
();

7 
öô_øm
();

9 
	$öô_drivî
() {

10 
	`öô_hÆ
();

11 
	`öô_timî
();

12 
	`öô_ây
();

14 
	`öô_øm
();

16 
	`hÆ_li°
();

17 
	}
}

	@src/kernel/drivers/hal.c

1 
	~"kî√l.h
"

2 
	~"°rög.h
"

3 
	~"hÆ.h
"

5 
	#NR_DEV
 16

	)

7 
Dev
 
	gdev_poﬁ
[
NR_DEV
];

8 
Li°Hód
 
	g‰ì
, 
	gdevi˚s
;

11 
	$öô_hÆ
() {

12 
i
 = 0;

13 
	`li°_öô
(&
‰ì
);

14 
i
 = 0; i < 
NR_DEV
; i ++) {

15 
	`li°_add_bef‹e
(&
‰ì
, &
dev_poﬁ
[
i
].
li°
);

17 
	`li°_öô
(&
devi˚s
);

18 
	}
}

20 
Dev
 *
	$hÆ_gë
(c⁄° *
«me
) {

21 
	`lock
();

22 
Li°Hód
 *
ô
;

23 
	`li°_f‹óch
(
ô
, &
devi˚s
) {

24 
Dev
 *
dev
 = 
	`li°_íåy
(
ô
, Dev, 
li°
);

25 
	`as£π
(
dev
);

26 i‡(
	`°rcmp
(
dev
->
«me
,Çame) == 0) {

27 
	`u∆ock
();

28  
dev
;

31 
	`u∆ock
();

32  
NULL
;

33 
	}
}

35 
	$hÆ_gë_id
(c⁄° *
«me
, 
pid_t
 *
pid
, *
dev_id
) {

36 
Dev
 *
dev
 = 
	`hÆ_gë
(
«me
);

37 
	`as£π
(
dev
 !
NULL
);

38 *
pid
 = 
dev
->pid;

39 *
dev_id
 = 
dev
->dev_id;

40 
	}
}

42 
	$hÆ_ªgi°î
(c⁄° *
«me
, 
pid_t
 
pid
, 
dev_id
) {

43 
	`lock
();

44 i‡(
	`li°_em±y
(&
‰ì
)) {

45 
	`∑nic
("noÑoom for more device");

47 if(
	`hÆ_gë
(
«me
Ë!
NULL
) {

48 
	`∑nic
("devi˚ \"%s\" i†ÆªadyÑegi°îed!\n", 
«me
);

50 
Dev
 *
dev
 = 
	`li°_íåy
(
‰ì
.
√xt
, Dev, 
li°
);

51 
	`li°_dñ
(&
dev
->
li°
);

52 
dev
->
«me
 =Çame;

53 
dev
->
pid
 =Öid;

54 
dev
->
dev_id
 = dev_id;

55 
	`li°_add_bef‹e
(&
devi˚s
, &
dev
->
li°
);

56 
	`u∆ock
();

57 
	}
}

59 
	$hÆ_li°
() {

60 
	`lock
();

61 
Li°Hód
 *
ô
;

62 
	`¥ötk
("listingállÑegisted devices:\n");

63 
	`li°_f‹óch
(
ô
, &
devi˚s
) {

64 
Dev
 *
dev
 = 
	`li°_íåy
(
ô
, Dev, 
li°
);

65 
	`as£π
(
dev
);

66 
	`¥ötk
("%†#%d, #%d\n", 
dev
->
«me
, dev->
pid
, dev->
dev_id
);

68 
	`u∆ock
();

69 
	}
}

71 
size_t


72 
	$dev_rw
(c⁄° *
dev_«me
, 
ty≥
, 
pid_t
 
ªq°_pid
, *
buf
, 
off_t
 
off£t
, 
size_t
 
Àn
) {

73 
Dev
 *
dev
 = 
	`hÆ_gë
(
dev_«me
);

74 
	`as£π
(
dev
 !
NULL
);

76 
Msg
 
m
;

77 
m
.
§c
 = 
cuºít
->
pid
;

78 
m
.
ty≥
 =Åype;

79 
m
.
dev_id
 = 
dev
->dev_id;

80 
m
.
ªq_pid
 = 
ªq°_pid
;

81 
m
.
buf
 = buf;

82 
m
.
off£t
 = offset;

83 
m
.
Àn
 =Üen;

84 
	`£nd
(
dev
->
pid
, &
m
);

85 
	`ª˚ive
(
dev
->
pid
, &
m
);

87  
m
.
ªt
;

88 
	}
}

90 
size_t


91 
	$dev_ªad
(c⁄° *
dev_«me
, 
pid_t
 
ªq°_pid
, *
buf
, 
off_t
 
off£t
, 
size_t
 
Àn
) {

92  
	`dev_rw
(
dev_«me
, 
DEV_READ
, 
ªq°_pid
, 
buf
, 
off£t
, 
Àn
);

93 
	}
}

95 
size_t


96 
	$dev_wrôe
(c⁄° *
dev_«me
, 
pid_t
 
ªq°_pid
, *
buf
, 
off_t
 
off£t
, 
size_t
 
Àn
) {

97  
	`dev_rw
(
dev_«me
, 
DEV_WRITE
, 
ªq°_pid
, 
buf
, 
off£t
, 
Àn
);

98 
	}
}

	@src/kernel/drivers/ide/cache.c

1 
	~"comm⁄.h
"

2 
	#NR_SEC_CACHE
 128

	)

4 
disk_do_ªad
(*, 
uöt32_t
);

5 
disk_do_wrôe
(*, 
uöt32_t
);

7 
	sSe˘‹Cache
 {

8 
uöt32_t
 
	m£˘‹
;

9 
boﬁ
 
	mu£d
, 
	mdúty
;

10 
uöt8_t
 
	mc⁄ã¡
[512];

12 
Se˘‹Cache
 
	gˇche
[
NR_SEC_CACHE
];

15 
	$ˇche_öô
() {

16 
i
;

17 
i
 = 0; i < 
NR_SEC_CACHE
; i ++) {

18 
ˇche
[
i
].
u£d
 = 
Ál£
;

20 
	}
}

23 
	$ˇche_wrôeback
() {

24 
i
;

25 
i
 = 0; i < 
NR_SEC_CACHE
; i ++) {

26 i‡(
ˇche
[
i
].
dúty
 =
åue
) {

27 
	`disk_do_wrôe
(&
ˇche
[
i
].
c⁄ã¡
, cache[i].
£˘‹
);

28 
ˇche
[
i
].
dúty
 = 
Ál£
;

31 
	}
}

33 
Se˘‹Cache
 *

34 
	$ˇche_„tch
(
uöt32_t
 
£˘‹
) {

35 
Se˘‹Cache
 *
±r
 = &
ˇche
[
£˘‹
 % 
NR_SEC_CACHE
];

37 i‡(
±r
->
u£d
 =
åue
 &&Öå->
£˘‹
 == sector) {

40 i‡(
±r
->
u£d
 =
åue
 &&Öå->
dúty
 ==Årue) {

42 
	`disk_do_wrôe
(&
±r
->
c⁄ã¡
,Öå->
£˘‹
);

45 
	`disk_do_ªad
(&
±r
->
c⁄ã¡
, 
£˘‹
);

47 
±r
->
u£d
 = 
åue
;

48 
±r
->
£˘‹
 = sector;

49 
±r
->
dúty
 = 
Ál£
;

51  
±r
;

52 
	}
}

54 
uöt8_t


55 
	$ªad_byã
(
uöt32_t
 
off£t
) {

56 
uöt32_t
 
£˘‹
 = 
off£t
 >> 9;

57 
Se˘‹Cache
 *
±r
 = 
	`ˇche_„tch
(
£˘‹
);

58  
±r
->
c⁄ã¡
[
off£t
 & 511];

59 
	}
}

62 
	$wrôe_byã
(
uöt32_t
 
off£t
, 
uöt8_t
 
d©a
) {

63 
uöt32_t
 
£˘‹
 = 
off£t
 >> 9;

64 
Se˘‹Cache
 *
±r
 = 
	`ˇche_„tch
(
£˘‹
);

65 
±r
->
c⁄ã¡
[
off£t
 & 511] = 
d©a
;

66 
±r
->
dúty
 = 
åue
;

67 
	}
}

	@src/kernel/drivers/ide/disk.c

1 
	~"comm⁄.h
"

2 
	~"x86/x86.h
"

3 
	~"¥o˚ss.h
"

4 
	~"hÆ.h
"

5 
	~"ide.h
"

7 
	#IDE_PORT_CTRL
 0x3F6

	)

8 
	#IDE_PORT_BASE
 0x1F0

	)

11 
	$ide_¥ï¨e
(
uöt32_t
 
£˘‹
) {

12  (
	`ö_byã
(
IDE_PORT_BASE
 + 7) & (0x80 | 0x40)) != 0x40) {

13 
	`¥ötk
("%s, %d:IDE NOT READY\n", 
__FUNCTION__
, 
__LINE__
);

16 
	`out_byã
(
IDE_PORT_CTRL
, 0);

17 
	`out_byã
(
IDE_PORT_BASE
 + 2, 1);

18 
	`out_byã
(
IDE_PORT_BASE
 + 3, 
£˘‹
 & 0xFF);

19 
	`out_byã
(
IDE_PORT_BASE
 + 4, (
£˘‹
 >> 8) & 0xFF);

20 
	`out_byã
(
IDE_PORT_BASE
 + 5, (
£˘‹
 >> 16) & 0xFF);

21 
	`out_byã
(
IDE_PORT_BASE
 + 6, 0xE0 | ((
£˘‹
 >> 24) & 0xFF));

22 
	}
}

24 
ölöe
 

25 
	$issue_ªad
() {

26 
	`out_byã
(
IDE_PORT_BASE
 + 7, 0x20);

27 
	}
}

29 
ölöe
 

30 
	$issue_wrôe
() {

31 
	`out_byã
(
IDE_PORT_BASE
 + 7, 0x30);

32 
	}
}

35 
	$disk_do_ªad
(*
buf
, 
uöt32_t
 
£˘‹
) {

36 
i
;

37 
Msg
 
m
;

39 
	`ide_¥ï¨e
(
£˘‹
);

40 
	`issue_ªad
();

43 
	`ª˚ive
(
MSG_HARD_INTR
, &
m
);

44 } 
m
.
ty≥
 !
IDE_READY
);

46 
i
 = 0; i < 512 / (
uöt32_t
); i ++) {

47 *(((
uöt32_t
*)
buf
Ë+ 
i
Ë
	`ö_l⁄g
(
IDE_PORT_BASE
);

49 
	}
}

52 
	$disk_do_wrôe
(*
buf
, 
uöt32_t
 
£˘‹
) {

53 
i
;

54 
Msg
 
m
;

56 
	`ide_¥ï¨e
(
£˘‹
);

57 
	`issue_wrôe
();

59 
i
 = 0; i < 512 / (
uöt32_t
); i ++) {

60 
	`out_l⁄g
(
IDE_PORT_BASE
, *(((
uöt32_t
*)
buf
Ë+ 
i
));

63 
	`ª˚ive
(
MSG_HARD_INTR
, &
m
);

64 } 
m
.
ty≥
 !
IDE_READY
);

65 
	}
}

	@src/kernel/drivers/ide/ide.c

1 
	~"kî√l.h
"

2 
	~"hÆ.h
"

3 
	~"ide.h
"

4 
	~"time.h
"

6 
	#WRITEBACK_TIME
 1

	)

8 
pid_t
 
	gIDE
;

10 
ide_öå
();

11 
time_öå
();

12 
ide_drivî_thªad
();

14 
ˇche_öô
();

15 
ˇche_wrôeback
();

16 
uöt8_t
 
ªad_byã
(
uöt32_t
);

17 
wrôe_byã
(
uöt32_t
, 
uöt8_t
);

20 
	$öô_ide
() {

21 
	`ˇche_öô
();

22 
	`add_úq_h™dÀ
(14, 
ide_öå
);

23 
	`add_úq_h™dÀ
(0 , 
time_öå
);

24 
PCB
 *
p
 = 
	`¸óã_kthªad
(
ide_drivî_thªad
);

25 
IDE
 = 
p
->
pid
;

26 
	`hÆ_ªgi°î
("hda", 
IDE
, 0);

27 
	`wakeup
(
p
);

28 
	}
}

31 
	$ide_drivî_thªad
() {

32 
Msg
 
m
;

34 
åue
) {

35 
	`ª˚ive
(
ANY
, &
m
);

37 i‡(
m
.
§c
 =
MSG_HARD_INTR
) {

38 i‡(
m
.
ty≥
 =
IDE_WRITEBACK
) {

39 
	`ˇche_wrôeback
();

41 
	`∑nic
("IDE interrupt isÜeaking");

43 } i‡(
m
.
ty≥
 =
DEV_READ
) {

44 
uöt32_t
 
i
;

45 
uöt8_t
 
d©a
;

46 
i
 = 0; i < 
m
.
Àn
; i ++) {

47 
d©a
 = 
	`ªad_byã
(
m
.
off£t
 + 
i
);

48 
	`c›y_‰om_kî√l
(
	`„tch_pcb
(
m
.
ªq_pid
), m.
buf
 + 
i
, &
d©a
, 1);

50 
m
.
ªt
 = 
i
;

51 
m
.
de°
 = m.
§c
;

52 
m
.
§c
 = 
IDE
;

53 
	`£nd
(
m
.
de°
, &m);

54 } i‡(
m
.
ty≥
 =
DEV_WRITE
) {

55 
uöt32_t
 
i
;

56 
uöt8_t
 
d©a
;

57 
i
 = 0; i < 
m
.
Àn
; i ++) {

58 
	`c›y_to_kî√l
(
	`„tch_pcb
(
m
.
ªq_pid
), &
d©a
, m.
buf
 + 
i
, 1);

59 
	`wrôe_byã
(
m
.
off£t
 + 
i
, 
d©a
);

61 
m
.
ªt
 = 
i
;

62 
m
.
de°
 = m.
§c
;

63 
m
.
§c
 = 
IDE
;

64 
	`£nd
(
m
.
de°
, &m);

67 
	`as£π
(0);

70 
	}
}

73 
	$ide_öå
() {

74 
Msg
 
m
;

75 
m
.
ty≥
 = 
IDE_READY
;

76 
m
.
§c
 = 
MSG_HARD_INTR
;

77 
	`£nd
(
IDE
, &
m
);

78 
	}
}

80 
	$time_öå
() {

81 
Msg
 
m
;

82 
uöt32_t
 
cou¡î
 = 0;

83 
cou¡î
 = (cou¡î + 1Ë% (
WRITEBACK_TIME
 * 
HZ
);

84 i‡(
cou¡î
 == 0) {

85 
m
.
ty≥
 = 
IDE_WRITEBACK
;

86 
m
.
§c
 = 
MSG_HARD_INTR
;

87 
	`£nd
(
IDE
, &
m
);

89 
	}
}

	@src/kernel/drivers/ide/ide.h

1 #i‚de‡
__IDE_H__


2 
	#__IDE_H__


	)

4 
	#IDE_READY
 1

	)

5 
	#IDE_WRITEBACK
 2

	)

	@src/kernel/drivers/ram.c

1 
	~"kî√l.h
"

2 
	~"x86/x86.h
"

3 
	~"hÆ.h
"

4 
	~"time.h
"

5 
	~"°rög.h
"

7 
uöt8_t
 
	gfûe
[
NR_MAX_FILE
][
NR_FILE_SIZE
] = {

161 
uöt8_t
 *
	gdisk
 = (*)
fûe
;

163 
pid_t
 
	gRAM
;

165 
øm_drivî_thªad
();

166 
ªad_øm_ªque°
(
Msg
 *
m
);

168 
	$öô_øm
(){

169 
PCB
 *
p
 = 
	`¸óã_kthªad
(
øm_drivî_thªad
);

170 
RAM
 = 
p
->
pid
;

171 
	`wakeup
(
p
);

172 
	`hÆ_ªgi°î
("øm", 
RAM
, 0);

173 
	}
}

176 
	$øm_drivî_thªad
(){

177 
Msg
 
m
;

179 
	`ª˚ive
(
ANY
, &
m
);

180 if(
m
.
§c
 =
MSG_HARD_INTR
){

181 
	`as£π
(0);

183 
m
.
ty≥
){

184 
DEV_READ
:

185 
	`ªad_øm_ªque°
(&
m
);

188 
	`as£π
(0);

192 
	}
}

194 
	$ªad_øm_ªque°
(
Msg
 *
m
){

195 
uöt8_t
 *
buf
 = 
m
->buf;

196 
off_t
 
off£t
 = 
m
->offset;

197 
size_t
 
Àn
 = 
m
->len;

198 
i
;

199 
i
 = 0; i < 
Àn
; ++i)

200 
buf
[
i
] = 
disk
[
off£t
 + i];

201 
m
->
ªt
 = m->
Àn
;

202 
pid_t
 
de°
 = 
m
->
§c
;

203 
m
->
§c
 = 
cuºít
->
pid
;

204 
	`£nd
(
de°
, 
m
);

205 
	}
}

	@src/kernel/drivers/timer/timer.c

1 
	~"kî√l.h
"

2 
	~"x86/x86.h
"

3 
	~"hÆ.h
"

4 
	~"time.h
"

5 
	~"°rög.h
"

7 
	#PORT_TIME
 0x40

	)

8 
	#PORT_RTC
 0x70

	)

9 
	#FREQ_8253
 1193182

	)

11 
pid_t
 
	gTIMER
;

12 
	gjiffy
 = 0;

13 
Time
 
	gπ
;

15 
upd©e_jiffy
();

16 
öô_i8253
();

17 
öô_π
();

18 
timî_drivî_thªad
();

20 
	$öô_timî
() {

21 
	`öô_i8253
();

22 
	`öô_π
();

23 
	`add_úq_h™dÀ
(0, 
upd©e_jiffy
);

24 
PCB
 *
p
 = 
	`¸óã_kthªad
(
timî_drivî_thªad
);

25 
TIMER
 = 
p
->
pid
;

26 
	`wakeup
(
p
);

27 
	`hÆ_ªgi°î
("timî", 
TIMER
, 0);

28 
	}
}

31 
	$timî_drivî_thªad
() {

32 
Msg
 
m
;

34 
åue
) {

35 
	`ª˚ive
(
ANY
, &
m
);

37 
m
.
ty≥
) {

38 : 
	`as£π
(0);

41 
	}
}

44 
	$gë_jiffy
() {

45  
jiffy
;

46 
	}
}

49 
	$md
(
yór
, 
m⁄th
) {

50 
boﬁ
 
À≠
 = (
yór
 % 400 == 0) || (year % 4 == 0 && year % 100 != 0);

51 
èb
[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

52  
èb
[
m⁄th
] + (
À≠
 && month == 2);

53 
	}
}

56 
	$upd©e_jiffy
() {

57 
jiffy
 ++;

58 i‡(
jiffy
 % 
HZ
 == 0) {

59 
π
.
£c⁄d
 ++;

60 i‡(
π
.
£c⁄d
 >60Ë{Ñt.£c⁄d = 0;Ñt.
möuã
 ++; }

61 i‡(
π
.
möuã
 >60Ë{Ñt.möuã = 0;Ñt.
hour
 ++; }

62 i‡(
π
.
hour
 >24Ë{Ñt.hou∏0;Ñt.
day
 ++;}

63 i‡(
π
.
day
 >
	`md
‘t.
yór
,Ñt.
m⁄th
)) {Ñt.day = 1;Ñt.month ++; }

64 i‡(
π
.
m⁄th
 >13Ë{Ñt.m⁄th = 1;Ñt.
yór
 ++; }

66 
	}
}

69 
	$öô_i8253
() {

70 
cou¡
 = 
FREQ_8253
 / 
HZ
;

71 
	`as£π
(
cou¡
 < 65536);

72 
	`out_byã
(
PORT_TIME
 + 3, 0x34);

73 
	`out_byã
(
PORT_TIME
, 
cou¡
 & 0xff);

74 
	`out_byã
(
PORT_TIME
, 
cou¡
 >> 8);

75 
	}
}

78 
	$öô_π
() {

79 
	`mem£t
(&
π
, 0, (
Time
));

82 
	}
}

85 
	$gë_time
(
Time
 *
tm
) {

86 
	`mem˝y
(
tm
, &
π
, (
Time
));

87 
	}
}

	@src/kernel/drivers/tty/banner.c

1 
	~"kî√l.h
"

2 
	~"time.h
"

3 
	~"ây.h
"

4 
	~"ãrm.h
"

6 
b™√r
[
SCR_W
 + 1];

8 
	g™i
[] = "-\\|/";

9 
	gtsc
 = 0;

12 
	$døw2
(**
p
, 
q
) {

13 (*(*
p
Ë++Ë
q
 / 10 + '0';

14 (*(*
p
Ë++Ë
q
 % 10 + '0';

15 
	}
}

17 
	$upd©e_b™√r
() {

18 
b™√r
[1] = 
™i
[
tsc
];

19 
tsc
 = (ts¯+ 1Ë% ((
™i
) - 1);

20 *
p
 = 
b™√r
 + 
SCR_W
 - 20;

21 
Time
 
tm
;

22 
	`gë_time
(&
tm
);

23 *
p
 ++ = '2';

24 *
p
 ++ = '0';

25 
	`døw2
(&
p
, 
tm
.
yór
 % 100); *p ++ = '/';

26 
	`døw2
(&
p
, 
tm
.
m⁄th
); *p ++ = '/';

27 
	`døw2
(&
p
, 
tm
.
day
); *p ++ = ' ';

28 
	`døw2
(&
p
, 
tm
.
hour
); *p ++ = ':';

29 
	`døw2
(&
p
, 
tm
.
möuã
); *p ++ = ':';

30 
	`døw2
(&
p
, 
tm
.
£c⁄d
);

31 
b™√r
[3] = 't';

32 
b™√r
[4] = 't';

33 
b™√r
[5] = 'y';

34 
b™√r
[6] = '1' + 
cuºít_c⁄¶
 - 
âys
;

35 
	`c⁄¶_sync
(
cuºít_c⁄¶
);

36 
	}
}

	@src/kernel/drivers/tty/console.c

1 
	~"kî√l.h
"

2 
	~"x86/x86.h
"

3 
	~"ây.h
"

4 
	~"°rög.h
"

5 
	~"ãrm.h
"

6 
	~"time.h
"

7 
	~"hÆ.h
"

9 
C⁄sﬁe
 
	gâys
[
NR_TTY
];

10 
C⁄sﬁe
 *
	gcuºít_c⁄¶
;

12 c⁄° *
	gây«mes
[
NR_TTY
] = {"tty1", "tty2", "tty3", "tty4"};

13 
uöt16_t
 *
	gvmem
 = (*)
∑_to_va
(0xb8000);

15 
uöt16_t
 
	gvbuf
[
NR_TTY
][
SCR_W
 * 
SCR_H
 * 2];

17 
	gb™√r
[
SCR_W
 + 1];

20 
	$gë_cuºít_ây
() {

21  
cuºít_c⁄¶
->
«me
;

22 
	}
}

24 
uöt16_t


25 
	$døw
(
ch
) {

26  (
C_BLACK
 << 12Ë| (
C_WHITE
 << 8Ë| 
ch
;

27 
	}
}

30 
	$s¸up
(
C⁄sﬁe
 *
c
) {

31 
i
;

32 i‡(
c
->
s¸
 + c->
wh
 >c->
vbuf
 + c->
size
) {

33 
i
 = 
c
->
w
; i < c->
size
; i ++)

34 
c
->
vbuf
[
i
 - c->
w
] = c->vbuf[i];

35 
c
->
s¸
 -c->
w
;

36 
c
->
pos
 -c->
w
;

38 
i
 = 0; i < 
c
->
w
; i ++)

39 
c
->
s¸
[c->
wh
 + 
i
] = 
	`døw
(' ');

40 
c
->
s¸
 +c->
w
;

41 
	}
}

44 
	$√xt
(
C⁄sﬁe
 *
c
) {

45 i‡(
c
->
vbuf
 + c->
pos
 =c->
s¸
 + c->
wh
 - 1) {

46 
	`s¸up
(
c
);

48 
c
->
pos
 ++;

49 
	}
}

52 
	$putc
(
C⁄sﬁe
 *
c
, 
ch
) {

53 *(
c
->
vbuf
 + c->
pos
Ë
	`døw
(
ch
);

54 
	}
}

57 
	$¸
(
C⁄sﬁe
 *
c
) {

58 
c
->
pos
 -c->po†% c->
w
;

59 
	}
}

62 
	$lf
(
C⁄sﬁe
 *
c
) {

63 
c
->
pos
 +c->
w
;

64 i‡(
c
->
pos
 >c->
s¸
 - c->
vbuf
 + c->
wh
) {

65 
	`s¸up
(
c
);

67 
	}
}

70 
	$dñ
(
C⁄sﬁe
 *
c
) {

71 
c
->
pos
 --;

72 
	`putc
(
c
, ' ');

73 
	}
}

75 
boﬁ


76 
	$movl
(
C⁄sﬁe
 *
c
) {

77 i‡(
c
->
i
 != 0) {

78 
c
->
i
 --;

79 
c
->
pos
 --;

80  
åue
;

82  
Ál£
;

83 
	}
}

85 
boﬁ


86 
	$movr
(
C⁄sﬁe
 *
c
) {

87 i‡(
c
->
lbuf
[c->
i
] != 0) {

88 
c
->
i
 ++;

89 
c
->
pos
 ++;

90  
åue
;

92  
Ál£
;

93 
	}
}

96 
	$c⁄¶_sync
(
C⁄sﬁe
 *
c
) {

97 
i
;

98 
i
 = 0; i < 
SCR_W
; i ++) {

99 
vmem
[
i
] = (
C_BLUE
 << 12Ë| (
C_LWHITE
 << 8Ë| 
b™√r
[i];

101 i‡(
cuºít_c⁄¶
 =
c
) {

102 
	`mem˝y
(
vmem
 + 
c
->
w
, c->
s¸
, c->
wh
 * 2);

103 
pos
 = 
c
->po†- (c->
s¸
 - c->
vbuf
Ë+ c->
w
;

104 
	`out_byã
(0x3d4, 0xe);

105 
	`out_byã
(0x3d5, 
pos
 >> 8);

106 
	`out_byã
(0x3d4, 0xf);

107 
	`out_byã
(0x3d5, 
pos
 & 0xff);

109 
	}
}

112 
	$ªmovec
(
C⁄sﬁe
 *
c
) {

113 *
±r
 = &
c
->
lbuf
[-- c->
i
];

114 
uöt16_t
 *
s¸
 = &
c
->
vbuf
[c->
pos
 - 1];

115 *
±r
 != 0) {

116 *
±r
 = *(ptr + 1);

117 *
s¸
 = *(scr + 1);

118 
±r
 ++; 
s¸
 ++;

120 
	}
}

123 
	$back•
(
C⁄sﬁe
 *
c
) {

124 i‡(
c
->
i
 > 0) {

125 
	`ªmovec
(
c
);

126 i‡(
c
->
lbuf
[c->
i
] == 0) {

127 
	`dñ
(
c
);

129 
c
->
pos
 --;

136 
	}
}

138 
size_t


139 
	$gë_cooked
(
C⁄sﬁe
 *
c
, 
pid_t
 
pid
, *
buf
, 
cou¡
) {

140 
	`as£π
(
c
->
f
 !c->
r
);

141 
ƒód
 = 0;

142 
cou¡
 --) {

143 i‡(
c
->
cbuf
[c->
f
] == 0) {

144 
c
->
f
 = (c->‡+ 1Ë% 
CBUF_SZ
;

147 
	`c›y_‰om_kî√l
(
	`„tch_pcb
(
pid
), 
buf
 ++, 
c
->
cbuf
 + c->
f
, 1);

148 
ƒód
 ++;

149 
c
->
f
 = (c->‡+ 1Ë% 
CBUF_SZ
;

151  
ƒód
;

152 
	}
}

155 
	$ªad_ªque°
(
Msg
 *
m
) {

156 
C⁄sﬁe
 *
c
 = &
âys
[
m
->
dev_id
];

157 i‡(
c
->
f
 =c->
r
) {

158 i‡(
c
->
π›
 =
RSTK_SZ
Ë
	`∑nic
("too manyÑeadÑequest");

159 
	`mem˝y
(&
c
->
r°k
[c->
π›
 ++], 
m
, (
Msg
));

161 
ƒód
 = 
	`gë_cooked
(
c
, 
m
->
ªq_pid
, m->
buf
, m->
Àn
);

162 
m
->
ªt
 = 
ƒód
;

163 
pid_t
 
de°
 = 
m
->
§c
;

164 
m
->
§c
 = 
TTY
;

165 
	`£nd
(
de°
, 
m
);

167 
	}
}

170 
	$cook
(
C⁄sﬁe
 *
c
) {

171 
	`¥ötk
("C≠tuª: %s\n", 
c
->
lbuf
);

172 *
p
 = 
c
->
lbuf
;

174 
c
->
cbuf
[c->
r
] = *
p
;

175 
c
->
r
 = (c->∏+ 1Ë% 
CBUF_SZ
;

176 i‡(
c
->
r
 =c->
f
Ë
	`∑nic
("cooked buffer full");

177 } *
p
 ++ != 0);

178 
c
->
lbuf
[c->
i
 = 0] = 0;

179 
	`¸
(
c
); 
	`lf
(c);

180 i‡(
c
->
π›
 != 0) {

181 
c
->
π›
 --;

182 
	`ªad_ªque°
(&
c
->
r°k
[c->
π›
]);

184 
	}
}

187 
	$c⁄¶_wrôec
(
C⁄sﬁe
 *
c
, 
ch
) {

188 
ch
) {

189 '\r': 
	`¸
(
c
); ;

190 '\n': 
	`¸
(
c
); 
	`lf
(c); ;

192 
	`putc
(
c
, 
ch
);

193 
	`√xt
(
c
);

195 
	}
}

198 
	$c⁄¶_ac˚±
(
C⁄sﬁe
 *
c
, 
ch
) {

199 
i
, 
cc
 = 0;

200 ; 
c
->
lbuf
[c->
i
 + 
cc
] != 0; cc ++);

201 
i
 = 
cc
 + 1; i > 0; i --) {

202 i‡(
c
->
i
 + i >
LBUF_SZ
Ë
	`∑nic
("line buffer full");

203 
c
->
lbuf
[c->
i
 + i] = c->lbuf[c->i + i - 1];

204 i‡(
c
->
vbuf
 + c->
pos
 + 
i
 =c->
s¸
 + c->
wh
 + 1) {

205 
	`s¸up
(
c
);

207 
c
->
vbuf
[c->
pos
 + 
i
] = c->vbuf[c->pos + i - 1];

209 
	`putc
(
c
, 
ch
);

210 
	`√xt
(
c
);

211 i‡(
c
->
i
 >
LBUF_SZ
Ë
	`∑nic
("line buffer full");

212 
c
->
lbuf
[c->
i
 ++] = 
ch
;

213 
	`c⁄¶_sync
(
c
);

214 
	}
}

217 
	$c⁄¶_„ed
(
C⁄sﬁe
 *
c
, 
key
) {

218 
key
) {

219 
K_ENTR
:

220 
	`cook
(
c
);

222 
K_DEL
:

223 
K_BACK
:

224 i‡(
key
 =
K_DEL
Ë
	`movr
(
c
);

225 
	`back•
(
c
);

227 
K_LEFT
:

228 
	`movl
(
c
);

230 
K_RIGHT
:

231 
	`movr
(
c
);

233 
K_HOME
:

234 
	`movl
(
c
));

236 
K_END
:

237 
	`movr
(
c
));

239 
K_F1
: 
K_F2
: 
K_F3
:

240 
K_F4
: 
K_F5
: 
K_F6
:

241 i‡(
key
 - 
K_F1
 < 
NR_TTY
) {

242 
c
 = 
cuºít_c⁄¶
 = 
âys
 + 
key
 - 
K_F1
;

246 
	`c⁄¶_sync
(
c
);

247 
	}
}

250 
	$öô_c⁄¶
(
ây_ödex
) {

251 
C⁄sﬁe
 *
c
 = 
âys
 + 
ây_ödex
;

252 
c
->
«me
 = 
ây«mes
[
ây_ödex
];

253 
c
->
vbuf
 = vbuf[
ây_ödex
];

254 
c
->
s¸
 = 
vbuf
[
ây_ödex
];

255 
c
->
size
 = 
SCR_W
 * 
SCR_H
 * 2;

256 
c
->
pos
 = 0;

257 
c
->
w
 = 
SCR_W
;

258 
c
->
h
 = 
SCR_H
;

259 
c
->
wh
 = c->
w
 * c->
h
;

260 
c
->
lbuf
[0] = 0;

262 
i
;

263 
i
 = 0; i < 
SCR_W
 * 
SCR_H
; i ++) {

264 
c
->
s¸
[
i
] = 
	`døw
(' ');

266 
c
->
i
 = c->
r
 = c->
f
 = 0;

267 
c
->
π›
 = 0;

268 
	`c⁄¶_sync
(
c
);

269 
	}
}

272 
	$£nd_upd©emsg
() {

273 i‡(
	`gë_jiffy
(Ë% (
HZ
 / 10) == 0) {

274 
Msg
 
m
;

275 
m
.
§c
 = 
MSG_HARD_INTR
;

276 
m
.
ty≥
 = 
MSG_TTY_UPDATE
;

277 
	`£nd
(
TTY
, &
m
);

279 
	}
}

281 
	$öô_c⁄sﬁe
() {

282 
	`mem£t
(
b™√r
, ' ', (banner));

283 
b™√r
[
SCR_W
] = 0;

284 
i
;

285 
i
 = 0; i < 
NR_TTY
; i ++) {

286 
	`öô_c⁄¶
(
i
);

287 
	`hÆ_ªgi°î
(
âys
[
i
].
«me
, 
TTY
, i);

289 
cuºít_c⁄¶
 = 
âys
;

290 
	`add_úq_h™dÀ
(0, 
£nd_upd©emsg
);

291 
	}
}

	@src/kernel/drivers/tty/getty.c

1 
	~"kî√l.h
"

2 
	~"ây.h
"

3 
	~"hÆ.h
"

5 
	gây_idx
 = 1;

8 
	$gëty
() {

9 
«me
[] = "tty0";

10 
	`lock
();

11 
«me
[3] +(
ây_idx
 ++);

12 
	`u∆ock
();

31 
	}
}

34 
	$öô_gëty
() {

35 
i
;

36 
i
 = 0; i < 
NR_TTY
; i ++) {

37 
	`wakeup
(
	`¸óã_kthªad
(
gëty
));

39 
	}
}

	@src/kernel/drivers/tty/keyboard.c

1 
	~"kî√l.h
"

2 
	~"x86/x86.h
"

3 
	~"ây.h
"

4 
	~"ãrm.h
"

5 
	~"hÆ.h
"

8 
	$£nd_keymsg
() {

9 
Msg
 
m
;

10 
m
.
ty≥
 = 
MSG_TTY_GETKEY
;

11 
m
.
§c
 = 
MSG_HARD_INTR
;

12 
	`£nd
(
TTY
, &
m
);

13 
	}
}

15 
	gˇps
, 
	g˘æ
, 
	gÆt
, 
	gsh·
;

17 
	gkeych¨
[2][128] = {

33 
	$ªadkey
() {

34 
uöt32_t
 
code
 = 
	`ö_byã
(0x60);

35 
	`ö_byã
(0x61);

37 i‡(
code
 >= 128) {

38 
code
 -= 128;

39 
code
) {

40 
K_LSHFT
: 
sh·
 --; ;

41 
K_RSHFT
: 
sh·
 --; ;

42 
K_CTRL
: 
˘æ
 --; ;

43 
K_ALT
: 
Æt
 --; ;

44 
K_CAPS
: 
ˇps
 &= 1; ;

47 
c
 = 
keych¨
[0][
code
];

48 i‡(
c
 >= 'a' && c <= 'z') {

49 
c
 = 
keych¨
[(
sh·
 & 1Ë^ (
ˇps
 & 1)][
code
];

51 
c
 = 
keych¨
[
sh·
 & 1][
code
];

53 i‡(
c
 != 0) {

54 
	`c⁄¶_ac˚±
(
cuºít_c⁄¶
, 
c
);

56 
code
) {

57 
K_ENTR
:

58 
K_BACK
:

59 
K_LEFT
:

60 
K_RIGHT
:

61 
K_HOME
:

62 
K_END
:

63 
K_DEL
:

64 
K_F1
:

65 
K_F2
:

66 
K_F3
:

67 
K_F4
:

68 
K_F5
:

69 
K_F6
:

70 
	`c⁄¶_„ed
(
cuºít_c⁄¶
, 
code
); ;

71 
K_F12
:

72 
	`¥ötk
("\33[1;31mWillÇowÑeboot.\33[0m\n");

73 
asm
 volatile("movl $0, %esp;Öushl $0");

74 
	`as£π
(0);

76 
K_LSHFT
: 
sh·
 ++; ;

77 
K_RSHFT
: 
sh·
 ++; ;

78 
K_CTRL
: 
˘æ
 ++; ;

79 
K_ALT
: 
Æt
 ++; ;

80 
K_CAPS
: 
ˇps
 ++; ;

83 
	}
}

	@src/kernel/drivers/tty/term.h

1 #i‚de‡
__TERM_H__


2 
	#__TERM_H__


	)

4 
	#K_CAPS
 58

	)

5 
	#K_LSHFT
 42

	)

6 
	#K_RSHFT
 54

	)

7 
	#K_CTRL
 29

	)

8 
	#K_ALT
 56

	)

10 
	#K_ENTR
 28

	)

11 
	#K_BACK
 14

	)

13 
	#K_LEFT
 75

	)

14 
	#K_RIGHT
 77

	)

16 
	#K_PUP
 73

	)

17 
	#K_PDWN
 81

	)

18 
	#K_HOME
 71

	)

19 
	#K_END
 79

	)

20 
	#K_INS
 82

	)

21 
	#K_DEL
 83

	)

23 
	#K_F1
 59

	)

24 
	#K_F2
 60

	)

25 
	#K_F3
 61

	)

26 
	#K_F4
 62

	)

27 
	#K_F5
 63

	)

28 
	#K_F6
 64

	)

29 
	#K_F12
 88

	)

31 
	#M_CTRL
 0x80000000

	)

32 
	#M_ALT
 0x40000000

	)

34 
	#LBUF_SZ
 256

	)

35 
	#CBUF_SZ
 1024

	)

38 
	#C_BLACK
 0

	)

39 
	#C_BLUE
 1

	)

40 
	#C_WHITE
 7

	)

41 
	#C_LWHITE
 15

	)

43 
	#SCR_W
 80

	)

44 
	#SCR_H
 24

	)

	@src/kernel/drivers/tty/tty.c

1 
	~"kî√l.h
"

2 
	~"hÆ.h
"

3 
	~"ây.h
"

5 
pid_t
 
	gTTY
;

7 
£nd_keymsg
();

9 
öô_c⁄sﬁe
();

10 
öô_gëty
();

11 
âyd
();

13 
	$öô_ây
() {

14 
	`add_úq_h™dÀ
(1, 
£nd_keymsg
);

15 
PCB
 *
p
 = 
	`¸óã_kthªad
(
âyd
);

16 
TTY
 = 
p
->
pid
;

17 
	`wakeup
(
p
);

18 
	`öô_c⁄sﬁe
();

19 
	`öô_gëty
();

20 
	}
}

23 
	$âyd
() {

24 
Msg
 
m
;

27 
	`ª˚ive
(
ANY
, &
m
);

28 i‡(
m
.
§c
 =
MSG_HARD_INTR
) {

29 
m
.
ty≥
) {

30 
MSG_TTY_GETKEY
:

31 
	`ªadkey
();

33 
MSG_TTY_UPDATE
:

34 
	`upd©e_b™√r
();

37 
	`¥ötk
("mesßgê§c:%d\n", 
m
.
§c
);

38 
	`¥ötk
("mesßgêde°:%d\n", 
m
.
de°
);

39 
	`¥ötk
("mesßgêªq_pid:%d\n", 
m
.
ªq_pid
);

40 
	`¥ötk
("mesßgêdev_id:%d\n", 
m
.
dev_id
);

41 
	`¥ötk
("mesßgêty≥: %d\n", 
m
.
ty≥
);

42 
	`as£π
(0);

45 
m
.
ty≥
) {

46 
DEV_READ
:

47 
	`ªad_ªque°
(&
m
);

49 
DEV_WRITE
:

50 i‡(
m
.
dev_id
 >0 && m.dev_id < 
NR_TTY
) {

51 
c
;

52 
i
;

53 
i
 = 0; i < 
m
.
Àn
; i ++) {

54 
	`c›y_to_kî√l
(
	`„tch_pcb
(
m
.
ªq_pid
), &
c
, (*)m.
buf
 + 
i
, 1);

55 
	`c⁄¶_wrôec
(&
âys
[
m
.
dev_id
], 
c
);

57 
	`c⁄¶_sync
(&
âys
[
m
.
dev_id
]);

60 
	`as£π
(0);

62 
m
.
ªt
 = m.
Àn
;

63 
pid_t
 
de°
 = 
m
.
§c
;

64 
m
.
§c
 = 
cuºít
->
pid
;

65 
	`£nd
(
de°
, &
m
);

68 
	`¥ötk
("mesßgê§c:%d\n", 
m
.
§c
);

69 
	`¥ötk
("mesßgêde°:%d\n", 
m
.
de°
);

70 
	`¥ötk
("mesßgêªq_pid:%d\n", 
m
.
ªq_pid
);

71 
	`¥ötk
("mesßgêdev_id:%d\n", 
m
.
dev_id
);

72 
	`¥ötk
("mesßgêty≥:%d\n", 
m
.
ty≥
);

73 
	`as£π
(0);

77 
	}
}

	@src/kernel/drivers/tty/tty.h

1 #i‚de‡
__TTY_H__


2 
	#__TTY_H__


	)

4 
	#NR_TTY
 4

	)

5 
	#MSG_TTY_GETKEY
 1

	)

6 
	#MSG_TTY_UPDATE
 2

	)

7 
	#LBUF_SZ
 256

	)

8 
	#CBUF_SZ
 1024

	)

9 
	#RSTK_SZ
 16

	)

11 
	sC⁄sﬁe
 {

12 c⁄° *
	m«me
;

13 
uöt16_t
 *
	mvbuf
;

14 
uöt16_t
 *
	ms¸
;

15 
	mw
, 
	mh
, 
	mwh
;

16 
	msize
, 
	mpos
;

17 
	mlbuf
[
LBUF_SZ
 + 1];

18 
	mcbuf
[
CBUF_SZ
 + 1];

19 
	mi
, 
	mf
, 
	mr
;

20 
	mπ›
;

21 
Msg
 
	mr°k
[
RSTK_SZ
];

22 } 
	tC⁄sﬁe
;

24 
pid_t
 
TTY
;

25 
C⁄sﬁe
 
âys
[];

26 
C⁄sﬁe
 *
cuºít_c⁄¶
;

28 
c⁄¶_sync
(
C⁄sﬁe
 *
c
);

29 
c⁄¶_wrôec
(
C⁄sﬁe
 *
c
, 
ch
);

30 
c⁄¶_„ed
(
C⁄sﬁe
 *
c
, 
key
);

31 
c⁄¶_ac˚±
(
C⁄sﬁe
 *
c
, 
ch
);

32 
ªadkey
();

33 
upd©e_b™√r
();

34 
ªad_ªque°
(
Msg
 *
m
);

	@src/kernel/irq/i8259.c

1 
	~"x86/x86.h
"

3 
	#PORT_PIC_MASTER
 0x20

	)

4 
	#PORT_PIC_SLAVE
 0xA0

	)

5 
	#IRQ_SLAVE
 2

	)

7 
	$öô_öå
() {

9 
	`out_byã
(
PORT_PIC_MASTER
 + 1, 0xFF);

10 
	`out_byã
(
PORT_PIC_SLAVE
 + 1 , 0xFF);

13 
	`out_byã
(
PORT_PIC_MASTER
, 0x11);

14 
	`out_byã
(
PORT_PIC_MASTER
 + 1, 32);

15 
	`out_byã
(
PORT_PIC_MASTER
 + 1, 1 << 2);

16 
	`out_byã
(
PORT_PIC_MASTER
 + 1, 0x3);

17 
	`out_byã
(
PORT_PIC_SLAVE
, 0x11);

18 
	`out_byã
(
PORT_PIC_SLAVE
 + 1, 32 + 8);

19 
	`out_byã
(
PORT_PIC_SLAVE
 + 1, 2);

20 
	`out_byã
(
PORT_PIC_SLAVE
 + 1, 0x3);

21 
	`out_byã
(
PORT_PIC_MASTER
, 0x68);

22 
	`out_byã
(
PORT_PIC_MASTER
, 0x0A);

23 
	`out_byã
(
PORT_PIC_SLAVE
, 0x68);

24 
	`out_byã
(
PORT_PIC_SLAVE
, 0x0A);

25 
	}
}

	@src/kernel/irq/idt.c

1 
	~"comm⁄.h
"

2 
	~"x86/x86.h
"

4 
	#INTERRUPT_GATE_32
 0xE

	)

5 
	#TRAP_GATE_32
 0xF

	)

9 
G©eDesc
 
	gidt
[
NR_IRQ
];

12 
	$£t_öå
(
G©eDesc
 *
±r
, 
uöt32_t
 
£À˘‹
, uöt32_à
off£t
, uöt32_à
d∂
) {

13 
±r
->
off£t_15_0
 = 
off£t
 & 0xFFFF;

14 
±r
->
£gmít
 = 
£À˘‹
;

15 
±r
->
∑d0
 = 0;

16 
±r
->
ty≥
 = 
INTERRUPT_GATE_32
;

17 
±r
->
sy°em
 = 
Ál£
;

18 
±r
->
¥ivûege_Àvñ
 = 
d∂
;

19 
±r
->
¥e£¡
 = 
åue
;

20 
±r
->
off£t_31_16
 = (
off£t
 >> 16) & 0xFFFF;

21 
	}
}

24 
	$£t_å≠
(
G©eDesc
 *
±r
, 
uöt32_t
 
£À˘‹
, uöt32_à
off£t
, uöt32_à
d∂
) {

25 
±r
->
off£t_15_0
 = 
off£t
 & 0xFFFF;

26 
±r
->
£gmít
 = 
£À˘‹
;

27 
±r
->
∑d0
 = 0;

28 
±r
->
ty≥
 = 
TRAP_GATE_32
;

29 
±r
->
sy°em
 = 
Ál£
;

30 
±r
->
¥ivûege_Àvñ
 = 
d∂
;

31 
±r
->
¥e£¡
 = 
åue
;

32 
±r
->
off£t_31_16
 = (
off£t
 >> 16) & 0xFFFF;

33 
	}
}

35 
úq0
();

36 
úq1
();

37 
úq14
();

38 
vec0
();

39 
vec1
();

40 
vec2
();

41 
vec3
();

42 
vec4
();

43 
vec5
();

44 
vec6
();

45 
vec7
();

46 
vec8
();

47 
vec9
();

48 
vec10
();

49 
vec11
();

50 
vec12
();

51 
vec13
();

52 
vec14
();

53 
vecsys
();

55 
úq_em±y
();

57 
	$öô_idt
() {

58 
i
;

59 
i
 = 0; i < 
NR_IRQ
; i ++) {

60 
	`£t_å≠
(
idt
 + 
i
, 
SEG_KERNEL_CODE
 << 3, (
uöt32_t
)
úq_em±y
, 
DPL_KERNEL
);

62 
	`£t_å≠
(
idt
 + 0, 
SEG_KERNEL_CODE
 << 3, (
uöt32_t
)
vec0
, 
DPL_KERNEL
);

63 
	`£t_å≠
(
idt
 + 1, 
SEG_KERNEL_CODE
 << 3, (
uöt32_t
)
vec1
, 
DPL_KERNEL
);

64 
	`£t_å≠
(
idt
 + 2, 
SEG_KERNEL_CODE
 << 3, (
uöt32_t
)
vec2
, 
DPL_KERNEL
);

65 
	`£t_å≠
(
idt
 + 3, 
SEG_KERNEL_CODE
 << 3, (
uöt32_t
)
vec3
, 
DPL_KERNEL
);

66 
	`£t_å≠
(
idt
 + 4, 
SEG_KERNEL_CODE
 << 3, (
uöt32_t
)
vec4
, 
DPL_KERNEL
);

67 
	`£t_å≠
(
idt
 + 5, 
SEG_KERNEL_CODE
 << 3, (
uöt32_t
)
vec5
, 
DPL_KERNEL
);

68 
	`£t_å≠
(
idt
 + 6, 
SEG_KERNEL_CODE
 << 3, (
uöt32_t
)
vec6
, 
DPL_KERNEL
);

69 
	`£t_å≠
(
idt
 + 7, 
SEG_KERNEL_CODE
 << 3, (
uöt32_t
)
vec7
, 
DPL_KERNEL
);

70 
	`£t_å≠
(
idt
 + 8, 
SEG_KERNEL_CODE
 << 3, (
uöt32_t
)
vec8
, 
DPL_KERNEL
);

71 
	`£t_å≠
(
idt
 + 9, 
SEG_KERNEL_CODE
 << 3, (
uöt32_t
)
vec9
, 
DPL_KERNEL
);

72 
	`£t_å≠
(
idt
 + 10, 
SEG_KERNEL_CODE
 << 3, (
uöt32_t
)
vec10
, 
DPL_KERNEL
);

73 
	`£t_å≠
(
idt
 + 11, 
SEG_KERNEL_CODE
 << 3, (
uöt32_t
)
vec11
, 
DPL_KERNEL
);

74 
	`£t_å≠
(
idt
 + 12, 
SEG_KERNEL_CODE
 << 3, (
uöt32_t
)
vec12
, 
DPL_KERNEL
);

75 
	`£t_å≠
(
idt
 + 13, 
SEG_KERNEL_CODE
 << 3, (
uöt32_t
)
vec13
, 
DPL_KERNEL
);

76 
	`£t_å≠
(
idt
 + 14, 
SEG_KERNEL_CODE
 << 3, (
uöt32_t
)
vec14
, 
DPL_KERNEL
);

79 
	`£t_å≠
(
idt
 + 0x80, 
SEG_KERNEL_CODE
 << 3, (
uöt32_t
)
vecsys
, 
DPL_USER
);

81 
	`£t_öå
(
idt
+32 + 0, 
SEG_KERNEL_CODE
 << 3, (
uöt32_t
)
úq0
, 
DPL_KERNEL
);

82 
	`£t_öå
(
idt
+32 + 1, 
SEG_KERNEL_CODE
 << 3, (
uöt32_t
)
úq1
, 
DPL_KERNEL
);

83 
	`£t_öå
(
idt
+32 + 14, 
SEG_KERNEL_CODE
 << 3, (
uöt32_t
)
úq14
, 
DPL_KERNEL
);

86 
	`wrôe_idå
(
idt
, (idt));

87 
	}
}

	@src/kernel/irq/irq_handle.c

1 
	~"kî√l.h
"

3 
	#NR_IRQ_HANDLE
 32

	)

6 
	#NR_HARD_INTR
 16

	)

17 
	sIRQ_t
 {

18 (*
	mroutöe
)();

19 
IRQ_t
 *
	m√xt
;

22 
IRQ_t
 
	gh™dÀ_poﬁ
[
NR_IRQ_HANDLE
];

23 
IRQ_t
 *
	gh™dÀs
[
NR_HARD_INTR
];

24 
	gh™dÀ_cou¡
 = 0;

27 
add_úq_h™dÀ
(
úq
, (*
func
)() ) {

28 
IRQ_t
 *
±r
;

29 
	`as£π
(
úq
 < 
NR_HARD_INTR
);

30 i‡(
h™dÀ_cou¡
 > 
NR_IRQ_HANDLE
) {

31 
	`∑nic
("Too many irqÑegistrations!");

33 
±r
 = &
h™dÀ_poﬁ
[
h™dÀ_cou¡
 ++];

34 
±r
->
routöe
 = 
func
;

35 
±r
->
√xt
 = 
h™dÀs
[
úq
];

36 
h™dÀs
[
úq
] = 
±r
;

37 
	}
}

38 
scheduÀ
();

40 
	$úq_h™dÀ
(
TøpFøme
 *
tf
) {

43 
úq
 = 
tf
->irq;

45 i‡(
úq
 < 0) {

46 
	`∑nic
("UnhandledÉxception!");

49 if(
úq
 =0x80 && 
tf
->
óx
 == 1)

50 
	`¥ötk
("ã°3Öa°! cuºíà¥o˚ss: %d\n", 
cuºít
->
pid
);

52 i‡(
úq
 < 1000 && irq != 0x80) {

53 
uöt8_t
 
logo
[];

54 
	`∑nic
("U√x≥˘edÉx˚±i⁄ #%d\n\33[1;31mHöt: Thêmachöêi†Æway†right! F‹ m‹êdëaû†abouàex˚±i⁄ #%d, sì\n%s\n\33[0m", 
úq
, irq, 
logo
);

55 } i‡(
úq
 >= 1000) {

58 
úq_id
 = 
úq
 - 1000;

59 
	`as£π
(
úq_id
 < 
NR_HARD_INTR
);

60 
IRQ_t
 *
f
 = 
h™dÀs
[
úq_id
];

62 
f
 !
NULL
) {

63 
f
->
	`routöe
();

64 
f
 = f->
√xt
;

67 
NOINTR
;

69 
cuºít
->
tf
 =Åf;

70 
	`scheduÀ
();

71 
	}
}

	@src/kernel/main.c

1 
	~"comm⁄.h
"

2 
	~"x86/x86.h
"

3 
	~"mem‹y.h
"

5 
öô_∑ge
();

6 
öô_£rül
();

7 
öô_£gmít
();

8 
öô_idt
();

9 
öô_öå
();

10 
öô_¥oc
();

11 
wñcome
();

12 
öô_drivî
();

13 
öô_m™agemít
();

15 
os_öô_c⁄t
();

18 
	$os_öô
() {

24 
	`öô_∑ge
();

28 
asm
 vﬁ©ûê("ádd»%0, %%e•\n\t\
 *%1": : "r"(
KOFFSET
), "r"(
os_öô_c⁄t
));

31 
	`as£π
(0);

32 
	}
}

35 
	$os_öô_c⁄t
() {

39 
	`öô_£gmít
();

42 
	`öô_£rül
();

46 
	`öô_idt
();

49 
	`öô_öå
();

52 
	`öô_¥oc
();

54 
	`wñcome
();

56 
	`öô_drivî
();

58 
	#PORT_TIME
 0x40

	)

59 
	#FREQ_8253
 1193182

	)

60 
	#HZ
 100000

	)

62 
cou¡
 = 
FREQ_8253
 / 
HZ
;

63 
	`as£π
(
cou¡
 < 65536);

64 
	`out_byã
(
PORT_TIME
 + 3, 0x34);

65 
	`out_byã
(
PORT_TIME
 , 
cou¡
 % 256);

66 
	`out_byã
(
PORT_TIME
 , 
cou¡
 / 256);

68 
	`öô_m™agemít
();

70 
	`°i
();

74 
	`waô_öå
();

76 
	}
}

79 
	$wñcome
() {

80 
	`¥ötk
("Hello, OS World!\n");

81 
	}
}

	@src/kernel/management/fm.c

1 
	~"kî√l.h
"

3 
pid_t
 
	gFM
;

5 
size_t
 
do_ªad
(
fûe_«me
, 
uöt8_t
 *
buf
, 
off_t
 
off£t
, size_à
Àn
);

6 
fm
();

8 
	$öô_fm
(){

9 
PCB
 *
p
 = 
	`¸óã_kthªad
(
fm
);

10 
FM
 = 
p
->
pid
;

11 
	`wakeup
(
p
);

12 
	}
}

14 
	$fm
(){

15 
Msg
 
m
;

17 
	`ª˚ive
(
ANY
, &
m
);

18 if(
m
.
§c
 =
MSG_HARD_INTR
){

19 
	`as£π
(0);

21 
size_t
 
n
 = 
	`dev_ªad
("øm", 
m
.
ªq_pid
, m.
buf
, m.
ty≥
 * 
NR_FILE_SIZE
 + m.
off£t
, m.
Àn
);

22 
m
.
ªt
 = 
n
;

23 
pid_t
 
de°
 = 
m
.
§c
;

24 
m
.
§c
 = 
cuºít
->
pid
;

25 
	`£nd
(
de°
, &
m
);

28 
	}
}

30 
size_t
 
	$do_ªad
(
fûe_«me
, 
uöt8_t
 *
buf
, 
off_t
 
off£t
, 
size_t
 
Àn
){

31 
Msg
 
m
;

32 
m
.
§c
 = m.
ªq_pid
 = 
cuºít
->
pid
;

33 
m
.
ty≥
 = 
fûe_«me
;

34 
m
.
buf
 = buf;

35 
m
.
off£t
 = offset;

36 
m
.
Àn
 =Üen;

37 
	`£nd
(
FM
, &
m
);

38 
	`ª˚ive
(
FM
, &
m
);

39  
m
.
ªt
;

40 
	}
}

	@src/kernel/management/management.c

1 
öô_fm
();

2 
öô_pm
();

3 
öô_mm
();

5 
	$öô_m™agemít
(){

6 
	`öô_fm
();

7 
	`öô_pm
();

8 
	`öô_mm
();

9 
	}
}

	@src/kernel/management/mm.c

1 
	~"kî√l.h
"

3 
	#SEGMENT_MEM
 4 * 1024 * 1024

	)

4 
	#USER_ADDR
 10 * 
SEGMENT_MEM


	)

7 
mm
();

9 
pid_t
 
	gMM
;

11 
	$öô_mm
(){

12 
PCB
 *
p
 = 
	`¸óã_kthªad
(
mm
);

13 
MM
 = 
p
->
pid
;

14 
	`wakeup
(
p
);

15 
	}
}

17 
	$mm
(){

18 
PDE
 *
pdú
 = 
	`∑_to_va
(
USER_ADDR
), *
kpdú
 = 
	`gë_kpdú
();

19 
PTE
 *
±abÀ
 = 
	`∑_to_va
(
USER_ADDR
 + 
PAGE_SIZE
);

20 
uöt32_t
 
pdú_idx
, 
p‰ame_idx
;

22 
pdú_idx
 = 0;Ödú_idx < 
NR_PDE
;Ödir_idx++){

23 
	`make_övÆid_pde
(&
pdú
[
pdú_idx
]);

26 
p‰ame_idx
 = (
USER_ADDR
 >> 12) + 2;

28 
uöt32_t
 
∑
, 
va
, 
memsz
, 
i
, 
ödex
;

30 
Msg
 
m
;

32 
	`ª˚ive
(
ANY
, &
m
);

33 if(
m
.
§c
 =
MSG_HARD_INTR
){

34 
	`as£π
(0);

36 
m
.
ty≥
){

37 
NEW_PAGE
:

38 
∑
 = 
p‰ame_idx
 << 12;

41 
va
 = 
m
.
off£t
;

42 
memsz
 = 
m
.
Àn
;

43 
	`make_pde
(&
pdú
[(
va
 >> 22Ë& 0x3FF], 
	`va_to_∑
(
±abÀ
));

44 
i
 = 0; i < 
memsz
; i +
PAGE_SIZE
, 
va
 += PAGE_SIZE){

45 
	`make_±e
(&
±abÀ
[(
va
 >> 12Ë& 0x3FF], (*)(
p‰ame_idx
 << 12));

46 
p‰ame_idx
 ++;

48 
m
.
ªt
 = 
∑
;

50 
SHARE_KERNEL_PAGE
:

51 
va
 = 
m
.
off£t
;

52 
memsz
 = 
m
.
Àn
;

53 
i
 = 0; i < 
memsz
; i +
PD_SIZE
, 
va
 += PD_SIZE){

54 
ödex
 = (
va
 >> 22) & 0x3FF;

55 
	`make_pde
(&
pdú
[
ödex
], (*)(
kpdú
[ödex].
∑ge_‰ame
 << 12));

59 
	`as£π
(0);

61 
pid_t
 
de°
 = 
m
.
§c
;

62 
m
.
§c
 = 
cuºít
->
pid
;

63 
	`£nd
(
de°
, &
m
);

67 
	}
}

	@src/kernel/management/pm.c

1 
	~"kî√l.h
"

3 
pm
();

4 
TøpFøme
* 
öô_pcb
(
PCB
 *
p
, *
fun
);

6 
pid_t
 
	gPM
;

8 
	$öô_pm
(){

9 
PCB
 *
p
 = 
	`¸óã_kthªad
(
pm
);

10 
PM
 = 
p
->
pid
;

11 
	`wakeup
(
p
);

12 
	}
}

14 
	$pm
(){

15 
uöt32_t
 
va
, 
∑
;

16 *
i
, *
vde°
;

17 
buf
[512];

18 
Msg
 
m
;

19 
	`lock
();

20 if(
≤um
 >
MAXPCB_NUM
){

21 
	`∑nic
("noÖcb for moreÅhread");

23 
PCB
 *
p
 = &
pcb
[
≤um
];

24 
p
->
pid
 = 
≤um
++;

25 
	`u∆ock
();

26 
	`do_ªad
(0, (
uöt8_t
 *)
buf
, 0, 512);

38 
ELFHódî
 *
ñf
 = (ELFHódî *)
buf
;

39 
ProgømHódî
 *
ph
, *
ïh
;

40 
ph
 = (
ProgømHódî
*)((*)
ñf
 +Élf->
phoff
);

41 
ïh
 = 
ph
 + 
ñf
->
phnum
;

42 ; 
ph
 < 
ïh
; ++ph){

43 
va
 = 
ph
->
vaddr
;

45 
m
.
§c
 = 
cuºít
->
pid
;

46 
m
.
ty≥
 = 
NEW_PAGE
;

47 
m
.
off£t
 = 
va
;

48 
m
.
Àn
 = 
ph
->
memsz
;

49 
	`£nd
(
MM
, &
m
);

50 
	`ª˚ive
(
MM
, &
m
);

51 
∑
 = 
m
.
ªt
;

53 
vde°
 = 
	`∑_to_va
(
∑
);

54 
	`do_ªad
(0, 
vde°
, 
ph
->
off
,Öh->
fûesz
);

55 
i
 = 
vde°
 + 
ph
->
fûesz
; i < vde° +Öh->
memsz
; *i++ = 0);

57 
	`öô_pcb
(
p
, (*)(
ñf
->
íåy
));

58 
p
->
¸3
.
vÆ
 = 0;

59 
p
->
¸3
.
∑ge_dúe˘‹y_ba£
 = (10 * 
PD_SIZE
) >> 12;

61 
m
.
§c
 = 
cuºít
->
pid
;

62 
m
.
ty≥
 = 
SHARE_KERNEL_PAGE
;

63 
m
.
off£t
 = 
KOFFSET
;

64 
m
.
Àn
 = 
KMEM
;

65 
	`£nd
(
MM
, &
m
);

66 
	`ª˚ive
(
MM
, &
m
);

67 
	`wakeup
(
p
);

71 
	}
}

73 
TøpFøme
* 
	$öô_pcb
(
PCB
 *
p
, *
fun
){

74 
TøpFøme
 *
‰ame
 = (TøpFømê*)(
p
->
k°ack
 + 
KSTACK_SIZE
) - 1;

75 
‰ame
->
ds
 = 0x10;

76 
‰ame
->
es
 = 0x10;

77 
‰ame
->
fs
 = 0x10;

78 
‰ame
->
gs
 = 0x10;

79 
‰ame
->
cs
 = 8;

80 
‰ame
->
eù
 = (
uöt32_t
)
fun
;

81 
‰ame
->
eÊags
 |
IF_MASK
;

82 
p
->
tf
 = 
‰ame
;

83 
p
->
li°
.
¥ev
 = 
NULL
;

84 
p
->
li°
.
√xt
 = 
NULL
;

85 
p
->
lock_˙t
 = 0;

86 
p
->
outmo°_if
 = 
IF_MASK
;

87 
	`li°_öô
(&
p
->
maû
);

88 
	`¸óã_£m
(&
p
->
maû_num
, 0);

89  
‰ame
;

90 
	}
}

	@src/kernel/memory/kvm.c

1 
	~"x86/x86.h
"

2 
	~"mem‹y.h
"

3 
	~"°rög.h
"

15 
CR3
 
	gk¸3
;

16 
PDE
 
	gkpdú
[
NR_PDE
] 
	gÆign_to_∑ge
;

17 
PTE
 
	gk±abÀ
[
PHY_MEM
 / 
PAGE_SIZE
] 
	gÆign_to_∑ge
;

20 
ölöe
 
CR3
* 
	$gë_k¸3
() {

21  &
k¸3
;

22 
	}
}

24 
ölöe
 
PDE
* 
	$gë_kpdú
() {

25  
kpdú
;

26 
	}
}

28 
ölöe
 
PTE
* 
	$gë_k±abÀ
() {

29  
k±abÀ
;

30 
	}
}

34 
	$öô_∑ge
() {

35 
CR0
 
¸0
;

36 
CR3
 
¸3
;

37 
PDE
 *
pdú
 = (PDE *)
	`va_to_∑
(
kpdú
);

38 
PTE
 *
±abÀ
 = (PTE *)
	`va_to_∑
(
k±abÀ
);

39 
uöt32_t
 
pdú_idx
, 
±abÀ_idx
, 
p‰ame_idx
;

42 
pdú_idx
 = 0;Ödú_idx < 
NR_PDE
;Ödir_idx ++) {

43 
	`make_övÆid_pde
(&
pdú
[
pdú_idx
]);

46 
p‰ame_idx
 = 0;

47 
pdú_idx
 = 0;Ödú_idx < 
PHY_MEM
 / 
PD_SIZE
;Ödir_idx ++) {

48 
	`make_pde
(&
pdú
[
pdú_idx
], 
±abÀ
);

49 
	`make_pde
(&
pdú
[
pdú_idx
 + 
KOFFSET
 / 
PD_SIZE
], 
±abÀ
);

50 
±abÀ_idx
 = 0;ÖèbÀ_idx < 
NR_PTE
;Ötable_idx ++) {

51 
	`make_±e
(
±abÀ
, (*)(
p‰ame_idx
 << 12));

52 
p‰ame_idx
 ++;

53 
±abÀ
 ++;

58 
¸3
.
vÆ
 = 0;

59 
¸3
.
∑ge_dúe˘‹y_ba£
 = ((
uöt32_t
)
pdú
) >> 12;

60 
	`wrôe_¸3
(&
¸3
);

63 
¸0
.
vÆ
 = 
	`ªad_¸0
();

64 
¸0
.
∑gög
 = 1;

65 
	`wrôe_¸0
(&
¸0
);

69 
k¸3
.
vÆ
 = 
¸3
.val;

70 
	}
}

73 
TSS
 
	gtss
;

75 
ölöe
 

76 
	$£t_tss
(
SegDesc
 *
±r
) {

77 
tss
.
ss0
 = 
	`SELECTOR_KERNEL
(
SEG_KERNEL_DATA
);

79 
uöt32_t
 
ba£
 = (uöt32_t)&
tss
;

80 
uöt32_t
 
limô
 = (
TSS
) - 1;

81 
±r
->
limô_15_0
 = 
limô
 & 0xffff;

82 
±r
->
ba£_15_0
 = 
ba£
 & 0xffff;

83 
±r
->
ba£_23_16
 = (
ba£
 >> 16) & 0xff;

84 
±r
->
ty≥
 = 
SEG_TSS_32BIT
;

85 
±r
->
£gmít_ty≥
 = 0;

86 
±r
->
¥ivûege_Àvñ
 = 
DPL_USER
;

87 
±r
->
¥e£¡
 = 1;

88 
±r
->
limô_19_16
 = 
limô
 >> 16;

89 
±r
->
so·_u£
 = 0;

90 
±r
->
›î©i⁄_size
 = 0;

91 
±r
->
∑d0
 = 1;

92 
±r
->
gønuœrôy
 = 0;

93 
±r
->
ba£_31_24
 = 
ba£
 >> 24;

94 
	}
}

96 
ölöe
 
	$£t_tss_e•0
(
uöt32_t
 
e•
) {

97 
tss
.
e•0
 = 
e•
;

98 
	}
}

101 
SegDesc
 
	ggdt
[
NR_SEGMENTS
];

104 
	$£t_£gmít
(
SegDesc
 *
±r
, 
uöt32_t
 
∂
, uöt32_à
ty≥
) {

105 
±r
->
limô_15_0
 = 0xFFFF;

106 
±r
->
ba£_15_0
 = 0x0;

107 
±r
->
ba£_23_16
 = 0x0;

108 
±r
->
ty≥
 =Åype;

109 
±r
->
£gmít_ty≥
 = 1;

110 
±r
->
¥ivûege_Àvñ
 = 
∂
;

111 
±r
->
¥e£¡
 = 1;

112 
±r
->
limô_19_16
 = 0xF;

113 
±r
->
so·_u£
 = 0;

114 
±r
->
›î©i⁄_size
 = 0;

115 
±r
->
∑d0
 = 1;

116 
±r
->
gønuœrôy
 = 1;

117 
±r
->
ba£_31_24
 = 0x0;

118 
	}
}

125 
	$öô_£gmít
() {

126 
	`mem£t
(
gdt
, 0, (gdt));

127 
	`£t_£gmít
(&
gdt
[
SEG_KERNEL_CODE
], 
DPL_KERNEL
, 
SEG_EXECUTABLE
 | 
SEG_READABLE
);

128 
	`£t_£gmít
(&
gdt
[
SEG_KERNEL_DATA
], 
DPL_KERNEL
, 
SEG_WRITABLE
 );

129 
	`£t_£gmít
(&
gdt
[
SEG_USER_CODE
], 
DPL_USER
, 
SEG_EXECUTABLE
 | 
SEG_READABLE
);

130 
	`£t_£gmít
(&
gdt
[
SEG_USER_DATA
], 
DPL_USER
, 
SEG_WRITABLE
 );

132 
	`wrôe_gdå
(
gdt
, (gdt));

134 
	`£t_tss
(&
gdt
[
SEG_TSS
]);

135 
	`wrôe_å
–
	`SELECTOR_USER
(
SEG_TSS
) );

136 
	}
}

	@src/kernel/memory/util.c

1 
	~"x86/mem‹y.h
"

4 
	$make_övÆid_pde
(
PDE
 *
p
) {

5 
p
->
vÆ
 = 0;

6 
	}
}

8 
	$make_övÆid_±e
(
PTE
 *
p
) {

9 
p
->
vÆ
 = 0;

10 
	}
}

17 
	$make_pde
(
PDE
 *
p
, *
addr
) {

18 
p
->
vÆ
 = 0;

19 
p
->
∑ge_‰ame
 = ((
uöt32_t
)
addr
) >> 12;

20 
p
->
¥e£¡
 = 1;

21 
p
->
ªad_wrôe
 = 1;

22 
p
->
u£r_su≥rvis‹
 = 1;

23 
	}
}

26 
	$make_±e
(
PTE
 *
p
, *
addr
) {

27 
p
->
vÆ
 = 0;

28 
p
->
∑ge_‰ame
 = ((
uöt32_t
)
addr
) >> 12;

29 
p
->
¥e£¡
 = 1;

30 
p
->
ªad_wrôe
 = 1;

31 
p
->
u£r_su≥rvis‹
 = 1;

32 
	}
}

	@src/kernel/process/schedule.c

1 
	~"kî√l.h
"

3 
PCB
 
	gidÀ
, 
	gpcb
[
MAXPCB_NUM
], *
	gcuºít
 = &
idÀ
;

4 
Li°Hód
 
	gªady
, 
	gmsg_poﬁ
;

5 
pid_t
 
	g≤um
 = 0;

6 
Msg
 
	gmsgs
[
MAXMSG_NUM
];

9 
	$scheduÀ
() {

12 
	`as£π
(!
	`li°_em±y
(&
ªady
));

13 if(
cuºít
 !&
idÀ
 && cuºít->
li°
.
¥ev
 =&
ªady
){

14 
	`li°_dñ
(&
cuºít
->
li°
);

15 
	`li°_add_bef‹e
(&
idÀ
.
li°
, &
cuºít
->list);

17 
cuºít
 = 
	`li°_íåy
(
ªady
.
√xt
, 
PCB
, 
li°
);

18 
	`as£π
(
cuºít
 !&
idÀ
);

19 
	`wrôe_¸3
(&
cuºít
->
¸3
);

20 
	}
}

22 
PCB
* 
	$„tch_pcb
(
pid_t
 
pid
){

23  &
pcb
[
pid
];

24 
	}
}

	@src/kernel/process/util.c

1 
	~"kî√l.h
"

3 
lock
();

4 
u∆ock
();

5 
¶ìp
(
Li°Hód
 *);

6 
wakeup
(
PCB
 *);

7 
¸óã_£m
(
Sem
 *, );

8 
P
(
Sem
 *);

9 
V
(
Sem
 *);

10 
c›y_msg
(
Msg
 *
d
, Msg *
s
);

11 
£nd
(
pid_t
 
de°
, 
Msg
 *
m
);

12 
ª˚ive
(
pid_t
 
§c
, 
Msg
 *
m
);

13 
öô_¥oc
();

14 
ªad_mbr
();

15 
ªad_øm
();

16 
ªad_fûe
();

18 
PCB
*

19 
	$¸óã_kthªad
(*
fun
) {

20 if(
≤um
 >
MAXPCB_NUM
){

21 
	`∑nic
("noÖcb for moreÅhread");

23 
PCB
 *
p
 = &
pcb
[
≤um
];

24 
TøpFøme
 *
‰ame
 = (TøpFømê*)(
p
->
k°ack
 + 
KSTACK_SIZE
) - 1;

25 
‰ame
->
ds
 = 0x10;

26 
‰ame
->
es
 = 0x10;

27 
‰ame
->
fs
 = 0x10;

28 
‰ame
->
gs
 = 0x10;

29 
‰ame
->
cs
 = 8;

30 
‰ame
->
eù
 = (
uöt32_t
)
fun
;

31 
‰ame
->
eÊags
 |
IF_MASK
;

32 
p
->
tf
 = 
‰ame
;

33 
p
->
li°
.
¥ev
 = 
NULL
;

34 
p
->
li°
.
√xt
 = 
NULL
;

35 
p
->
lock_˙t
 = 0;

36 
p
->
outmo°_if
 = 
IF_MASK
;

37 
p
->
pid
 = 
≤um
++;

38 
	`li°_öô
(&
p
->
maû
);

39 
	`¸óã_£m
(&
p
->
maû_num
, 0);

40 
p
->
¸3
.
vÆ
 = 
	`gë_k¸3
()->val;

41  
p
;

42 
	}
}

44 
	$¶ìp
(
Li°Hód
 *
b
){

45 
	`lock
();

46 
NOINTR
;

47 
	`li°_dñ
(&
cuºít
->
li°
);

48 
	`li°_add_bef‹e
(
b
, &
cuºít
->
li°
);

49 
	`u∆ock
();

50 
asm
 volatile("int $0x80");

51 
	}
}

53 
	$wakeup
(
PCB
 *
p
){

54 
	`lock
();

55 
NOINTR
;

56 
	`li°_dñ
(&
p
->
li°
);

57 
	`li°_add_bef‹e
(&
idÀ
.
li°
, &
p
->list);

58 
	`u∆ock
();

59 
	}
}

62 
	$öô_¥oc
() {

63 
	`li°_öô
(&
ªady
);

64 
	`li°_add_bef‹e
(&
ªady
, &
idÀ
.
li°
);

66 
	`li°_öô
(&
msg_poﬁ
);

67 
i
 = 0;

68 
i
 = 0; i < 
MAXMSG_NUM
; ++i)

69 
	`li°_add_bef‹e
(&
msg_poﬁ
, &
msgs
[
i
].
li°
);

70 
	}
}

72 
	$lock
(){

73 
	`as£π
(
cuºít
->
lock_˙t
 >= 0);

74 if(
cuºít
->
lock_˙t
 == 0)

75 
cuºít
->
outmo°_if
 = (
	`ªad_eÊags
(Ë& 
IF_MASK
);

76 
	`˛i
();

77 
cuºít
->
lock_˙t
 += 1;

78 
	`as£π
(
cuºít
->
lock_˙t
 >= 0);

79 
	}
}

81 
	$u∆ock
(){

82 
	`as£π
(
cuºít
->
lock_˙t
 >= 0);

83 
cuºít
->
lock_˙t
 -= 1;

84 if(
cuºít
->
lock_˙t
 == 0)

85 if(
cuºít
->
outmo°_if
)

86 
	`°i
();

87 
	`as£π
(
cuºít
->
lock_˙t
 >= 0);

88 
	}
}

90 
	$¸óã_£m
(
Sem
 *
£m
, 
t
){

91 
£m
->
tokí
 = 
t
;

92 
	`li°_öô
(&(
£m
->
block
));

93 
	}
}

95 
	$P
(
Sem
 *
s
){

96 
	`lock
();

97 
NOINTR
;

98 if(
s
->
tokí
 > 0)

99 
s
->
tokí
 -= 1;

102 
	`¶ìp
(&(
s
->
block
));

103 
NOINTR
;

105 
	`u∆ock
();

106 
	}
}

108 
	$V
(
Sem
 *
s
){

109 
	`lock
();

110 
NOINTR
;

111 if(
	`li°_em±y
(&(
s
->
block
)))

112 
s
->
tokí
 += 1;

115 
	`wakeup
(
	`li°_íåy
((
s
->
block
).
√xt
, 
PCB
, 
li°
));

116 
NOINTR
;

118 
	`u∆ock
();

119 
	}
}

124 
	$£nd
(
pid_t
 
de°
, 
Msg
 *
m
){

125 
m
->
de°
 = dest;

126 
	`lock
();

127 if(
	`li°_em±y
(&
msg_poﬁ
))

128 
	`∑nic
("messageÖoolÑuns out!\n");

129 
Li°Hód
 *
pm
 = 
msg_poﬁ
.
√xt
;

130 
	`li°_dñ
(
pm
);

131 
Msg
 *
t
 = 
	`li°_íåy
(
pm
, Msg, 
li°
);

132 
	`c›y_msg
(
t
, 
m
);

133 #ifde‡
DEBUG


134 
	`¥ötk
("cuºíàpid: %d\n", 
cuºít
->
pid
);

135 
	`¥ötk
("sendá message:\n");

136 
	`¥ötk
("mesßgêaddr:%x\n", 
m
);

137 
	`¥ötk
("mesßgê§c: %d\n", 
m
->
§c
);

138 
	`¥ötk
("mesßgêde°: %d\n", 
m
->
de°
);

139 
	`¥ötk
("mesßgêty≥: %d\n", 
m
->
ty≥
);

140 
	`¥ötk
("\n");

145 
	`li°_add_bef‹e
(&
pcb
[
de°
].
maû
, &
t
->
li°
);

146 #ifde‡
MAIL


147 
Li°Hód
 *
pmaû
;

148 
n
 = 0;

149 
	`li°_f‹óch
(
pmaû
, &
pcb
[
de°
].
maû
)

150 
n
++;

151 
	`¥ötk
("£ndî: %d\n£nd: id:%d\tmaûÇums:%d\n", 
m
->
§c
, 
de°
, 
n
);

153 
	`u∆ock
();

154 
	`V
(&
pcb
[
de°
].
maû_num
);

165 
	}
}

167 
	$c›y_msg
(
Msg
 *
d
, Msg *
s
){

168 
d
->
§c
 = 
s
->src;

169 
d
->
de°
 = 
s
->dest;

170 
d
->
ty≥
 = 
s
->type;

171 
d
->
ªq_pid
 = 
s
->req_pid;

172 
d
->
dev_id
 = 
s
->dev_id;

173 
d
->
buf
 = 
s
->buf;

174 
d
->
off£t
 = 
s
->offset;

175 
d
->
Àn
 = 
s
->len;

177 
	}
}

179 
	$ª˚ive
(
pid_t
 
§c
, 
Msg
 *
m
){

180 
Li°Hód
 *
pmaû
;

181 
Msg
 *
msg
;

182 
Êag
 = 0, 
cou¡
 = 0;

184 !
Êag
){

185 
	`P
(&
cuºít
->
maû_num
);

186 if(
§c
 !
ANY
){

188 
	`lock
();
NOINTR
;

189 if(
	`li°_em±y
(&
cuºít
->
maû
))

190 
	`∑nic
("mail box isÉmpty!!\n");

191 #ifde‡
DEBUG


192 
maû_˙t
 = 0;

193 
	`li°_f‹óch
(
pmaû
, &
cuºít
->
maû
)

194 
maû_˙t
++;

195 
	`¥ötk
("maû_˙t: %d\àmaû_num: %d\àcou¡: %d\n", 
maû_˙t
, 
cuºít
->
maû_num
.
tokí
, 
cou¡
);

197 
	`li°_f‹óch
(
pmaû
, &
cuºít
->
maû
){

201 
msg
 = 
	`li°_íåy
(
pmaû
, 
Msg
, 
li°
);

202 if(
msg
->
§c
 == src){

203 
	`li°_dñ
(
pmaû
);

204 
	`c›y_msg
(
m
, 
msg
);

205 #ifde‡
DEBUG


206 
	`¥ötk
("cuºíàpid: %d\n", 
cuºít
->
pid
);

207 
	`¥ötk
("receive certain message:\n");

208 
	`¥ötk
("mesßgêaddr:%x\n", 
msg
);

209 
	`¥ötk
("mesßgê§c: %d\n", 
m
->
§c
);

210 
	`¥ötk
("mesßgêde°: %d\n", 
m
->
de°
);

211 
	`¥ötk
("mesßgêty≥: %d\n", 
m
->
ty≥
);

212 
	`¥ötk
("\n");

214 
Êag
 = 1;

218 #ifde‡
MAIL


219 if(!
Êag
)

220 
	`¥ötk
("%d Nìd maû from %d buànÿ√eded maûs!\n", 
cuºít
->
pid
, 
§c
);

222 
	`u∆ock
();

223 }if(
§c
 =
ANY
){

224 
	`lock
();
NOINTR
;

225 if(
	`li°_em±y
(&
cuºít
->
maû
))

226 
	`∑nic
("mail box isÉmpty!!\n");

227 #ifde‡
DEBUG


228 
maû_˙t
 = 0;

229 
	`li°_f‹óch
(
pmaû
, &
cuºít
->
maû
)

230 
maû_˙t
++;

231 
	`¥ötk
("maû_˙t: %d\àmaû_num: %d\àcou¡: %d\n", 
maû_˙t
, 
cuºít
->
maû_num
.
tokí
, 
cou¡
);

233 
pmaû
 = 
cuºít
->
maû
.
√xt
;

234 
	`li°_dñ
(
pmaû
);

235 
msg
 = 
	`li°_íåy
(
pmaû
, 
Msg
, 
li°
);

236 
	`c›y_msg
(
m
, 
msg
);

237 #ifde‡
DEBUG


238 
	`¥ötk
("cuºíàpid: %d\n", 
cuºít
->
pid
);

239 
	`¥ötk
("receiveány message:\n");

240 
	`¥ötk
("mesßgêaddr:%x\n", 
msg
);

241 
	`¥ötk
("mesßgê§c: %d\n", 
m
->
§c
);

242 
	`¥ötk
("mesßgêde°: %d\n", 
m
->
de°
);

243 
	`¥ötk
("mesßgêty≥: %d\n", 
m
->
ty≥
);

244 
	`¥ötk
("\n");

246 
Êag
 = 1;

247 
	`u∆ock
();

250 
	`as£π
(0);

252 if(!
Êag
){

253 
cou¡
 += 1;

257 
	`lock
();

258 
	`li°_add_bef‹e
(&
msg_poﬁ
, 
pmaû
);

259 
cuºít
->
maû_num
.
tokí
 +
cou¡
;

260 #ifde‡
MAIL


261 
n
 = 0;

262 
	`li°_f‹óch
(
pmaû
, &
cuºít
->
maû
)

263 
n
++;

264 
	`¥ötk
("ªcv: id:%d\tmaûÇums:%d\n", 
cuºít
->
pid
, 
n
);

266 
	`u∆ock
();

267 
	}
}

269 
	$ªad_mbr
(){

270 
uöt8_t
 
buf
[512];

271 
n
 = 
	`dev_ªad
("hda", 
cuºít
->
pid
, 
buf
, 0, 512);

272 if(
n
)

273 
	`¥ötk
("ªad %d byã†ö MBR:\n", 
n
);

275 
	`∑nic
("read ide failed!\n");

276 
i
;

277 
i
 = 0; i < 512; ++i){

278 
uöt8_t
 
c
 = 
buf
[
i
];

279 
	`£rül_¥ötc
(
hexBﬂrd
[(
c
 & 0xf0) >> 4]);

280 
	`£rül_¥ötc
(
hexBﬂrd
[(
c
 & 0x0f)]);

281 
	`£rül_¥ötc
(' ');

283 
	`£rül_¥ötc
('\n');

287 
	}
}

289 
	$ªad_øm
(){

290 
Àn
 = 1024, 
off£t
 = 0;

291 
uöt8_t
 
buf
[
Àn
];

292 
n
 = 
	`dev_ªad
("øm", 
cuºít
->
pid
, 
buf
, 
off£t
, 
Àn
);

293 if(
n
)

294 
	`¥ötk
("ªad %d byã†öÑamdisk:\n", 
n
);

296 
	`∑nic
("readÑamdisk failed!\n");

297 
i
;

298 
i
 = 0; i < 
Àn
; ++i){

299 
	`¥ötk
("%c", 
buf
[
i
]);

301 
	`¥ötk
("\n");

305 
	}
}

307 
	$ªad_fûe
(){

308 
fûe
 = 1, 
Àn
 = 1024, 
off£t
 = 0;

309 
uöt8_t
 
buf
[
Àn
];

310 
n
 = 
	`do_ªad
(
fûe
, 
buf
, 
off£t
, 
Àn
);

311 if(
n
)

312 
	`¥ötk
("ªad %d byã†‰om fûê%d:\n", 
n
, 
fûe
);

314 
	`∑nic
("ªad fûê%d faûed!\n", 
fûe
);

315 
i
;

316 
i
 = 0; i < 
Àn
; ++i){

317 
	`¥ötk
("%c", 
buf
[
i
]);

319 
	`¥ötk
("\n");

323 
	}
}

	@src/lib/kcpy.c

1 
	~"¥o˚ss.h
"

2 
	~"°rög.h
"

4 
	$c›y_‰om_kî√l
(
PCB
* 
pcb
, * 
de°
, * 
§c
, 
Àn
){

5 
	`mem˝y
(
de°
, 
§c
, 
Àn
);

6 
	}
}

8 
	$c›y_to_kî√l
(
PCB
* 
pcb
, * 
de°
, * 
§c
, 
Àn
){

9 
	`mem˝y
(
de°
, 
§c
, 
Àn
);

10 
	}
}

12 
	$°r˝y_to_kî√l
(
PCB
* 
pcb
, * 
de°
, * 
§c
){

13 
	`°r˝y
(
de°
, 
§c
);

14 
	}
}

16 
	$°r˝y_‰om_kî√l
(
PCB
* 
pcb
, * 
de°
, * 
§c
){

17 
	`°r˝y
(
de°
, 
§c
);

18 
	}
}

	@src/lib/logo.c

1 
	glogo
[] = {

	@src/lib/printk.c

1 
	~"comm⁄.h
"

3 
	ghexBﬂrd
[] = "0123456789abcdef";

5 
¥ötI¡îgî
((*
¥öãr
)(), c⁄° 
num
, c⁄° 
ba£
){

21 if(
ba£
 == 16){

22 
absNum
 = 
num
, 
numBa£
 = 1;

23 
absNum
 / 
numBa£
 >
ba£
)

24 
numBa£
 *
ba£
;

25 
numBa£
 != 0){

26 
	`¥öãr
(
hexBﬂrd
[
absNum
 / 
numBa£
]);

27 
absNum
 %
numBa£
;

28 
numBa£
 /
ba£
;

30 }if(
ba£
 == 10){

31 
ßmeNum
 = 
num
, 
numBa£
 = 1;

32 if(
ßmeNum
 < 0){

33 
	`¥öãr
('-');

34 
ßmeNum
 / 
numBa£
 <-
ba£
)

35 
numBa£
 *
ba£
;

36 
numBa£
 = -numBase;

38 
ßmeNum
 / 
numBa£
 >
ba£
)

39 
numBa£
 *
ba£
;

41 
numBa£
 != 0){

42 
	`¥öãr
(
hexBﬂrd
[
ßmeNum
 / 
numBa£
]);

43 
ßmeNum
 %
numBa£
;

44 
numBa£
 /
ba£
;

47 
	}
}

50 
vÂrötf
((*
¥öãr
)(), c⁄° *
˘l
, **
¨gs
) {

51 c⁄° *
°r
 = 
˘l
;

52 ;*
°r
 != '\0'; str ++){

53 if(*
°r
 != '%'){

54 
	`¥öãr
(*
°r
);

56 
°r
++;

57 if(*
°r
 == 's'){

58 *
s
 = *(**)
¨gs
++;

59 ; *
s
 !'\0'; s++Ë
	`¥öãr
(*s);

60 }if(*
°r
 == 'c'){

61 
c
 = *(*)
¨gs
++;

62 
	`¥öãr
(
c
);

63 }if(*
°r
 == 'd'){

64 
d
 = *(*)
¨gs
++;

65 
	`¥ötI¡îgî
(
¥öãr
, 
d
, 10);

66 }if(*
°r
 == 'x'){

67 
x
 = *(*)
¨gs
++;

68 
	`¥ötI¡îgî
(
¥öãr
, 
x
, 16);

72 
	}
}

75 
__©åibuã__
((
__noölöe__
))

76 
	$¥ötk
(c⁄° *
˘l
, ...) {

77 **
¨gs
 = (**)&
˘l
 + 1;

78 
	`vÂrötf
(
£rül_¥ötc
, 
˘l
, 
¨gs
);

79 
	}
}

	@src/lib/serial.c

1 
	~"x86/x86.h
"

3 
	#SERIAL_PORT
 0x3F8

	)

6 
	$öô_£rül
() {

7 
	`out_byã
(
SERIAL_PORT
 + 1, 0x00);

8 
	`out_byã
(
SERIAL_PORT
 + 3, 0x80);

9 
	`out_byã
(
SERIAL_PORT
 + 0, 0x01);

10 
	`out_byã
(
SERIAL_PORT
 + 1, 0x00);

11 
	`out_byã
(
SERIAL_PORT
 + 3, 0x03);

12 
	`out_byã
(
SERIAL_PORT
 + 2, 0xC7);

13 
	`out_byã
(
SERIAL_PORT
 + 4, 0x0B);

14 
	}
}

16 
ölöe
 
boﬁ


17 
	$£rül_idÀ
() {

18  (
	`ö_byã
(
SERIAL_PORT
 + 5) & 0x20) != 0;

19 
	}
}

22 
	$£rül_¥ötc
(
ch
) {

23 
	`£rül_idÀ
(Ë!
åue
);

24 
	`out_byã
(
SERIAL_PORT
, 
ch
);

25 
	}
}

	@src/lib/string.c

1 
	~"comm⁄.h
"

8 *
	$ôﬂ
(
a
) {

9 
buf
[30];

10 *
p
 = 
buf
 + (buf) - 1;

12 *--
p
 = '0' + 
a
 % 10;

13 } 
a
 /= 10);

14  
p
;

15 
	}
}

17 
	$mem˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
size
) {

18 
asm
 vﬁ©ûê("˛d;Ñï movsb" : : "c"(
size
), "S"(
§c
), "D"(
de°
));

19 
	}
}

21 
	$mem£t
(*
de°
, 
uöt8_t
 
d©a
, 
size_t
 
size
) {

22 
asm
 vﬁ©ûê("˛d;Ñï stosb" : : "c"(
size
), "a"(
d©a
), "D"(
de°
));

23 
	}
}

25 
size_t
 
	$°æí
(c⁄° *
°r
) {

26 
Àn
 = 0;

27 *
°r
 ++Ë
Àn
 ++;

28  
Àn
;

29 
	}
}

31 
	$°r˝y
(*
d
, c⁄° *
s
) {

32 
	`mem˝y
(
d
, 
s
, 
	`°æí
(s) + 1);

33 
	}
}

35 
	$°rcmp
(c⁄° *
d
, c⁄° *
s
){

36 
i
 = 0, 
j
 = 0, 
di
, 
sj
;

37 *(
d
 + 
i
Ë&& *(
s
 + 
j
)){

38 
di
 = *(
d
 + 
i
);

39 
sj
 = *(
s
 + 
j
);

40 if(
di
 !
sj
)

41  
di
 - 
sj
;

42 ++
i
;

43 ++
j
;

45  *(
d
 + 
i
Ë- *(
s
 + 
j
);

46 
	}
}

	@test0/test0.c

1 
	$maö
() {

2 vﬁ©ûê
x
 = 0;

3 1Ë
x
 ++;

5 
	}
}

	@test1/test0.c

1 vﬁ©ûê
	gx
 = 0;

2 
	$maö
() {

3 1Ë
x
 ++;

5 
	}
}

	@test2/test0.c

1 vﬁ©ûê
	gx
 = 0;

2 
	$maö
() {

4 if(
x
 % 10000000 == 0) {

5 
asm
 volatile("movl $1, %eax; int $0x80");

8 
x
 ++;

11 
	}
}

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 
__BEGIN_DECLS


67 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

68 
__löe
, c⁄° *
__fun˘i⁄
)

69 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

72 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

73 
__löe
, c⁄° *
__fun˘i⁄
)

74 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

79 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

80 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

83 
__END_DECLS


85 
	#as£π
(
ex¥
) \

86 ((
ex¥
) \

87 ? 
	`__ASSERT_VOID_CAST
 (0) \

88 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

90 #ifdef 
__USE_GNU


91 
	#as£π_≥º‹
(
î∫um
) \

92 (!(
î∫um
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

102 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

103 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

105 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

106 
	#__ASSERT_FUNCTION
 
__func__


	)

108 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

115 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


116 #unde‡
°©ic_as£π


117 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/memory.h

22 #i‚def 
_MEMORY_H


23 
	#_MEMORY_H
 1

	)

25 
	~<„©uªs.h
>

28 #i‚def 
_STRING_H


29 
	~<°rög.h
>

	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

640 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

641 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


643 #unde‡
memp˝y


644 #unde‡
__memp˝y


645 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

646 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

648 
__exã∫_Æways_ölöe
 *

649 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

650 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

652  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

653 
	}
}

658 
	g__END_DECLS


	@/usr/include/term.h

41 #i‚de‡
NCURSES_TERM_H_ö˛


42 
	#NCURSES_TERM_H_ö˛
 1

	)

44 #unde‡
NCURSES_VERSION


45 
	#NCURSES_VERSION
 "6.0"

	)

47 
	~<ncur£s_dŒ.h
>

49 #ifde‡
__˝lu•lus


57 #unde‡
NCURSES_CONST


58 
	#NCURSES_CONST
 c⁄°

	)

60 #unde‡
NCURSES_SBOOL


61 
	#NCURSES_SBOOL
 

	)

63 #unde‡
NCURSES_USE_DATABASE


64 
	#NCURSES_USE_DATABASE
 1

	)

66 #unde‡
NCURSES_USE_TERMCAP


67 
	#NCURSES_USE_TERMCAP
 0

	)

69 #unde‡
NCURSES_XNAMES


70 
	#NCURSES_XNAMES
 1

	)

75 #unde‡
TTY


76 #unde‡
SET_TTY


77 #unde‡
GET_TTY


83 #unde‡
TERMIOS


84 
	#TERMIOS
 1

	)

86 
	~<ãrmios.h
>

87 
	#TTY
 
ãrmios


	)

94 #unde‡
TERMIOS


95 
	#TERMIOS
 1

	)

97 
	~<ãrmio.h
>

98 
	#TTY
 
ãrmio


	)

102 #i‡
__MINGW32__


103 
	~<ncur£s_mögw.h
>

104 
	#TTY
 
ãrmios


	)

106 #unde‡
TERMIOS


107 
	~<sgây.h
>

108 
	~<sys/io˘l.h
>

109 
	#TTY
 
sgâyb


	)

115 #ifde‡
TERMIOS


116 
	#GET_TTY
(
fd
, 
buf
Ë
	`tcgë©å
(fd, buf)

	)

117 
	#SET_TTY
(
fd
, 
buf
Ë
	`tc£èâr
(fd, 
TCSADRAIN
, buf)

	)

119 
	#GET_TTY
(
fd
, 
buf
Ë
	`gây
(fd, buf)

	)

120 
	#SET_TTY
(
fd
, 
buf
Ë
	`°ty
(fd, buf)

	)

123 
	#NAMESIZE
 256

	)

125 
	#CUR
 
cur_ãrm
->
ty≥
.

	)

127 
	#auto_À·_m¨gö
 
CUR
 
Boﬁóns
[0]

	)

128 
	#auto_right_m¨gö
 
CUR
 
Boﬁóns
[1]

	)

129 
	#no_esc_˘lc
 
CUR
 
Boﬁóns
[2]

	)

130 
	#˚ﬁ_°™dout_glôch
 
CUR
 
Boﬁóns
[3]

	)

131 
	#ót_√wlöe_glôch
 
CUR
 
Boﬁóns
[4]

	)

132 
	#îa£_ovî°rike
 
CUR
 
Boﬁóns
[5]

	)

133 
	#gíîic_ty≥
 
CUR
 
Boﬁóns
[6]

	)

134 
	#h¨d_c›y
 
CUR
 
Boﬁóns
[7]

	)

135 
	#has_mëa_key
 
CUR
 
Boﬁóns
[8]

	)

136 
	#has_°©us_löe
 
CUR
 
Boﬁóns
[9]

	)

137 
	#ö£π_nuŒ_glôch
 
CUR
 
Boﬁóns
[10]

	)

138 
	#mem‹y_above
 
CUR
 
Boﬁóns
[11]

	)

139 
	#mem‹y_bñow
 
CUR
 
Boﬁóns
[12]

	)

140 
	#move_ö£π_mode
 
CUR
 
Boﬁóns
[13]

	)

141 
	#move_°™dout_mode
 
CUR
 
Boﬁóns
[14]

	)

142 
	#ovî_°rike
 
CUR
 
Boﬁóns
[15]

	)

143 
	#°©us_löe_esc_ok
 
CUR
 
Boﬁóns
[16]

	)

144 
	#de°_èbs_magic_smso
 
CUR
 
Boﬁóns
[17]

	)

145 
	#tûde_glôch
 
CUR
 
Boﬁóns
[18]

	)

146 
	#å™•¨ít_undîlöe
 
CUR
 
Boﬁóns
[19]

	)

147 
	#x⁄_xoff
 
CUR
 
Boﬁóns
[20]

	)

148 
	#√eds_x⁄_xoff
 
CUR
 
Boﬁóns
[21]

	)

149 
	#¥å_sûít
 
CUR
 
Boﬁóns
[22]

	)

150 
	#h¨d_curs‹
 
CUR
 
Boﬁóns
[23]

	)

151 
	#n⁄_ªv_rmcup
 
CUR
 
Boﬁóns
[24]

	)

152 
	#no_∑d_ch¨
 
CUR
 
Boﬁóns
[25]

	)

153 
	#n⁄_de°_s¸ﬁl_ªgi⁄
 
CUR
 
Boﬁóns
[26]

	)

154 
	#ˇn_ch™ge
 
CUR
 
Boﬁóns
[27]

	)

155 
	#back_cﬁ‹_îa£
 
CUR
 
Boﬁóns
[28]

	)

156 
	#hue_lighäess_ßtuøti⁄
 
CUR
 
Boﬁóns
[29]

	)

157 
	#cﬁ_addr_glôch
 
CUR
 
Boﬁóns
[30]

	)

158 
	#¸_ˇn˚ls_mi¸o_mode
 
CUR
 
Boﬁóns
[31]

	)

159 
	#has_¥öt_whìl
 
CUR
 
Boﬁóns
[32]

	)

160 
	#row_addr_glôch
 
CUR
 
Boﬁóns
[33]

	)

161 
	#£mi_auto_right_m¨gö
 
CUR
 
Boﬁóns
[34]

	)

162 
	#˝i_ch™ges_ªs
 
CUR
 
Boﬁóns
[35]

	)

163 
	#Õi_ch™ges_ªs
 
CUR
 
Boﬁóns
[36]

	)

164 
	#cﬁumns
 
CUR
 
Numbîs
[0]

	)

165 
	#öô_èbs
 
CUR
 
Numbîs
[1]

	)

166 
	#löes
 
CUR
 
Numbîs
[2]

	)

167 
	#löes_of_mem‹y
 
CUR
 
Numbîs
[3]

	)

168 
	#magic_cookõ_glôch
 
CUR
 
Numbîs
[4]

	)

169 
	#∑ddög_baud_øã
 
CUR
 
Numbîs
[5]

	)

170 
	#vútuÆ_ãrmöÆ
 
CUR
 
Numbîs
[6]

	)

171 
	#width_°©us_löe
 
CUR
 
Numbîs
[7]

	)

172 
	#num_œbñs
 
CUR
 
Numbîs
[8]

	)

173 
	#œbñ_height
 
CUR
 
Numbîs
[9]

	)

174 
	#œbñ_width
 
CUR
 
Numbîs
[10]

	)

175 
	#max_©åibuãs
 
CUR
 
Numbîs
[11]

	)

176 
	#maximum_wödows
 
CUR
 
Numbîs
[12]

	)

177 
	#max_cﬁ‹s
 
CUR
 
Numbîs
[13]

	)

178 
	#max_∑ús
 
CUR
 
Numbîs
[14]

	)

179 
	#no_cﬁ‹_video
 
CUR
 
Numbîs
[15]

	)

180 
	#buf„r_ˇ∑côy
 
CUR
 
Numbîs
[16]

	)

181 
	#dŸ_vît_•acög
 
CUR
 
Numbîs
[17]

	)

182 
	#dŸ_h‹z_•acög
 
CUR
 
Numbîs
[18]

	)

183 
	#max_mi¸o_addªss
 
CUR
 
Numbîs
[19]

	)

184 
	#max_mi¸o_jump
 
CUR
 
Numbîs
[20]

	)

185 
	#mi¸o_cﬁ_size
 
CUR
 
Numbîs
[21]

	)

186 
	#mi¸o_löe_size
 
CUR
 
Numbîs
[22]

	)

187 
	#numbî_of_pös
 
CUR
 
Numbîs
[23]

	)

188 
	#ouçut_ªs_ch¨
 
CUR
 
Numbîs
[24]

	)

189 
	#ouçut_ªs_löe
 
CUR
 
Numbîs
[25]

	)

190 
	#ouçut_ªs_h‹z_öch
 
CUR
 
Numbîs
[26]

	)

191 
	#ouçut_ªs_vît_öch
 
CUR
 
Numbîs
[27]

	)

192 
	#¥öt_øã
 
CUR
 
Numbîs
[28]

	)

193 
	#wide_ch¨_size
 
CUR
 
Numbîs
[29]

	)

194 
	#buâ⁄s
 
CUR
 
Numbîs
[30]

	)

195 
	#bô_image_ítwöög
 
CUR
 
Numbîs
[31]

	)

196 
	#bô_image_ty≥
 
CUR
 
Numbîs
[32]

	)

197 
	#back_èb
 
CUR
 
Såögs
[0]

	)

198 
	#bñl
 
CUR
 
Såögs
[1]

	)

199 
	#ˇºüge_ªtu∫
 
CUR
 
Såögs
[2]

	)

200 
	#ch™ge_s¸ﬁl_ªgi⁄
 
CUR
 
Såögs
[3]

	)

201 
	#˛ór_Æl_èbs
 
CUR
 
Såögs
[4]

	)

202 
	#˛ór_s¸ìn
 
CUR
 
Såögs
[5]

	)

203 
	#˛r_eﬁ
 
CUR
 
Såögs
[6]

	)

204 
	#˛r_eos
 
CUR
 
Såögs
[7]

	)

205 
	#cﬁumn_addªss
 
CUR
 
Såögs
[8]

	)

206 
	#comm™d_ch¨a˘î
 
CUR
 
Såögs
[9]

	)

207 
	#curs‹_addªss
 
CUR
 
Såögs
[10]

	)

208 
	#curs‹_down
 
CUR
 
Såögs
[11]

	)

209 
	#curs‹_home
 
CUR
 
Såögs
[12]

	)

210 
	#curs‹_övisibÀ
 
CUR
 
Såögs
[13]

	)

211 
	#curs‹_À·
 
CUR
 
Såögs
[14]

	)

212 
	#curs‹_mem_addªss
 
CUR
 
Såögs
[15]

	)

213 
	#curs‹_n‹mÆ
 
CUR
 
Såögs
[16]

	)

214 
	#curs‹_right
 
CUR
 
Såögs
[17]

	)

215 
	#curs‹_to_Œ
 
CUR
 
Såögs
[18]

	)

216 
	#curs‹_up
 
CUR
 
Såögs
[19]

	)

217 
	#curs‹_visibÀ
 
CUR
 
Såögs
[20]

	)

218 
	#dñëe_ch¨a˘î
 
CUR
 
Såögs
[21]

	)

219 
	#dñëe_löe
 
CUR
 
Såögs
[22]

	)

220 
	#dis_°©us_löe
 
CUR
 
Såögs
[23]

	)

221 
	#down_hÆf_löe
 
CUR
 
Såögs
[24]

	)

222 
	#íãr_Æt_ch¨£t_mode
 
CUR
 
Såögs
[25]

	)

223 
	#íãr_blök_mode
 
CUR
 
Såögs
[26]

	)

224 
	#íãr_bﬁd_mode
 
CUR
 
Såögs
[27]

	)

225 
	#íãr_ˇ_mode
 
CUR
 
Såögs
[28]

	)

226 
	#íãr_dñëe_mode
 
CUR
 
Såögs
[29]

	)

227 
	#íãr_dim_mode
 
CUR
 
Såögs
[30]

	)

228 
	#íãr_ö£π_mode
 
CUR
 
Såögs
[31]

	)

229 
	#íãr_£cuª_mode
 
CUR
 
Såögs
[32]

	)

230 
	#íãr_¥Ÿe˘ed_mode
 
CUR
 
Såögs
[33]

	)

231 
	#íãr_ªvî£_mode
 
CUR
 
Såögs
[34]

	)

232 
	#íãr_°™dout_mode
 
CUR
 
Såögs
[35]

	)

233 
	#íãr_undîlöe_mode
 
CUR
 
Såögs
[36]

	)

234 
	#îa£_ch¨s
 
CUR
 
Såögs
[37]

	)

235 
	#exô_Æt_ch¨£t_mode
 
CUR
 
Såögs
[38]

	)

236 
	#exô_©åibuã_mode
 
CUR
 
Såögs
[39]

	)

237 
	#exô_ˇ_mode
 
CUR
 
Såögs
[40]

	)

238 
	#exô_dñëe_mode
 
CUR
 
Såögs
[41]

	)

239 
	#exô_ö£π_mode
 
CUR
 
Såögs
[42]

	)

240 
	#exô_°™dout_mode
 
CUR
 
Såögs
[43]

	)

241 
	#exô_undîlöe_mode
 
CUR
 
Såögs
[44]

	)

242 
	#Êash_s¸ìn
 
CUR
 
Såögs
[45]

	)

243 
	#f‹m_„ed
 
CUR
 
Såögs
[46]

	)

244 
	#‰om_°©us_löe
 
CUR
 
Såögs
[47]

	)

245 
	#öô_1°rög
 
CUR
 
Såögs
[48]

	)

246 
	#öô_2°rög
 
CUR
 
Såögs
[49]

	)

247 
	#öô_3°rög
 
CUR
 
Såögs
[50]

	)

248 
	#öô_fûe
 
CUR
 
Såögs
[51]

	)

249 
	#ö£π_ch¨a˘î
 
CUR
 
Såögs
[52]

	)

250 
	#ö£π_löe
 
CUR
 
Såögs
[53]

	)

251 
	#ö£π_∑ddög
 
CUR
 
Såögs
[54]

	)

252 
	#key_back•a˚
 
CUR
 
Såögs
[55]

	)

253 
	#key_ˇèb
 
CUR
 
Såögs
[56]

	)

254 
	#key_˛ór
 
CUR
 
Såögs
[57]

	)

255 
	#key_˘ab
 
CUR
 
Såögs
[58]

	)

256 
	#key_dc
 
CUR
 
Såögs
[59]

	)

257 
	#key_dl
 
CUR
 
Såögs
[60]

	)

258 
	#key_down
 
CUR
 
Såögs
[61]

	)

259 
	#key_eic
 
CUR
 
Såögs
[62]

	)

260 
	#key_eﬁ
 
CUR
 
Såögs
[63]

	)

261 
	#key_eos
 
CUR
 
Såögs
[64]

	)

262 
	#key_f0
 
CUR
 
Såögs
[65]

	)

263 
	#key_f1
 
CUR
 
Såögs
[66]

	)

264 
	#key_f10
 
CUR
 
Såögs
[67]

	)

265 
	#key_f2
 
CUR
 
Såögs
[68]

	)

266 
	#key_f3
 
CUR
 
Såögs
[69]

	)

267 
	#key_f4
 
CUR
 
Såögs
[70]

	)

268 
	#key_f5
 
CUR
 
Såögs
[71]

	)

269 
	#key_f6
 
CUR
 
Såögs
[72]

	)

270 
	#key_f7
 
CUR
 
Såögs
[73]

	)

271 
	#key_f8
 
CUR
 
Såögs
[74]

	)

272 
	#key_f9
 
CUR
 
Såögs
[75]

	)

273 
	#key_home
 
CUR
 
Såögs
[76]

	)

274 
	#key_ic
 
CUR
 
Såögs
[77]

	)

275 
	#key_û
 
CUR
 
Såögs
[78]

	)

276 
	#key_À·
 
CUR
 
Såögs
[79]

	)

277 
	#key_Œ
 
CUR
 
Såögs
[80]

	)

278 
	#key_≈age
 
CUR
 
Såögs
[81]

	)

279 
	#key_µage
 
CUR
 
Såögs
[82]

	)

280 
	#key_right
 
CUR
 
Såögs
[83]

	)

281 
	#key_sf
 
CUR
 
Såögs
[84]

	)

282 
	#key_§
 
CUR
 
Såögs
[85]

	)

283 
	#key_°ab
 
CUR
 
Såögs
[86]

	)

284 
	#key_up
 
CUR
 
Såögs
[87]

	)

285 
	#key∑d_loˇl
 
CUR
 
Såögs
[88]

	)

286 
	#key∑d_xmô
 
CUR
 
Såögs
[89]

	)

287 
	#œb_f0
 
CUR
 
Såögs
[90]

	)

288 
	#œb_f1
 
CUR
 
Såögs
[91]

	)

289 
	#œb_f10
 
CUR
 
Såögs
[92]

	)

290 
	#œb_f2
 
CUR
 
Såögs
[93]

	)

291 
	#œb_f3
 
CUR
 
Såögs
[94]

	)

292 
	#œb_f4
 
CUR
 
Såögs
[95]

	)

293 
	#œb_f5
 
CUR
 
Såögs
[96]

	)

294 
	#œb_f6
 
CUR
 
Såögs
[97]

	)

295 
	#œb_f7
 
CUR
 
Såögs
[98]

	)

296 
	#œb_f8
 
CUR
 
Såögs
[99]

	)

297 
	#œb_f9
 
CUR
 
Såögs
[100]

	)

298 
	#mëa_off
 
CUR
 
Såögs
[101]

	)

299 
	#mëa_⁄
 
CUR
 
Såögs
[102]

	)

300 
	#√wlöe
 
CUR
 
Såögs
[103]

	)

301 
	#∑d_ch¨
 
CUR
 
Såögs
[104]

	)

302 
	#∑rm_dch
 
CUR
 
Såögs
[105]

	)

303 
	#∑rm_dñëe_löe
 
CUR
 
Såögs
[106]

	)

304 
	#∑rm_down_curs‹
 
CUR
 
Såögs
[107]

	)

305 
	#∑rm_ich
 
CUR
 
Såögs
[108]

	)

306 
	#∑rm_ödex
 
CUR
 
Såögs
[109]

	)

307 
	#∑rm_ö£π_löe
 
CUR
 
Såögs
[110]

	)

308 
	#∑rm_À·_curs‹
 
CUR
 
Såögs
[111]

	)

309 
	#∑rm_right_curs‹
 
CUR
 
Såögs
[112]

	)

310 
	#∑rm_rödex
 
CUR
 
Såögs
[113]

	)

311 
	#∑rm_up_curs‹
 
CUR
 
Såögs
[114]

	)

312 
	#pkey_key
 
CUR
 
Såögs
[115]

	)

313 
	#pkey_loˇl
 
CUR
 
Såögs
[116]

	)

314 
	#pkey_xmô
 
CUR
 
Såögs
[117]

	)

315 
	#¥öt_s¸ìn
 
CUR
 
Såögs
[118]

	)

316 
	#¥å_off
 
CUR
 
Såögs
[119]

	)

317 
	#¥å_⁄
 
CUR
 
Såögs
[120]

	)

318 
	#ª≥©_ch¨
 
CUR
 
Såögs
[121]

	)

319 
	#ª£t_1°rög
 
CUR
 
Såögs
[122]

	)

320 
	#ª£t_2°rög
 
CUR
 
Såögs
[123]

	)

321 
	#ª£t_3°rög
 
CUR
 
Såögs
[124]

	)

322 
	#ª£t_fûe
 
CUR
 
Såögs
[125]

	)

323 
	#ª°‹e_curs‹
 
CUR
 
Såögs
[126]

	)

324 
	#row_addªss
 
CUR
 
Såögs
[127]

	)

325 
	#ßve_curs‹
 
CUR
 
Såögs
[128]

	)

326 
	#s¸ﬁl_f‹w¨d
 
CUR
 
Såögs
[129]

	)

327 
	#s¸ﬁl_ªvî£
 
CUR
 
Såögs
[130]

	)

328 
	#£t_©åibuãs
 
CUR
 
Såögs
[131]

	)

329 
	#£t_èb
 
CUR
 
Såögs
[132]

	)

330 
	#£t_wödow
 
CUR
 
Såögs
[133]

	)

331 
	#èb
 
CUR
 
Såögs
[134]

	)

332 
	#to_°©us_löe
 
CUR
 
Såögs
[135]

	)

333 
	#undîlöe_ch¨
 
CUR
 
Såögs
[136]

	)

334 
	#up_hÆf_löe
 
CUR
 
Såögs
[137]

	)

335 
	#öô_¥og
 
CUR
 
Såögs
[138]

	)

336 
	#key_a1
 
CUR
 
Såögs
[139]

	)

337 
	#key_a3
 
CUR
 
Såögs
[140]

	)

338 
	#key_b2
 
CUR
 
Såögs
[141]

	)

339 
	#key_c1
 
CUR
 
Såögs
[142]

	)

340 
	#key_c3
 
CUR
 
Såögs
[143]

	)

341 
	#¥å_n⁄
 
CUR
 
Såögs
[144]

	)

342 
	#ch¨_∑ddög
 
CUR
 
Såögs
[145]

	)

343 
	#acs_ch¨s
 
CUR
 
Såögs
[146]

	)

344 
	#∂ab_n‹m
 
CUR
 
Såögs
[147]

	)

345 
	#key_bèb
 
CUR
 
Såögs
[148]

	)

346 
	#íãr_x⁄_mode
 
CUR
 
Såögs
[149]

	)

347 
	#exô_x⁄_mode
 
CUR
 
Såögs
[150]

	)

348 
	#íãr_am_mode
 
CUR
 
Såögs
[151]

	)

349 
	#exô_am_mode
 
CUR
 
Såögs
[152]

	)

350 
	#x⁄_ch¨a˘î
 
CUR
 
Såögs
[153]

	)

351 
	#xoff_ch¨a˘î
 
CUR
 
Såögs
[154]

	)

352 
	#ía_acs
 
CUR
 
Såögs
[155]

	)

353 
	#œbñ_⁄
 
CUR
 
Såögs
[156]

	)

354 
	#œbñ_off
 
CUR
 
Såögs
[157]

	)

355 
	#key_beg
 
CUR
 
Såögs
[158]

	)

356 
	#key_ˇn˚l
 
CUR
 
Såögs
[159]

	)

357 
	#key_˛o£
 
CUR
 
Såögs
[160]

	)

358 
	#key_comm™d
 
CUR
 
Såögs
[161]

	)

359 
	#key_c›y
 
CUR
 
Såögs
[162]

	)

360 
	#key_¸óã
 
CUR
 
Såögs
[163]

	)

361 
	#key_íd
 
CUR
 
Såögs
[164]

	)

362 
	#key_íãr
 
CUR
 
Såögs
[165]

	)

363 
	#key_exô
 
CUR
 
Såögs
[166]

	)

364 
	#key_föd
 
CUR
 
Såögs
[167]

	)

365 
	#key_hñp
 
CUR
 
Såögs
[168]

	)

366 
	#key_m¨k
 
CUR
 
Såögs
[169]

	)

367 
	#key_mesßge
 
CUR
 
Såögs
[170]

	)

368 
	#key_move
 
CUR
 
Såögs
[171]

	)

369 
	#key_√xt
 
CUR
 
Såögs
[172]

	)

370 
	#key_›í
 
CUR
 
Såögs
[173]

	)

371 
	#key_›ti⁄s
 
CUR
 
Såögs
[174]

	)

372 
	#key_¥evious
 
CUR
 
Såögs
[175]

	)

373 
	#key_¥öt
 
CUR
 
Såögs
[176]

	)

374 
	#key_ªdo
 
CUR
 
Såögs
[177]

	)

375 
	#key_ª„ªn˚
 
CUR
 
Såögs
[178]

	)

376 
	#key_ª‰esh
 
CUR
 
Såögs
[179]

	)

377 
	#key_ª∂a˚
 
CUR
 
Såögs
[180]

	)

378 
	#key_ª°¨t
 
CUR
 
Såögs
[181]

	)

379 
	#key_ªsume
 
CUR
 
Såögs
[182]

	)

380 
	#key_ßve
 
CUR
 
Såögs
[183]

	)

381 
	#key_su•íd
 
CUR
 
Såögs
[184]

	)

382 
	#key_undo
 
CUR
 
Såögs
[185]

	)

383 
	#key_sbeg
 
CUR
 
Såögs
[186]

	)

384 
	#key_sˇn˚l
 
CUR
 
Såögs
[187]

	)

385 
	#key_scomm™d
 
CUR
 
Såögs
[188]

	)

386 
	#key_sc›y
 
CUR
 
Såögs
[189]

	)

387 
	#key_s¸óã
 
CUR
 
Såögs
[190]

	)

388 
	#key_sdc
 
CUR
 
Såögs
[191]

	)

389 
	#key_sdl
 
CUR
 
Såögs
[192]

	)

390 
	#key_£À˘
 
CUR
 
Såögs
[193]

	)

391 
	#key_£nd
 
CUR
 
Såögs
[194]

	)

392 
	#key_£ﬁ
 
CUR
 
Såögs
[195]

	)

393 
	#key_£xô
 
CUR
 
Såögs
[196]

	)

394 
	#key_sföd
 
CUR
 
Såögs
[197]

	)

395 
	#key_shñp
 
CUR
 
Såögs
[198]

	)

396 
	#key_shome
 
CUR
 
Såögs
[199]

	)

397 
	#key_sic
 
CUR
 
Såögs
[200]

	)

398 
	#key_¶e·
 
CUR
 
Såögs
[201]

	)

399 
	#key_smesßge
 
CUR
 
Såögs
[202]

	)

400 
	#key_smove
 
CUR
 
Såögs
[203]

	)

401 
	#key_¢ext
 
CUR
 
Såögs
[204]

	)

402 
	#key_s›ti⁄s
 
CUR
 
Såögs
[205]

	)

403 
	#key_•ªvious
 
CUR
 
Såögs
[206]

	)

404 
	#key_•röt
 
CUR
 
Såögs
[207]

	)

405 
	#key_§edo
 
CUR
 
Såögs
[208]

	)

406 
	#key_§ïœ˚
 
CUR
 
Såögs
[209]

	)

407 
	#key_§ight
 
CUR
 
Såögs
[210]

	)

408 
	#key_§sume
 
CUR
 
Såögs
[211]

	)

409 
	#key_sßve
 
CUR
 
Såögs
[212]

	)

410 
	#key_ssu•íd
 
CUR
 
Såögs
[213]

	)

411 
	#key_sundo
 
CUR
 
Såögs
[214]

	)

412 
	#ªq_f‹_öput
 
CUR
 
Såögs
[215]

	)

413 
	#key_f11
 
CUR
 
Såögs
[216]

	)

414 
	#key_f12
 
CUR
 
Såögs
[217]

	)

415 
	#key_f13
 
CUR
 
Såögs
[218]

	)

416 
	#key_f14
 
CUR
 
Såögs
[219]

	)

417 
	#key_f15
 
CUR
 
Såögs
[220]

	)

418 
	#key_f16
 
CUR
 
Såögs
[221]

	)

419 
	#key_f17
 
CUR
 
Såögs
[222]

	)

420 
	#key_f18
 
CUR
 
Såögs
[223]

	)

421 
	#key_f19
 
CUR
 
Såögs
[224]

	)

422 
	#key_f20
 
CUR
 
Såögs
[225]

	)

423 
	#key_f21
 
CUR
 
Såögs
[226]

	)

424 
	#key_f22
 
CUR
 
Såögs
[227]

	)

425 
	#key_f23
 
CUR
 
Såögs
[228]

	)

426 
	#key_f24
 
CUR
 
Såögs
[229]

	)

427 
	#key_f25
 
CUR
 
Såögs
[230]

	)

428 
	#key_f26
 
CUR
 
Såögs
[231]

	)

429 
	#key_f27
 
CUR
 
Såögs
[232]

	)

430 
	#key_f28
 
CUR
 
Såögs
[233]

	)

431 
	#key_f29
 
CUR
 
Såögs
[234]

	)

432 
	#key_f30
 
CUR
 
Såögs
[235]

	)

433 
	#key_f31
 
CUR
 
Såögs
[236]

	)

434 
	#key_f32
 
CUR
 
Såögs
[237]

	)

435 
	#key_f33
 
CUR
 
Såögs
[238]

	)

436 
	#key_f34
 
CUR
 
Såögs
[239]

	)

437 
	#key_f35
 
CUR
 
Såögs
[240]

	)

438 
	#key_f36
 
CUR
 
Såögs
[241]

	)

439 
	#key_f37
 
CUR
 
Såögs
[242]

	)

440 
	#key_f38
 
CUR
 
Såögs
[243]

	)

441 
	#key_f39
 
CUR
 
Såögs
[244]

	)

442 
	#key_f40
 
CUR
 
Såögs
[245]

	)

443 
	#key_f41
 
CUR
 
Såögs
[246]

	)

444 
	#key_f42
 
CUR
 
Såögs
[247]

	)

445 
	#key_f43
 
CUR
 
Såögs
[248]

	)

446 
	#key_f44
 
CUR
 
Såögs
[249]

	)

447 
	#key_f45
 
CUR
 
Såögs
[250]

	)

448 
	#key_f46
 
CUR
 
Såögs
[251]

	)

449 
	#key_f47
 
CUR
 
Såögs
[252]

	)

450 
	#key_f48
 
CUR
 
Såögs
[253]

	)

451 
	#key_f49
 
CUR
 
Såögs
[254]

	)

452 
	#key_f50
 
CUR
 
Såögs
[255]

	)

453 
	#key_f51
 
CUR
 
Såögs
[256]

	)

454 
	#key_f52
 
CUR
 
Såögs
[257]

	)

455 
	#key_f53
 
CUR
 
Såögs
[258]

	)

456 
	#key_f54
 
CUR
 
Såögs
[259]

	)

457 
	#key_f55
 
CUR
 
Såögs
[260]

	)

458 
	#key_f56
 
CUR
 
Såögs
[261]

	)

459 
	#key_f57
 
CUR
 
Såögs
[262]

	)

460 
	#key_f58
 
CUR
 
Såögs
[263]

	)

461 
	#key_f59
 
CUR
 
Såögs
[264]

	)

462 
	#key_f60
 
CUR
 
Såögs
[265]

	)

463 
	#key_f61
 
CUR
 
Såögs
[266]

	)

464 
	#key_f62
 
CUR
 
Såögs
[267]

	)

465 
	#key_f63
 
CUR
 
Såögs
[268]

	)

466 
	#˛r_bﬁ
 
CUR
 
Såögs
[269]

	)

467 
	#˛ór_m¨gös
 
CUR
 
Såögs
[270]

	)

468 
	#£t_À·_m¨gö
 
CUR
 
Såögs
[271]

	)

469 
	#£t_right_m¨gö
 
CUR
 
Såögs
[272]

	)

470 
	#œbñ_f‹m©
 
CUR
 
Såögs
[273]

	)

471 
	#£t_˛ock
 
CUR
 
Såögs
[274]

	)

472 
	#di•œy_˛ock
 
CUR
 
Såögs
[275]

	)

473 
	#ªmove_˛ock
 
CUR
 
Såögs
[276]

	)

474 
	#¸óã_wödow
 
CUR
 
Såögs
[277]

	)

475 
	#gŸo_wödow
 
CUR
 
Såögs
[278]

	)

476 
	#h™gup
 
CUR
 
Såögs
[279]

	)

477 
	#dül_ph⁄e
 
CUR
 
Såögs
[280]

	)

478 
	#quick_dül
 
CUR
 
Såögs
[281]

	)

479 
	#t⁄e
 
CUR
 
Såögs
[282]

	)

480 
	#pul£
 
CUR
 
Såögs
[283]

	)

481 
	#Êash_hook
 
CUR
 
Såögs
[284]

	)

482 
	#fixed_∑u£
 
CUR
 
Såögs
[285]

	)

483 
	#waô_t⁄e
 
CUR
 
Såögs
[286]

	)

484 
	#u£r0
 
CUR
 
Såögs
[287]

	)

485 
	#u£r1
 
CUR
 
Såögs
[288]

	)

486 
	#u£r2
 
CUR
 
Såögs
[289]

	)

487 
	#u£r3
 
CUR
 
Såögs
[290]

	)

488 
	#u£r4
 
CUR
 
Såögs
[291]

	)

489 
	#u£r5
 
CUR
 
Såögs
[292]

	)

490 
	#u£r6
 
CUR
 
Såögs
[293]

	)

491 
	#u£r7
 
CUR
 
Såögs
[294]

	)

492 
	#u£r8
 
CUR
 
Såögs
[295]

	)

493 
	#u£r9
 
CUR
 
Såögs
[296]

	)

494 
	#‹ig_∑ú
 
CUR
 
Såögs
[297]

	)

495 
	#‹ig_cﬁ‹s
 
CUR
 
Såögs
[298]

	)

496 
	#öôülize_cﬁ‹
 
CUR
 
Såögs
[299]

	)

497 
	#öôülize_∑ú
 
CUR
 
Såögs
[300]

	)

498 
	#£t_cﬁ‹_∑ú
 
CUR
 
Såögs
[301]

	)

499 
	#£t_f‹eground
 
CUR
 
Såögs
[302]

	)

500 
	#£t_background
 
CUR
 
Såögs
[303]

	)

501 
	#ch™ge_ch¨_pôch
 
CUR
 
Såögs
[304]

	)

502 
	#ch™ge_löe_pôch
 
CUR
 
Såögs
[305]

	)

503 
	#ch™ge_ªs_h‹z
 
CUR
 
Såögs
[306]

	)

504 
	#ch™ge_ªs_vît
 
CUR
 
Såögs
[307]

	)

505 
	#deföe_ch¨
 
CUR
 
Såögs
[308]

	)

506 
	#íãr_doubÀwide_mode
 
CUR
 
Såögs
[309]

	)

507 
	#íãr_dø·_quÆôy
 
CUR
 
Såögs
[310]

	)

508 
	#íãr_ôÆics_mode
 
CUR
 
Såögs
[311]

	)

509 
	#íãr_À·w¨d_mode
 
CUR
 
Såögs
[312]

	)

510 
	#íãr_mi¸o_mode
 
CUR
 
Såögs
[313]

	)

511 
	#íãr_√¨_Àâî_quÆôy
 
CUR
 
Såögs
[314]

	)

512 
	#íãr_n‹mÆ_quÆôy
 
CUR
 
Såögs
[315]

	)

513 
	#íãr_shadow_mode
 
CUR
 
Såögs
[316]

	)

514 
	#íãr_subs¸ùt_mode
 
CUR
 
Såögs
[317]

	)

515 
	#íãr_su≥rs¸ùt_mode
 
CUR
 
Såögs
[318]

	)

516 
	#íãr_upw¨d_mode
 
CUR
 
Såögs
[319]

	)

517 
	#exô_doubÀwide_mode
 
CUR
 
Såögs
[320]

	)

518 
	#exô_ôÆics_mode
 
CUR
 
Såögs
[321]

	)

519 
	#exô_À·w¨d_mode
 
CUR
 
Såögs
[322]

	)

520 
	#exô_mi¸o_mode
 
CUR
 
Såögs
[323]

	)

521 
	#exô_shadow_mode
 
CUR
 
Såögs
[324]

	)

522 
	#exô_subs¸ùt_mode
 
CUR
 
Såögs
[325]

	)

523 
	#exô_su≥rs¸ùt_mode
 
CUR
 
Såögs
[326]

	)

524 
	#exô_upw¨d_mode
 
CUR
 
Såögs
[327]

	)

525 
	#mi¸o_cﬁumn_addªss
 
CUR
 
Såögs
[328]

	)

526 
	#mi¸o_down
 
CUR
 
Såögs
[329]

	)

527 
	#mi¸o_À·
 
CUR
 
Såögs
[330]

	)

528 
	#mi¸o_right
 
CUR
 
Såögs
[331]

	)

529 
	#mi¸o_row_addªss
 
CUR
 
Såögs
[332]

	)

530 
	#mi¸o_up
 
CUR
 
Såögs
[333]

	)

531 
	#‹dî_of_pös
 
CUR
 
Såögs
[334]

	)

532 
	#∑rm_down_mi¸o
 
CUR
 
Såögs
[335]

	)

533 
	#∑rm_À·_mi¸o
 
CUR
 
Såögs
[336]

	)

534 
	#∑rm_right_mi¸o
 
CUR
 
Såögs
[337]

	)

535 
	#∑rm_up_mi¸o
 
CUR
 
Såögs
[338]

	)

536 
	#£À˘_ch¨_£t
 
CUR
 
Såögs
[339]

	)

537 
	#£t_bŸtom_m¨gö
 
CUR
 
Såögs
[340]

	)

538 
	#£t_bŸtom_m¨gö_∑rm
 
CUR
 
Såögs
[341]

	)

539 
	#£t_À·_m¨gö_∑rm
 
CUR
 
Såögs
[342]

	)

540 
	#£t_right_m¨gö_∑rm
 
CUR
 
Såögs
[343]

	)

541 
	#£t_t›_m¨gö
 
CUR
 
Såögs
[344]

	)

542 
	#£t_t›_m¨gö_∑rm
 
CUR
 
Såögs
[345]

	)

543 
	#°¨t_bô_image
 
CUR
 
Såögs
[346]

	)

544 
	#°¨t_ch¨_£t_def
 
CUR
 
Såögs
[347]

	)

545 
	#°›_bô_image
 
CUR
 
Såögs
[348]

	)

546 
	#°›_ch¨_£t_def
 
CUR
 
Såögs
[349]

	)

547 
	#subs¸ùt_ch¨a˘îs
 
CUR
 
Såögs
[350]

	)

548 
	#su≥rs¸ùt_ch¨a˘îs
 
CUR
 
Såögs
[351]

	)

549 
	#the£_ˇu£_¸
 
CUR
 
Såögs
[352]

	)

550 
	#zîo_mŸi⁄
 
CUR
 
Såögs
[353]

	)

551 
	#ch¨_£t_«mes
 
CUR
 
Såögs
[354]

	)

552 
	#key_mou£
 
CUR
 
Såögs
[355]

	)

553 
	#mou£_öfo
 
CUR
 
Såögs
[356]

	)

554 
	#ªq_mou£_pos
 
CUR
 
Såögs
[357]

	)

555 
	#gë_mou£
 
CUR
 
Såögs
[358]

	)

556 
	#£t_a_f‹eground
 
CUR
 
Såögs
[359]

	)

557 
	#£t_a_background
 
CUR
 
Såögs
[360]

	)

558 
	#pkey_∂ab
 
CUR
 
Såögs
[361]

	)

559 
	#devi˚_ty≥
 
CUR
 
Såögs
[362]

	)

560 
	#code_£t_öô
 
CUR
 
Såögs
[363]

	)

561 
	#£t0_des_£q
 
CUR
 
Såögs
[364]

	)

562 
	#£t1_des_£q
 
CUR
 
Såögs
[365]

	)

563 
	#£t2_des_£q
 
CUR
 
Såögs
[366]

	)

564 
	#£t3_des_£q
 
CUR
 
Såögs
[367]

	)

565 
	#£t_Ã_m¨gö
 
CUR
 
Såögs
[368]

	)

566 
	#£t_tb_m¨gö
 
CUR
 
Såögs
[369]

	)

567 
	#bô_image_ª≥©
 
CUR
 
Såögs
[370]

	)

568 
	#bô_image_√wlöe
 
CUR
 
Såögs
[371]

	)

569 
	#bô_image_ˇºüge_ªtu∫
 
CUR
 
Såögs
[372]

	)

570 
	#cﬁ‹_«mes
 
CUR
 
Såögs
[373]

	)

571 
	#deföe_bô_image_ªgi⁄
 
CUR
 
Såögs
[374]

	)

572 
	#íd_bô_image_ªgi⁄
 
CUR
 
Såögs
[375]

	)

573 
	#£t_cﬁ‹_b™d
 
CUR
 
Såögs
[376]

	)

574 
	#£t_∑ge_Àngth
 
CUR
 
Såögs
[377]

	)

575 
	#di•œy_pc_ch¨
 
CUR
 
Såögs
[378]

	)

576 
	#íãr_pc_ch¨£t_mode
 
CUR
 
Såögs
[379]

	)

577 
	#exô_pc_ch¨£t_mode
 
CUR
 
Såögs
[380]

	)

578 
	#íãr_sˇncode_mode
 
CUR
 
Såögs
[381]

	)

579 
	#exô_sˇncode_mode
 
CUR
 
Såögs
[382]

	)

580 
	#pc_ãrm_›ti⁄s
 
CUR
 
Såögs
[383]

	)

581 
	#sˇncode_esˇ≥
 
CUR
 
Såögs
[384]

	)

582 
	#Æt_sˇncode_esc
 
CUR
 
Såögs
[385]

	)

583 
	#íãr_h‹iz⁄èl_hl_mode
 
CUR
 
Såögs
[386]

	)

584 
	#íãr_À·_hl_mode
 
CUR
 
Såögs
[387]

	)

585 
	#íãr_low_hl_mode
 
CUR
 
Såögs
[388]

	)

586 
	#íãr_right_hl_mode
 
CUR
 
Såögs
[389]

	)

587 
	#íãr_t›_hl_mode
 
CUR
 
Såögs
[390]

	)

588 
	#íãr_vîtiˇl_hl_mode
 
CUR
 
Såögs
[391]

	)

589 
	#£t_a_©åibuãs
 
CUR
 
Såögs
[392]

	)

590 
	#£t_pgÀn_öch
 
CUR
 
Såögs
[393]

	)

592 
	#BOOLWRITE
 37

	)

593 
	#NUMWRITE
 33

	)

594 
	#STRWRITE
 394

	)

597 
	#bìhive_glôch
 
no_esc_˘lc


	)

598 
	#ãÀøy_glôch
 
de°_èbs_magic_smso


	)

599 
	#mi¸o_ch¨_size
 
mi¸o_cﬁ_size


	)

601 #ifde‡
__INTERNAL_CAPS_VISIBLE


602 
	#ãrmˇp_öô2
 
CUR
 
Såögs
[394]

	)

603 
	#ãrmˇp_ª£t
 
CUR
 
Såögs
[395]

	)

604 
	#magic_cookõ_glôch_ul
 
CUR
 
Numbîs
[33]

	)

605 
	#back•a˚s_wôh_bs
 
CUR
 
Boﬁóns
[37]

	)

606 
	#¸t_no_s¸ﬁlög
 
CUR
 
Boﬁóns
[38]

	)

607 
	#no_c‹ª˘ly_w‹kög_¸
 
CUR
 
Boﬁóns
[39]

	)

608 
	#ˇºüge_ªtu∫_dñay
 
CUR
 
Numbîs
[34]

	)

609 
	#√w_löe_dñay
 
CUR
 
Numbîs
[35]

	)

610 
	#löe„ed_if_nŸ_lf
 
CUR
 
Såögs
[396]

	)

611 
	#back•a˚_if_nŸ_bs
 
CUR
 
Såögs
[397]

	)

612 
	#gnu_has_mëa_key
 
CUR
 
Boﬁóns
[40]

	)

613 
	#löe„ed_is_√wlöe
 
CUR
 
Boﬁóns
[41]

	)

614 
	#back•a˚_dñay
 
CUR
 
Numbîs
[36]

	)

615 
	#h‹iz⁄èl_èb_dñay
 
CUR
 
Numbîs
[37]

	)

616 
	#numbî_of_fun˘i⁄_keys
 
CUR
 
Numbîs
[38]

	)

617 
	#Ÿhî_n⁄_fun˘i⁄_keys
 
CUR
 
Såögs
[398]

	)

618 
	#¨row_key_m≠
 
CUR
 
Såögs
[399]

	)

619 
	#has_h¨dw¨e_èbs
 
CUR
 
Boﬁóns
[42]

	)

620 
	#ªtu∫_d€s_˛r_eﬁ
 
CUR
 
Boﬁóns
[43]

	)

621 
	#acs_ulc‹√r
 
CUR
 
Såögs
[400]

	)

622 
	#acs_Œc‹√r
 
CUR
 
Såögs
[401]

	)

623 
	#acs_urc‹√r
 
CUR
 
Såögs
[402]

	)

624 
	#acs_Ãc‹√r
 
CUR
 
Såögs
[403]

	)

625 
	#acs_…ì
 
CUR
 
Såögs
[404]

	)

626 
	#acs_πì
 
CUR
 
Såögs
[405]

	)

627 
	#acs_bãe
 
CUR
 
Såögs
[406]

	)

628 
	#acs_âì
 
CUR
 
Såögs
[407]

	)

629 
	#acs_hlöe
 
CUR
 
Såögs
[408]

	)

630 
	#acs_vlöe
 
CUR
 
Såögs
[409]

	)

631 
	#acs_∂us
 
CUR
 
Såögs
[410]

	)

632 
	#mem‹y_lock
 
CUR
 
Såögs
[411]

	)

633 
	#mem‹y_u∆ock
 
CUR
 
Såögs
[412]

	)

634 
	#box_ch¨s_1
 
CUR
 
Såögs
[413]

	)

641 
	#BOOLCOUNT
 44

	)

642 
	#NUMCOUNT
 39

	)

643 
	#STRCOUNT
 414

	)

646 
	#acs_ch¨s_ödex
 146

	)

648 
	sãrmty≥
 {

649 *
ãrm_«mes
;

650 *
°r_èbÀ
;

651 
NCURSES_SBOOL
 *
Boﬁóns
;

652 *
Numbîs
;

653 **
Såögs
;

655 #i‡
NCURSES_XNAMES


656 *
ext_°r_èbÀ
;

657 **
ext_Names
;

659 
num_Boﬁóns
;

660 
num_Numbîs
;

661 
num_Såögs
;

663 
ext_Boﬁóns
;

664 
ext_Numbîs
;

665 
ext_Såögs
;

668 } 
	tTERMTYPE
;

670 
	sãrm
 {

671 
TERMTYPE
 
ty≥
;

672 
Fûedes
;

673 
TTY
 
Oâyb
,

674 
Nâyb
;

675 
_baudøã
;

676 * 
_ãrm«me
;

677 } 
	tTERMINAL
;

680 
NCURSES_EXPORT_VAR
(
TERMINAL
 *Ë
cur_ãrm
;

682 
NCURSES_WRAPPED_VAR
(
TERMINAL
 *, 
cur_ãrm
);

683 
	#cur_ãrm
 
	`NCURSES_PUBLIC_VAR
(
	`cur_ãrm
())

	)

685 
NCURSES_EXPORT_VAR
(
TERMINAL
 *Ë
cur_ãrm
;

689 
NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
boﬁ«mes
);

690 
NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
boﬁcodes
);

691 
NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
boﬁ‚ames
);

692 
NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
num«mes
);

693 
NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
numcodes
);

694 
NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
num‚ames
);

695 
NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
°∫ames
);

696 
NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
°rcodes
);

697 
NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
°r‚ames
);

699 
	#boﬁ«mes
 
	`NCURSES_PUBLIC_VAR
(
	`boﬁ«mes
())

	)

700 
	#boﬁcodes
 
	`NCURSES_PUBLIC_VAR
(
	`boﬁcodes
())

	)

701 
	#boﬁ‚ames
 
	`NCURSES_PUBLIC_VAR
(
	`boﬁ‚ames
())

	)

702 
	#num«mes
 
	`NCURSES_PUBLIC_VAR
(
	`num«mes
())

	)

703 
	#numcodes
 
	`NCURSES_PUBLIC_VAR
(
	`numcodes
())

	)

704 
	#num‚ames
 
	`NCURSES_PUBLIC_VAR
(
	`num‚ames
())

	)

705 
	#°∫ames
 
	`NCURSES_PUBLIC_VAR
(
	`°∫ames
())

	)

706 
	#°rcodes
 
	`NCURSES_PUBLIC_VAR
(
	`°rcodes
())

	)

707 
	#°r‚ames
 
	`NCURSES_PUBLIC_VAR
(
	`°r‚ames
())

	)

711 
NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
boﬁ«mes
[];

712 
NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
boﬁcodes
[];

713 
NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
boﬁ‚ames
[];

714 
NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
num«mes
[];

715 
NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
numcodes
[];

716 
NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
num‚ames
[];

717 
NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
°∫ames
[];

718 
NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
°rcodes
[];

719 
NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
°r‚ames
[];

724 
NCURSES_EXPORT
(Ë
_nc_£t_ây_mode
 (
TTY
 *
buf
);

725 
NCURSES_EXPORT
(Ë
_nc_gë_ây_mode
 (
TTY
 *
buf
);

726 
NCURSES_EXPORT
(Ë
_nc_ªad_íåy
 (c⁄° * c⁄°, * c⁄°, 
TERMTYPE
 *const);

727 
NCURSES_EXPORT
(Ë
_nc_ªad_fûe_íåy
 (c⁄° *c⁄°, 
TERMTYPE
 *);

728 
NCURSES_EXPORT
(Ë
_nc_öô_ãrmty≥
 (
TERMTYPE
 *const);

729 
NCURSES_EXPORT
(Ë
_nc_ªad_ãrmty≥
 (
TERMTYPE
 *, *, );

730 
NCURSES_EXPORT
(*Ë
_nc_fú°_«me
 (const *const);

731 
NCURSES_EXPORT
(Ë
_nc_«me_m©ch
 (const *const, const *const, const *const);

732 
NCURSES_EXPORT
(c⁄° 
TERMTYPE
 *Ë
_nc_ÁŒback
 (const *);

735 
NCURSES_EXPORT
(
TERMINAL
 *Ë
£t_cuπîm
 (TERMINAL *);

736 
NCURSES_EXPORT
(Ë
dñ_cuπîm
 (
TERMINAL
 *);

739 
NCURSES_EXPORT
(Ë
ª°¨âîm
 (
NCURSES_CONST
 *, , *);

740 
NCURSES_EXPORT
(Ë
£tu±îm
 (
NCURSES_CONST
 *,,*);

743 #i‡!
deföed
(
__NCURSES_H
)

744 
NCURSES_EXPORT
(*Ë
tigë°r
 (
NCURSES_CONST
 *);

745 
NCURSES_EXPORT_VAR
(Ë
âyty≥
[];

746 
NCURSES_EXPORT
(Ë
puç
 (const *);

747 
NCURSES_EXPORT
(Ë
tigëÊag
 (
NCURSES_CONST
 *);

748 
NCURSES_EXPORT
(Ë
tigënum
 (
NCURSES_CONST
 *);

751 
NCURSES_EXPORT
(*Ë
ç¨m
 (
NCURSES_CONST
 *, ...);

753 
NCURSES_EXPORT
(*Ë
ç¨m
 (
NCURSES_CONST
 *, ,,,,,,,,);

754 
NCURSES_EXPORT
(*Ë
ç¨m_v¨¨gs
 (
NCURSES_CONST
 *, ...);

757 
NCURSES_EXPORT
(*Ë
tù¨m
 (const *, ...);

762 #i‡!
deföed
(
NCURSES_TERMCAP_H_ö˛
)

763 
NCURSES_EXPORT
(*Ë
tgë°r
 (
NCURSES_CONST
 *, **);

764 
NCURSES_EXPORT
(*Ë
tgŸo
 (const *, , );

765 
NCURSES_EXPORT
(Ë
tgëít
 (*, const *);

766 
NCURSES_EXPORT
(Ë
tgëÊag
 (
NCURSES_CONST
 *);

767 
NCURSES_EXPORT
(Ë
tgënum
 (
NCURSES_CONST
 *);

768 
NCURSES_EXPORT
(Ë
çuts
 (const *, , (*)());

774 #i‡
deföed
(
NCURSES_SP_FUNCS
) && (NCURSES_SP_FUNCS != 0)

776 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
tigë°r
Ë(
SCREEN
*, 
NCURSES_CONST
 *);

777 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
puç
Ë(
SCREEN
*, const *);

778 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
tigëÊag
Ë(
SCREEN
*, 
NCURSES_CONST
 *);

779 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
tigënum
Ë(
SCREEN
*, 
NCURSES_CONST
 *);

782 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
ç¨m
Ë(
SCREEN
*, 
NCURSES_CONST
 *, ...);

784 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
ç¨m
Ë(
SCREEN
*, 
NCURSES_CONST
 *, ,,,,,,,,);

785 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
ç¨m_v¨¨gs
Ë(
SCREEN
*, 
NCURSES_CONST
 *, ...);

789 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
tgë°r
Ë(
SCREEN
*, 
NCURSES_CONST
 *, **);

790 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
tgŸo
Ë(
SCREEN
*, const *, , );

791 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
tgëít
Ë(
SCREEN
*, *, const *);

792 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
tgëÊag
Ë(
SCREEN
*, 
NCURSES_CONST
 *);

793 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
tgënum
Ë(
SCREEN
*, 
NCURSES_CONST
 *);

794 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
çuts
Ë(
SCREEN
*, c⁄° *, , 
NCURSES_SP_OUTC
);

796 
NCURSES_EXPORT
(
TERMINAL
 *Ë
NCURSES_SP_NAME
(
£t_cuπîm
Ë(
SCREEN
*, TERMINAL *);

797 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
dñ_cuπîm
Ë(
SCREEN
*, 
TERMINAL
 *);

799 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ª°¨âîm
Ë(
SCREEN
*, 
NCURSES_CONST
 *, , *);

802 #ifde‡
__˝lu•lus


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_INLINE_u«lig√d
 1

	)

28 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

29 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

30 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

31 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

32 || 
deföed
 
	g__ßndybridge__
 || deföed 
	g__haswñl__
 \

33 || 
deföed
 
	g__b⁄√Œ__
 || deföed 
	g__sûvîm⁄t__
 \

34 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

35 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

36 || 
deföed
 
	g__amdÁm10__
 || deföed 
	g__bdvî1__
 \

37 || 
deföed
 
	g__bdvî2__
 || deföed 
	g__bdvî3__
 \

38 || 
deföed
 
	g__bdvî4__
 || deföed 
	g__btvî1__
 \

39 || 
deföed
 
	g__btvî2__
)

43 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

44 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

46 #i‚de‡
__STRING_INLINE


47 #i‚de‡
__exã∫_ölöe


48 
	#__STRING_INLINE
 
ölöe


	)

50 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

55 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

56 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

57 | ((c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(
§c
))[
idx
])

	)

66 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

67 
	#mem˝y
(
de°
, 
§c
, 
n
) \

68 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

69 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

70 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

71 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

72 ((
n
) == 0 \

73 ? (
de°
) \

74 : (((
n
) % 4 == 0) \

75 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

76 : (((
n
) % 2 == 0) \

77 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

78 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

80 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

81 
size_t
 
__n
);

83 
__STRING_INLINE
 *

84 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

86 
__d0
, 
__d1
;

87 *
__tmp
 = 
__de°
;

88 
__asm__
 
__vﬁ©ûe__


96 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

97 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

99  
__de°
;

100 
	}
}

102 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

103 
size_t
 
__n
);

105 
__STRING_INLINE
 *

106 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

108 
__d0
, 
__d1
;

109 *
__tmp
 = 
__de°
;

110 
__asm__
 
__vﬁ©ûe__


123 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

124 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

126  
__de°
;

127 
	}
}

129 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

131 
__STRING_INLINE
 *

132 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

134 
__d0
, 
__d1
, 
__d2
;

135 *
__tmp
 = 
__de°
;

136 
__asm__
 
__vﬁ©ûe__


147 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

148 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

149 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

150 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

152  
__de°
;

153 
	}
}

155 
	#_HAVE_STRING_ARCH_memmove
 1

	)

156 #i‚de‡
_FORCE_INLINES


159 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

161 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

162 
	`__asm__
 ("memmove");

164 
__STRING_INLINE
 *

165 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

167 
__d0
, 
__d1
, 
__d2
;

168 *
__tmp
 = 
__de°
;

169 i‡(
__de°
 < 
__§c
)

170 
__asm__
 
__vﬁ©ûe__


173 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

174 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

175 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

176 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

178 
__asm__
 
__vﬁ©ûe__


184 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

185 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

186 : "0" (
__n
), "1" (__¿+ (c⁄° *Ë
__§c
),

187 "2" (
__n
 + (*Ë
__tmp
),

188 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

189  
__de°
;

190 
	}
}

194 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

195 #i‚de‡
_FORCE_INLINES


196 #i‚de‡
__PIC__


198 
__STRING_INLINE
 

199 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

201 
__d0
, 
__d1
, 
__d2
;

202 
__ªs
;

203 
__asm__
 
__vﬁ©ûe__


211 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

212 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

213 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

214 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

216  
__ªs
;

217 
	}
}

222 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

223 
	#_USE_STRING_ARCH_mem£t
 1

	)

224 
	#mem£t
(
s
, 
c
, 
n
) \

225 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

226 ? ((
n
) == 1 \

227 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

228 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

229 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

230 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

231 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

232 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

233 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

234 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

235 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

237 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

238 *((*Ë
__s
Ë(Ë(
c
); \

239 
__s
; })

	)

241 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

242 ({ *
__s
 = (
s
); \

244 
__ui
; \

245 
__usi
; \

246 
__uc
; \

247 } *
__u
 = 
__s
; \

248 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

254 i‡((
n
) == 3 || (n) >= 5) \

255 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

258 
n
) \

261 
__u
->
__ui
 = 
__c
; \

262 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

264 
__u
->
__ui
 = 
__c
; \

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

267 
__u
->
__ui
 = 
__c
; \

268 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

270 
__u
->
__usi
 = (Ë
__c
; \

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

272 
__u
->
__uc
 = (Ë
__c
; \

276 
__u
->
__ui
 = 
__c
; \

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

279 
__u
->
__ui
 = 
__c
; \

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__usi
 = (Ë
__c
; \

289 
__u
->
__ui
 = 
__c
; \

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

292 
__u
->
__ui
 = 
__c
; \

293 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__uc
 = (Ë
__c
; \

302 
__u
->
__ui
 = 
__c
; \

303 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

305 
__u
->
__ui
 = 
__c
; \

306 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

308 
__u
->
__ui
 = 
__c
; \

309 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

311 
__u
->
__ui
 = 
__c
; \

316 
__s
; })

	)

318 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

319 (((
n
) % 4 == 0) \

320 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

321 
n
) \

322 : (((
n
) % 2 == 0) \

323 ? 
	`__mem£t_c˙_by2
 (
s
, \

324 ((Ë((Ë(
c
))) * 0x01010101,\

325 
n
) \

326 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

328 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

329 
size_t
 
__n
);

331 
__STRING_INLINE
 *

332 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

334 *
__tmp
 = 
__s
;

335 
__d0
;

336 #ifde‡
__i686__


337 
__asm__
 
__vﬁ©ûe__


340 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

341 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

342 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

345 
__asm__
 
__vﬁ©ûe__


351 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

352 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

353 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

356  
__s
;

357 
	}
}

359 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

360 
size_t
 
__n
);

362 
__STRING_INLINE
 *

363 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

365 
__d0
, 
__d1
;

366 *
__tmp
 = 
__s
;

367 #ifde‡
__i686__


368 
__asm__
 
__vﬁ©ûe__


372 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

373 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

374 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

377 
__asm__
 
__vﬁ©ûe__


383 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

384 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

385 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

388  
__s
;

389 
	}
}

391 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

392 (((
n
) % 4 == 0) \

393 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

394 : (((
n
) % 2 == 0) \

395 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

396 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

398 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

400 
__STRING_INLINE
 *

401 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

403 *
__tmp
 = 
__s
;

404 
__d0
;

405 
__asm__
 
__vﬁ©ûe__


415 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

416 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

417 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

419  
__s
;

420 
	}
}

422 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

424 
__STRING_INLINE
 *

425 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

427 
__d0
, 
__d1
;

428 *
__tmp
 = 
__s
;

429 
__asm__
 
__vﬁ©ûe__


440 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

441 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

442 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

444  
__s
;

445 
	}
}

449 
	#_HAVE_STRING_ARCH_memchr
 1

	)

450 #i‚de‡
_FORCE_INLINES


451 
__STRING_INLINE
 *

452 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

454 
__d0
;

455 #ifde‡
__i686__


456 
__d1
;

458 *
__ªs
;

459 i‡(
__n
 == 0)

460  
NULL
;

461 #ifde‡
__i686__


462 
__asm__
 
__vﬁ©ûe__


466 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

467 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

468 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

471 
__asm__
 
__vﬁ©ûe__


477 : "=D" (
__ªs
), "=&c" (
__d0
)

478 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

479 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

482  
__ªs
 - 1;

483 
	}
}

486 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

487 #i‚de‡
_FORCE_INLINES


488 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

490 
__STRING_INLINE
 *

491 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

493 
__d0
;

494 #ifde‡
__i686__


495 
__d1
;

497 *
__ªs
;

498 i‡(
__n
 == 0)

499  
NULL
;

500 #ifde‡
__i686__


501 
__asm__
 
__vﬁ©ûe__


507 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

508 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

509 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

512 
__asm__
 
__vﬁ©ûe__


519 : "=D" (
__ªs
), "=&c" (
__d0
)

520 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

521 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

524  
__ªs
;

525 
	}
}

526 #ifde‡
__USE_GNU


527 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

532 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

533 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

535 #i‚de‡
_FORCE_INLINES


536 
__STRING_INLINE
 *

537 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

539 
__d0
;

540 *
__ªs
;

541 
__asm__
 
__vﬁ©ûe__


544 : "=D" (
__ªs
), "=&c" (
__d0
)

545 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

546 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

548  
__ªs
 - 1;

549 
	}
}

550 #ifde‡
__USE_GNU


551 
__STRING_INLINE
 *

552 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

554  
	`__øwmemchr
 (
__s
, 
__c
);

555 
	}
}

561 
	#_HAVE_STRING_ARCH_°æí
 1

	)

562 
	#°æí
(
°r
) \

563 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

564 ? 
	`__buûtö_°æí
 (
°r
) \

565 : 
	`__°æí_g
 (
°r
)))

	)

566 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

568 
__STRING_INLINE
 
size_t


569 
	$__°æí_g
 (c⁄° *
__°r
)

571 
__dummy
;

572 c⁄° *
__tmp
 = 
__°r
;

573 
__asm__
 
__vﬁ©ûe__


579 : "Ù" (
__tmp
), "=&q" (
__dummy
)

580 : "0" (
__°r
),

581 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

583  
__tmp
 - 
__°r
 - 1;

584 
	}
}

588 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

589 
	#°r˝y
(
de°
, 
§c
) \

590 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

591 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

592 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

593 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

594 (c⁄° *Ë(
§c
), \

595 
	`°æí
 (
§c
) + 1)) \

596 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

598 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

599 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

601 
__ui
; \

602 
__usi
; \

603 
__uc
; \

604 
__c
; \

605 } *
__u
 = (*Ë
__de°
; \

606 
§˛í
) \

609 
__u
->
__uc
 = '\0'; \

612 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

615 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

616 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

617 
__u
->
__uc
 = '\0'; \

620 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

623 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

624 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

625 
__u
->
__uc
 = '\0'; \

628 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

629 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

630 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

633 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

635 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

636 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

637 
__u
->
__uc
 = '\0'; \

640 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

641 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

642 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

645 (*Ë
__de°
; }))

	)

647 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

649 
__STRING_INLINE
 *

650 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

652 *
__tmp
 = 
__de°
;

653 
__dummy
;

654 
__asm__
 
__vﬁ©ûe__


663 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

664 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

665 : "0" (
__§c
), "1" (
__tmp
),

666 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

668  
__de°
;

669 
	}
}

672 #ifde‡
__USE_GNU


673 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

675 
	#__°p˝y
(
de°
, 
§c
) \

676 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

677 ? (
	`°æí
 (
§c
) + 1 <= 8 \

678 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

679 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

680 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

681 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

682 ((
§˛í
) % 4 == 0 \

683 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

684 : ((
§˛í
) % 2 == 0 \

685 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

686 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

689 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

691 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

692 (
	`__exãnsi⁄__
 ({ union { \

693 
__ui
; \

694 
__usi
; \

695 
__uc
; \

696 
__c
; \

697 } *
__u
 = (*Ë(
de°
); \

698 
§˛í
) \

701 
__u
->
__uc
 = '\0'; \

704 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

705 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

708 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

709 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

710 
__u
->
__uc
 = '\0'; \

713 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

714 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

717 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

719 
__u
->
__uc
 = '\0'; \

722 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

723 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

724 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

725 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

728 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

729 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

730 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

731 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

732 
__u
->
__uc
 = '\0'; \

735 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

736 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

737 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

738 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

741 (*Ë
__u
; }))

	)

743 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

744 
size_t
 
__§˛í
);

746 
__STRING_INLINE
 *

747 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

749 *
__tmp
 = 
__de°
;

750 
__d0
, 
__d1
;

751 
__asm__
 
__vﬁ©ûe__


759 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

760 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

762  
__tmp
;

763 
	}
}

765 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

766 
size_t
 
__§˛í
);

768 
__STRING_INLINE
 *

769 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

771 *
__tmp
 = 
__de°
;

772 
__d0
, 
__d1
;

773 
__asm__
 
__vﬁ©ûe__


786 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

787 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

788 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

789 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

791  
__tmp
 + 2;

792 
	}
}

794 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

795 
size_t
 
__§˛í
);

797 
__STRING_INLINE
 *

798 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

800 
__d0
, 
__d1
;

801 *
__tmp
 = 
__de°
;

802 
__asm__
 
__vﬁ©ûe__


813 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

814 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

815 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

816 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

818  
__tmp
;

819 
	}
}

821 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

823 
__STRING_INLINE
 *

824 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

826 *
__tmp
 = 
__de°
;

827 
__dummy
;

828 
__asm__
 
__vﬁ©ûe__


837 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

838 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

839 : "0" (
__§c
), "1" (
__tmp
),

840 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

842  
__tmp
 - 1;

843 
	}
}

848 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

849 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

850 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

851 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

852 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

853 (c⁄° *Ë(
§c
), 
n
) \

854 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

855 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

856 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

857 (((
§˛í
) % 4 == 0) \

858 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

859 : (((
§˛í
) % 2 == 0) \

860 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

861 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

863 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

864 
size_t
 
__§˛í
, size_à
__n
);

866 
__STRING_INLINE
 *

867 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

869 *
__tmp
 = 
__de°
;

870 
__dummy1
, 
__dummy2
;

871 
__asm__
 
__vﬁ©ûe__


879 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

880 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

881 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

882 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

884 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

885  
__de°
;

886 
	}
}

888 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

889 
size_t
 
__§˛í
, size_à
__n
);

891 
__STRING_INLINE
 *

892 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

894 *
__tmp
 = 
__de°
;

895 
__dummy1
, 
__dummy2
;

896 
__asm__
 
__vﬁ©ûe__


909 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

910 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

911 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

912 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

914 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

915  
__de°
;

916 
	}
}

918 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

919 
size_t
 
__§˛í
, size_à
__n
);

921 
__STRING_INLINE
 *

922 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

924 
__d0
, 
__d1
;

925 *
__tmp
 = 
__de°
;

926 
__asm__
 
__vﬁ©ûe__


937 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

938 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

939 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

940 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

942 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

943  
__de°
;

944 
	}
}

946 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

947 
size_t
 
__n
);

949 
__STRING_INLINE
 *

950 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

952 *
__tmp
 = 
__de°
;

953 
__dummy
;

954 i‡(
__n
 > 0)

955 
__asm__
 
__vﬁ©ûe__


971 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

972 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

975  
__de°
;

976 
	}
}

980 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

981 
	#°rˇt
(
de°
, 
§c
) \

982 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

983 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

984 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

986 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

987 
size_t
 
__§˛í
);

989 
__STRING_INLINE
 *

990 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

992 #ifde‡
__i686__


993 
__d0
;

994 *
__tmp
;

995 
__asm__
 
__vﬁ©ûe__


997 : "=D" (
__tmp
), "=&c" (
__d0
),

998 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

999 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

1000 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1002 --
__tmp
;

1004 *
__tmp
 = 
__de°
;

1005 
__asm__
 
__vﬁ©ûe__


1011 : "Ù" (
__tmp
),

1012 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1013 : "0" (
__tmp
),

1014 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1017 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1018  
__de°
;

1019 
	}
}

1021 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1023 
__STRING_INLINE
 *

1024 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1026 *
__tmp
 = 
__de°
;

1027 
__dummy
;

1028 
__asm__
 
__vﬁ©ûe__


1041 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1042 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1043 : "1" (
__tmp
), "2" (
__§c
),

1044 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1046  
__de°
;

1047 
	}
}

1051 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1052 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1053 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1054 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1055 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1056 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1057 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1058 (c⁄° *Ë(
§c
), \

1059 (
n
)Ë0, 
__de°
)) \

1060 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1062 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1063 
size_t
 
__n
);

1065 
__STRING_INLINE
 *

1066 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1068 *
__tmp
 = 
__de°
;

1069 
__dummy
;

1070 #ifde‡
__i686__


1071 
__asm__
 
__vﬁ©ûe__


1085 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1086 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1089 --
__tmp
;

1090 
__asm__
 
__vﬁ©ûe__


1107 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1108 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1111  
__de°
;

1112 
	}
}

1116 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1117 
	#°rcmp
(
s1
, 
s2
) \

1118 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1119 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1120 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1121 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1122 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1123 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1124 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1125 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1126 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1127 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1128 (c⁄° *Ë(
s2
), \

1129 
	`°æí
 (
s1
)) \

1130 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s1
))) \

1133 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1134 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1135 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1136 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1137 (c⁄° *Ë(
s2
), \

1138 
	`°æí
 (
s2
)) \

1139 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1140 (c⁄° *Ë(
s2
), \

1141 
	`°æí
 (
s2
))) \

1142 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1144 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1145 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1146 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1148 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1149 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1151 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1152 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1153 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1156 
__ªsu…
; }))

	)

1158 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1159 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1160 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1161 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1163 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1164 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1166 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1167 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1168 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1171 
__ªsu…
; }))

	)

1173 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1174 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1175 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1176 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1178 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1179 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1181 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1182 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1183 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1186 
__ªsu…
; }))

	)

1188 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1190 
__STRING_INLINE
 

1191 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1193 
__ªs
;

1194 
__asm__
 
__vﬁ©ûe__


1210 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1211 : "1" (
__s1
), "2" (
__s2
),

1212 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1213 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1215  
__ªs
;

1216 
	}
}

1220 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1221 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1222 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1223 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1224 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1225 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1226 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1228 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1229 
size_t
 
__n
);

1231 
__STRING_INLINE
 

1232 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1234 
__ªs
;

1235 
__asm__
 
__vﬁ©ûe__


1254 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1255 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1256 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1257 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1259  
__ªs
;

1260 
	}
}

1264 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1265 
	#_USE_STRING_ARCH_°rchr
 1

	)

1266 
	#°rchr
(
s
, 
c
) \

1267 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1268 ? ((
c
) == '\0' \

1269 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1270 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1271 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1273 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1275 
__STRING_INLINE
 *

1276 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1278 
__d0
;

1279 *
__ªs
;

1280 
__asm__
 
__vﬁ©ûe__


1290 : "Ù" (
__ªs
), "=&a" (
__d0
)

1291 : "0" (
__s
), "1" (
__c
),

1292 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1294  
__ªs
;

1295 
	}
}

1297 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1299 
__STRING_INLINE
 *

1300 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1302 
__d0
;

1303 *
__ªs
;

1304 
__asm__
 
__vﬁ©ûe__


1315 : "Ù" (
__ªs
), "=&a" (
__d0
)

1316 : "0" (
__s
), "1" (
__c
),

1317 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1319  
__ªs
;

1320 
	}
}

1324 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1325 
	#__°rch∫ul
(
s
, 
c
) \

1326 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1327 ? ((
c
) == '\0' \

1328 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1329 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1330 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1332 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1334 
__STRING_INLINE
 *

1335 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1337 
__d0
;

1338 *
__ªs
;

1339 
__asm__
 
__vﬁ©ûe__


1349 : "Ù" (
__ªs
), "=&a" (
__d0
)

1350 : "0" (
__s
), "1" (
__c
),

1351 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1353  
__ªs
;

1354 
	}
}

1356 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1358 
__STRING_INLINE
 *

1359 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1361 
__d0
;

1362 *
__ªs
;

1363 
__asm__
 
__vﬁ©ûe__


1374 : "Ù" (
__ªs
), "=&a" (
__d0
)

1375 : "0" (
__s
), "1" (
__c
),

1376 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1378  
__ªs
;

1379 
	}
}

1380 #ifde‡
__USE_GNU


1381 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1387 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1388 
	#ödex
(
s
, 
c
) \

1389 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1390 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1391 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1396 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1397 
	#°ºchr
(
s
, 
c
) \

1398 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1399 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1400 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1402 #ifde‡
__i686__


1403 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1405 
__STRING_INLINE
 *

1406 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1408 
__d0
, 
__d1
;

1409 *
__ªs
;

1410 
__asm__
 
__vﬁ©ûe__


1418 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1419 : "0" (1), "1" (
__s
), "2" (
__c
),

1420 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1422  
__ªs
 - 1;

1423 
	}
}

1425 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1427 
__STRING_INLINE
 *

1428 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1430 
__d0
, 
__d1
;

1431 *
__ªs
;

1432 
__asm__
 
__vﬁ©ûe__


1441 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1442 : "0" (1), "1" (
__s
), "2" (
__c
),

1443 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1445  
__ªs
 - 1;

1446 
	}
}

1448 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1450 
__STRING_INLINE
 *

1451 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1453 
__d0
, 
__d1
;

1454 *
__ªs
;

1455 
__asm__
 
__vﬁ©ûe__


1465 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1466 : "0" (0), "1" (
__s
), "2" (
__c
),

1467 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1469  
__ªs
;

1470 
	}
}

1472 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1474 
__STRING_INLINE
 *

1475 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1477 
__d0
, 
__d1
;

1478 *
__ªs
;

1479 
__asm__
 
__vﬁ©ûe__


1490 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1491 : "0" (0), "1" (
__s
), "2" (
__c
),

1492 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1494  
__ªs
;

1495 
	}
}

1499 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1501 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1502 
	#rödex
(
s
, 
c
) \

1503 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1504 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1505 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1511 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1512 
	#°rc•n
(
s
, 
ªje˘
) \

1513 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1514 ? ((
ªje˘
)[0] == '\0' \

1515 ? 
	`°æí
 (
s
) \

1516 : ((
ªje˘
)[1] == '\0' \

1517 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1518 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1519 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1521 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1523 #i‚de‡
_FORCE_INLINES


1524 
__STRING_INLINE
 
size_t


1525 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1527 
__d0
;

1528 *
__ªs
;

1529 
__asm__
 
__vﬁ©ûe__


1538 : "Ù" (
__ªs
), "=&a" (
__d0
)

1539 : "0" (
__s
), "1" (
__ªje˘
),

1540 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1542  (
__ªs
 - 1Ë- 
__s
;

1543 
	}
}

1546 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1547 
size_t
 
__ªje˘_Àn
);

1549 
__STRING_INLINE
 
size_t


1550 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1552 
__d0
, 
__d1
, 
__d2
;

1553 c⁄° *
__ªs
;

1554 
__asm__
 
__vﬁ©ûe__


1565 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1566 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1568  (
__ªs
 - 1Ë- 
__s
;

1569 
	}
}

1571 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1572 #ifde‡
__PIC__


1574 
__STRING_INLINE
 
size_t


1575 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1577 
__d0
, 
__d1
, 
__d2
;

1578 c⁄° *
__ªs
;

1579 
__asm__
 
__vﬁ©ûe__


1596 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1597 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1599  (
__ªs
 - 1Ë- 
__s
;

1600 
	}
}

1602 
__STRING_INLINE
 
size_t


1603 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1605 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1606 c⁄° *
__ªs
;

1607 
__asm__
 
__vﬁ©ûe__


1621 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1622 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1625  (
__ªs
 - 1Ë- 
__s
;

1626 
	}
}

1632 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1633 
	#°r•n
(
s
, 
ac˚±
) \

1634 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1635 ? ((
ac˚±
)[0] == '\0' \

1636 ? ((Ë(
s
), 0) \

1637 : ((
ac˚±
)[1] == '\0' \

1638 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1639 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1640 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1642 #i‚de‡
_FORCE_INLINES


1643 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1645 
__STRING_INLINE
 
size_t


1646 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1648 
__d0
;

1649 *
__ªs
;

1651 
__asm__
 
__vﬁ©ûe__


1657 : "Ù" (
__ªs
), "=&q" (
__d0
)

1658 : "0" (
__s
), "1" (
__ac˚±
),

1659 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1661  (
__ªs
 - 1Ë- 
__s
;

1662 
	}
}

1665 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1666 
size_t
 
__ac˚±_Àn
);

1668 
__STRING_INLINE
 
size_t


1669 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1671 
__d0
, 
__d1
, 
__d2
;

1672 c⁄° *
__ªs
;

1673 
__asm__
 
__vﬁ©ûe__


1684 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1685 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1688 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1689 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1691  (
__ªs
 - 1Ë- 
__s
;

1692 
	}
}

1694 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1695 #ifde‡
__PIC__


1697 
__STRING_INLINE
 
size_t


1698 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1700 
__d0
, 
__d1
, 
__d2
;

1701 c⁄° *
__ªs
;

1702 
__asm__
 
__vﬁ©ûe__


1718 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1719 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1721  (
__ªs
 - 1Ë- 
__s
;

1722 
	}
}

1724 
__STRING_INLINE
 
size_t


1725 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1727 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1728 c⁄° *
__ªs
;

1729 
__asm__
 
__vﬁ©ûe__


1743 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1744 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1746  (
__ªs
 - 1Ë- 
__s
;

1747 
	}
}

1752 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1753 
	#°Ωbrk
(
s
, 
ac˚±
) \

1754 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1755 ? ((
ac˚±
)[0] == '\0' \

1756 ? ((Ë(
s
), (*) 0) \

1757 : ((
ac˚±
)[1] == '\0' \

1758 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1759 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1760 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1762 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1763 
size_t
 
__ac˚±_Àn
);

1765 
__STRING_INLINE
 *

1766 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1768 
__d0
, 
__d1
, 
__d2
;

1769 *
__ªs
;

1770 
__asm__
 
__vﬁ©ûe__


1785 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1786 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1788  
__ªs
;

1789 
	}
}

1791 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1792 #ifde‡
__PIC__


1794 
__STRING_INLINE
 *

1795 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1797 
__d0
, 
__d1
, 
__d2
;

1798 *
__ªs
;

1799 
__asm__
 
__vﬁ©ûe__


1820 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1821 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1823  
__ªs
;

1824 
	}
}

1826 
__STRING_INLINE
 *

1827 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1829 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1830 *
__ªs
;

1831 
__asm__
 
__vﬁ©ûe__


1850 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1851 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1853  
__ªs
;

1854 
	}
}

1859 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1860 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1861 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1862 ? ((
√edÀ
)[0] == '\0' \

1863 ? (
hay°ack
) \

1864 : ((
√edÀ
)[1] == '\0' \

1865 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1866 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1867 
	`°æí
 (
√edÀ
)))) \

1868 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1872 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1873 c⁄° 
__√edÀ
[],

1874 
size_t
 
__√edÀ_Àn
);

1876 
__STRING_INLINE
 *

1877 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1878 
size_t
 
__√edÀ_Àn
)

1880 
__d0
, 
__d1
, 
__d2
;

1881 *
__ªs
;

1882 
__asm__
 
__vﬁ©ûe__


1895 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1896 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1898  
__ªs
;

1899 
	}
}

1901 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1902 c⁄° *
__√edÀ
);

1903 #ifde‡
__PIC__


1905 
__STRING_INLINE
 *

1906 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1908 
__d0
, 
__d1
, 
__d2
;

1909 *
__ªs
;

1910 
__asm__
 
__vﬁ©ûe__


1929 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1930 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1931 "d" (
__√edÀ
)

1933  
__ªs
;

1934 
	}
}

1936 
__STRING_INLINE
 *

1937 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1939 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1940 *
__ªs
;

1941 
__asm__
 
__vﬁ©ûe__


1958 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1959 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1960 "b" (
__√edÀ
)

1962  
__ªs
;

1963 
	}
}

1969 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1970 #ifde‡
__i686__


1971 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1972 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1973 ? 
	`__buûtö_ffs
 (
w‹d
) \

1974 : ({ 
__˙t
, 
__tmp
; \

1975 
__asm__
 
__vﬁ©ûe__
 \

1978 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1979 : "rm" (
w‹d
), "1" (-1)); \

1980 
__˙t
 + 1; }))

	)

1982 #i‚de‡
ff¶


1983 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1988 #i‚de‡
_FORCE_INLINES


1989 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_INLINE_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_INLINE_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_INLINE_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_INLINE_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_INLINE_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
Ë(- 
	`__°rcmp_cg
 (s2, s1,Ü2))

	)

895 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


896 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

897 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

898 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

899 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

900 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

901 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

902 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

908 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


909 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


910 #i‡
__GNUC_PREREQ
 (3, 2)

911 
	#°rc•n
(
s
, 
ªje˘
) \

912 
__exãnsi⁄__
 \

913 ({ 
__r0
, 
__r1
, 
__r2
; \

914 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

915 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

916 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

917 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

918 ? 
	`°æí
 (
s
) \

919 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

920 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

921 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

922 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

923 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

924 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

925 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

926 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

928 
	#°rc•n
(
s
, 
ªje˘
) \

929 
__exãnsi⁄__
 \

930 ({ 
__r0
, 
__r1
, 
__r2
; \

931 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

932 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

933 ? 
	`°æí
 (
s
) \

934 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

935 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

936 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

937 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

938 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

939 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

940 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

941 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

945 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

946 
__STRING_INLINE
 
size_t


947 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

949 
size_t
 
__ªsu…
 = 0;

950 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

951 ++
__ªsu…
;

952  
__ªsu…
;

953 
	}
}

955 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

956 
__ªje˘2
);

957 
__STRING_INLINE
 
size_t


958 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

960 
size_t
 
__ªsu…
 = 0;

961 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


962 && 
__s
[
__ªsu…
] !
__ªje˘2
)

963 ++
__ªsu…
;

964  
__ªsu…
;

965 
	}
}

967 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

968 
__ªje˘2
, 
__ªje˘3
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

971 
__ªje˘3
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


975 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

976 ++
__ªsu…
;

977  
__ªsu…
;

978 
	}
}

984 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


985 #i‚de‡
_HAVE_STRING_ARCH_°r•n


986 #i‡
__GNUC_PREREQ
 (3, 2)

987 
	#°r•n
(
s
, 
ac˚±
) \

988 
__exãnsi⁄__
 \

989 ({ 
__a0
, 
__a1
, 
__a2
; \

990 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

991 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

992 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

993 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

994 ? ((Ë(
s
), (
size_t
) 0) \

995 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

996 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

997 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

998 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

999 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1000 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1001 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1002 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1004 
	#°r•n
(
s
, 
ac˚±
) \

1005 
__exãnsi⁄__
 \

1006 ({ 
__a0
, 
__a1
, 
__a2
; \

1007 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1008 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1009 ? ((Ë(
s
), (
size_t
) 0) \

1010 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1011 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1012 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1013 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1014 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1015 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1016 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1017 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1021 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1022 
__STRING_INLINE
 
size_t


1023 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1025 
size_t
 
__ªsu…
 = 0;

1027 
__s
[
__ªsu…
] =
__ac˚±
)

1028 ++
__ªsu…
;

1029  
__ªsu…
;

1030 
	}
}

1032 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1033 
__ac˚±2
);

1034 
__STRING_INLINE
 
size_t


1035 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1037 
size_t
 
__ªsu…
 = 0;

1039 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1040 ++
__ªsu…
;

1041  
__ªsu…
;

1042 
	}
}

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1045 
__ac˚±2
, 
__ac˚±3
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1052 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1053 ++
__ªsu…
;

1054  
__ªsu…
;

1055 
	}
}

1060 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1061 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1062 #i‡
__GNUC_PREREQ
 (3, 2)

1063 
	#°Ωbrk
(
s
, 
ac˚±
) \

1064 
__exãnsi⁄__
 \

1065 ({ 
__a0
, 
__a1
, 
__a2
; \

1066 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1067 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1068 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1069 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1070 ? ((Ë(
s
), (*Ë
NULL
) \

1071 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1072 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1073 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1074 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1075 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1076 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1077 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1078 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1080 
	#°Ωbrk
(
s
, 
ac˚±
) \

1081 
__exãnsi⁄__
 \

1082 ({ 
__a0
, 
__a1
, 
__a2
; \

1083 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1084 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1085 ? ((Ë(
s
), (*Ë
NULL
) \

1086 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1087 ? 
	`°rchr
 (
s
, 
__a0
) \

1088 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1089 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1090 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1091 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1092 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1093 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1097 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1098 
__ac˚±2
);

1099 
__STRING_INLINE
 *

1100 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1103 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1104 ++
__s
;

1105  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1106 
	}
}

1108 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1109 
__ac˚±2
, 
__ac˚±3
);

1110 
__STRING_INLINE
 *

1111 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1114 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1115 && *
__s
 !
__ac˚±3
)

1116 ++
__s
;

1117  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1118 
	}
}

1124 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1125 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1126 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1127 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1128 ? (*Ë(
size_t
Ë(
hay°ack
) \

1129 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1130 ? 
	`°rchr
 (
hay°ack
, \

1131 ((c⁄° *Ë(
√edÀ
))[0]) \

1132 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1133 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1137 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1138 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1139 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1140 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1141 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1142 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1143 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1144 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1147 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1148 
__STRING_INLINE
 *

1149 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1151 *
__ªsu…
;

1152 i‡(
__s
 =
NULL
)

1153 
__s
 = *
__√xç
;

1154 *
__s
 =
__£p
)

1155 ++
__s
;

1156 
__ªsu…
 = 
NULL
;

1157 i‡(*
__s
 != '\0')

1159 
__ªsu…
 = 
__s
++;

1160 *
__s
 != '\0')

1161 i‡(*
__s
++ =
__£p
)

1163 
__s
[-1] = '\0';

1167 *
__√xç
 = 
__s
;

1168  
__ªsu…
;

1169 
	}
}

1170 #ifde‡
__USE_POSIX


1171 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1176 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1177 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1179 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1180 
	#__°r£p
(
s
, 
ªje˘
) \

1181 
__exãnsi⁄__
 \

1182 ({ 
__r0
, 
__r1
, 
__r2
; \

1183 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1184 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1185 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1186 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1187 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1188 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1189 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1190 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1191 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1192 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1193 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1194 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1197 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1198 
__STRING_INLINE
 *

1199 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1201 *
__ªtvÆ
 = *
__s
;

1202 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1203 *(*
__s
)++ = '\0';

1204  
__ªtvÆ
;

1205 
	}
}

1207 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1208 
__STRING_INLINE
 *

1209 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1211 *
__ªtvÆ
 = *
__s
;

1212 i‡(
__ªtvÆ
 !
NULL
)

1214 *
__˝
 = 
__ªtvÆ
;

1217 i‡(*
__˝
 == '\0')

1219 
__˝
 = 
NULL
;

1222 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1224 *
__˝
++ = '\0';

1227 ++
__˝
;

1229 *
__s
 = 
__˝
;

1231  
__ªtvÆ
;

1232 
	}
}

1234 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1235 
__ªje˘3
);

1236 
__STRING_INLINE
 *

1237 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1239 *
__ªtvÆ
 = *
__s
;

1240 i‡(
__ªtvÆ
 !
NULL
)

1242 *
__˝
 = 
__ªtvÆ
;

1245 i‡(*
__˝
 == '\0')

1247 
__˝
 = 
NULL
;

1250 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1252 *
__˝
++ = '\0';

1255 ++
__˝
;

1257 *
__s
 = 
__˝
;

1259  
__ªtvÆ
;

1260 
	}
}

1261 #ifde‡
__USE_MISC


1262 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1269 #ifde‡
__USE_MISC


1271 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1272 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1273 
	~<°dlib.h
>

1276 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1278 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1279 
	#__°rdup
(
s
) \

1280 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1281 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1282 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1283 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1284 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1285 i‡(
__ªtvÆ
 !
NULL
) \

1286 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1287 
__ªtvÆ
; 
	}
})) \

1288 : 
	`__°rdup
 (
s
)))

	)

1290 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1291 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1295 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1297 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1298 
__THROW
 
__©åibuã_mÆloc__
;

1299 
	#__°∫dup
(
s
, 
n
) \

1300 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1301 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1302 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1303 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1304 
size_t
 
__n
 = (
n
); \

1305 *
__ªtvÆ
; \

1306 i‡(
__n
 < 
__Àn
) \

1307 
__Àn
 = 
__n
 + 1; \

1308 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1309 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1313 
__Àn
 - 1); \

1315 
__ªtvÆ
; 
	}
})) \

1316 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1318 #ifde‡
__USE_XOPEN2K8


1319 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1325 #i‚de‡
_FORCE_INLINES


1326 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 #i‡!
__GNUC_PREREQ
 (5,0)

23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

27 #i‚de‡
__˝lu•lus


31 #unde‡
mem˝y


32 #unde‡
memmove


33 #unde‡
mem£t


34 #unde‡
°rˇt


35 #unde‡
°r˝y


36 #unde‡
°∫ˇt


37 #unde‡
°∫˝y


38 #ifde‡
__USE_GNU


39 #unde‡
memp˝y


40 #unde‡
°p˝y


42 #ifde‡
__USE_MISC


43 #unde‡
bc›y


44 #unde‡
bzîo


49 
__f‹tify_fun˘i⁄
 *

50 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

51 
size_t
 
__Àn
))

53  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

54 
	}
}

56 
__f‹tify_fun˘i⁄
 *

57 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__f‹tify_fun˘i⁄
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__f‹tify_fun˘i⁄
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

82 #i‡!
	`__GNUC_PREREQ
 (5,0)

83 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

84 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

86 
	`__w¨n_mem£t_zîo_Àn
 ();

87  
__de°
;

90  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

91 
	}
}

93 #ifde‡
__USE_MISC


94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

100 
__f‹tify_fun˘i⁄
 

101 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

103 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

104 
	}
}

107 
__f‹tify_fun˘i⁄
 *

108 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

110  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

111 
	}
}

113 #ifde‡
__USE_GNU


114 
__f‹tify_fun˘i⁄
 *

115 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

117  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

118 
	}
}

122 
__f‹tify_fun˘i⁄
 *

123 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

124 
size_t
 
__Àn
))

126  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

127 
	}
}

130 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

131 
size_t
 
__de°Àn
Ë
__THROW
;

132 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

133 
size_t
 
__n
), 
°≤˝y
);

135 
__f‹tify_fun˘i⁄
 *

136 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

138 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

139 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿> 
	`__bos
 (
__de°
)))

140  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

141  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

142 
	}
}

145 
__f‹tify_fun˘i⁄
 *

146 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

148  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

149 
	}
}

152 
__f‹tify_fun˘i⁄
 *

153 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

154 
size_t
 
__Àn
))

156  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

157 
	}
}

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 ((
˛ock_t
Ë1000000)

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

81 
	#CLOCK_TAI
 11

	)

84 
	#TIMER_ABSTIME
 1

	)

87 #ifde‡
__USE_GNU


88 
	~<bôs/timex.h
>

90 
__BEGIN_DECLS


93 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

95 
__END_DECLS


101 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


149 #unde‡
_DEFAULT_SOURCE


150 
	#_DEFAULT_SOURCE
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_ISOC11_SOURCE


160 
	#_ISOC11_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_DEFAULT_SOURCE


172 
	#_DEFAULT_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
))

184 #unde‡
_DEFAULT_SOURCE


185 
	#_DEFAULT_SOURCE
 1

	)

189 #i‡(
deföed
 
_ISOC11_SOURCE
 \

190 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

191 
	#__USE_ISOC11
 1

	)

195 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

196 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

197 
	#__USE_ISOC99
 1

	)

201 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

202 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

203 
	#__USE_ISOC95
 1

	)

210 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

211 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

212 
	#__USE_ISOCXX11
 1

	)

218 #ifde‡
_DEFAULT_SOURCE


219 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


220 
	#__USE_POSIX_IMPLICITLY
 1

	)

222 #unde‡
_POSIX_SOURCE


223 
	#_POSIX_SOURCE
 1

	)

224 #unde‡
_POSIX_C_SOURCE


225 
	#_POSIX_C_SOURCE
 200809L

	)

227 #i‡((!
deföed
 
__STRICT_ANSI__
 \

228 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

229 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

230 
	#_POSIX_SOURCE
 1

	)

231 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

232 
	#_POSIX_C_SOURCE
 2

	)

233 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

234 
	#_POSIX_C_SOURCE
 199506L

	)

235 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

236 
	#_POSIX_C_SOURCE
 200112L

	)

238 
	#_POSIX_C_SOURCE
 200809L

	)

240 
	#__USE_POSIX_IMPLICITLY
 1

	)

243 #i‡(
deföed
 
_POSIX_SOURCE
 \

244 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

245 || 
deföed
 
_XOPEN_SOURCE
)

246 
	#__USE_POSIX
 1

	)

249 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


250 
	#__USE_POSIX2
 1

	)

253 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

254 
	#__USE_POSIX199309
 1

	)

257 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

258 
	#__USE_POSIX199506
 1

	)

261 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

262 
	#__USE_XOPEN2K
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

270 
	#__USE_XOPEN2K8
 1

	)

271 #unde‡
_ATFILE_SOURCE


272 
	#_ATFILE_SOURCE
 1

	)

275 #ifdef 
_XOPEN_SOURCE


276 
	#__USE_XOPEN
 1

	)

277 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

278 
	#__USE_XOPEN_EXTENDED
 1

	)

279 
	#__USE_UNIX98
 1

	)

280 #unde‡
_LARGEFILE_SOURCE


281 
	#_LARGEFILE_SOURCE
 1

	)

282 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

283 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

284 
	#__USE_XOPEN2K8
 1

	)

285 
	#__USE_XOPEN2K8XSI
 1

	)

287 
	#__USE_XOPEN2K
 1

	)

288 
	#__USE_XOPEN2KXSI
 1

	)

289 #unde‡
__USE_ISOC95


290 
	#__USE_ISOC95
 1

	)

291 #unde‡
__USE_ISOC99


292 
	#__USE_ISOC99
 1

	)

295 #ifde‡
_XOPEN_SOURCE_EXTENDED


296 
	#__USE_XOPEN_EXTENDED
 1

	)

301 #ifde‡
_LARGEFILE_SOURCE


302 
	#__USE_LARGEFILE
 1

	)

305 #ifde‡
_LARGEFILE64_SOURCE


306 
	#__USE_LARGEFILE64
 1

	)

309 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

310 
	#__USE_FILE_OFFSET64
 1

	)

313 #i‡
deföed
 
_DEFAULT_SOURCE


314 
	#__USE_MISC
 1

	)

317 #ifdef 
_ATFILE_SOURCE


318 
	#__USE_ATFILE
 1

	)

321 #ifdef 
_GNU_SOURCE


322 
	#__USE_GNU
 1

	)

325 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


326 
	#__USE_REENTRANT
 1

	)

329 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

330 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

331 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
compûög
 
wôh
 
›timiz©i⁄
 (-
O
)

332 #ñi‡!
__GNUC_PREREQ
 (4, 1)

333 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


334 #ñi‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 #i‚de‡
__USE_FORTIFY_LEVEL


341 
	#__USE_FORTIFY_LEVEL
 0

	)

346 
	~<°dc-¥edef.h
>

354 #unde‡
__GNU_LIBRARY__


355 
	#__GNU_LIBRARY__
 6

	)

359 
	#__GLIBC__
 2

	)

360 
	#__GLIBC_MINOR__
 23

	)

362 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

363 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

366 #i‚de‡
__ASSEMBLER__


367 #i‚de‡
_SYS_CDEFS_H


368 
	~<sys/cdefs.h
>

373 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


374 
	#__USE_LARGEFILE
 1

	)

375 
	#__USE_LARGEFILE64
 1

	)

381 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

382 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

383 && 
deföed
 
	g__exã∫_ölöe


384 
	#__USE_EXTERN_INLINES
 1

	)

392 
	~<gnu/°ubs.h
>

	@/usr/include/ncurses_dll.h

30 #i‚de‡
NCURSES_DLL_H_ö˛


31 
	#NCURSES_DLL_H_ö˛
 1

	)

37 #i‡
deföed
(
__MINGW64__
)

38 #ñi‡
deföed
(
__MINGW32__
)

39 #i‡(
__GNUC__
 =4Ë&& (
__GNUC_MINOR__
 == 8)

41 #ifde‡
åa˚


42 #unde‡
åa˚


43 
	#TRACE


	)

53 
	#NCURSES_PUBLIC_VAR
(
«me
Ë
_nc_
##
	)
«me

54 
	#NCURSES_WRAPPED_VAR
(
ty≥
,
«me
Ëty≥ 
	`NCURSES_PUBLIC_VAR
“ame)()

	)

60 #unde‡
NCURSES_DLL


61 
	#NCURSES_STATIC


	)

63 #i‡
deföed
(
__CYGWIN__
Ë|| deföed(
__MINGW32__
)

64 #i‡
deföed
(
NCURSES_DLL
)

65 #i‡
deföed
(
NCURSES_STATIC
)

66 #unde‡
NCURSES_STATIC


69 #unde‡
NCURSES_IMPEXP


70 #unde‡
NCURSES_API


71 #unde‡
NCURSES_EXPORT


72 #unde‡
NCURSES_EXPORT_VAR


73 #i‡
deföed
(
NCURSES_DLL
)

75 
	#NCURSES_IMPEXP
 
	`__de˛•ec
(
dŒexp‹t
)

	)

76 #ñi‡
deföed
(
NCURSES_STATIC
)

78 
	#NCURSES_IMPEXP


	)

81 
	#NCURSES_IMPEXP
 
	`__de˛•ec
(
dŒimp‹t
)

	)

83 
	#NCURSES_API
 
__cde˛


	)

84 
	#NCURSES_EXPORT
(
ty≥
Ë
NCURSES_IMPEXP
Åy≥ 
NCURSES_API


	)

85 
	#NCURSES_EXPORT_VAR
(
ty≥
Ë
NCURSES_IMPEXP
 
	)
ty≥

89 #i‡!
deföed
(
NCURSES_IMPEXP
)

90 
	#NCURSES_IMPEXP


	)

92 #i‡!
deföed
(
NCURSES_API
)

93 
	#NCURSES_API


	)

95 #i‡!
deföed
(
NCURSES_EXPORT
)

96 
	#NCURSES_EXPORT
(
ty≥
Ë
NCURSES_IMPEXP
Åy≥ 
NCURSES_API


	)

98 #i‡!
deföed
(
NCURSES_EXPORT_VAR
)

99 
	#NCURSES_EXPORT_VAR
(
ty≥
Ë
NCURSES_IMPEXP
 
	)
ty≥

	@/usr/include/sgtty.h

18 #i‚def 
_SGTTY_H


19 
	#_SGTTY_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<sys/io˘l.h
>

27 
	gsgâyb
;

29 
__BEGIN_DECLS


32 
	$gây
 (
__fd
, 
sgâyb
 *
__∑øms
Ë
__THROW
;

35 
	$°ty
 (
__fd
, c⁄° 
sgâyb
 *
__∑øms
Ë
__THROW
;

38 
__END_DECLS


	@/usr/include/sys/ioctl.h

18 #i‚def 
_SYS_IOCTL_H


19 
	#_SYS_IOCTL_H
 1

	)

21 
	~<„©uªs.h
>

23 
	g__BEGIN_DECLS


26 
	~<bôs/io˘ls.h
>

29 
	~<bôs/io˘l-ty≥s.h
>

36 
	~<sys/âydeÁu…s.h
>

41 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

43 
__END_DECLS


	@/usr/include/termio.h

5 
	~<ãrmios.h
>

6 
	~<sys/io˘l.h
>

	@/usr/include/termios.h

22 #i‚def 
_TERMIOS_H


23 
	#_TERMIOS_H
 1

	)

25 
	~<„©uªs.h
>

26 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


28 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__pid_t_deföed


30 
__pid_t
 
	tpid_t
;

31 
	#__pid_t_deföed


	)

35 
	g__BEGIN_DECLS


39 
	~<bôs/ãrmios.h
>

41 #ifde‡
__USE_MISC


44 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

48 
•ìd_t
 
	$cfgëo•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

51 
•ìd_t
 
	$cfgëi•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

54 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

57 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

59 #ifdef 
__USE_MISC


61 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

66 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

70 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

71 c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

74 #ifdef 
__USE_MISC


76 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

80 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

86 
	`tcdøö
 (
__fd
);

90 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

94 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

97 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


99 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

103 #ifde‡
__USE_MISC


104 
	~<sys/âydeÁu…s.h
>

107 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/bits/ioctl-types.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	swösize


29 
	mws_row
;

30 
	mws_cﬁ
;

31 
	mws_xpixñ
;

32 
	mws_ypixñ
;

35 
	#NCC
 8

	)

36 
	sãrmio


38 
	mc_iÊag
;

39 
	mc_oÊag
;

40 
	mc_cÊag
;

41 
	mc_lÊag
;

42 
	mc_löe
;

43 
	mc_cc
[
NCC
];

47 
	#TIOCM_LE
 0x001

	)

48 
	#TIOCM_DTR
 0x002

	)

49 
	#TIOCM_RTS
 0x004

	)

50 
	#TIOCM_ST
 0x008

	)

51 
	#TIOCM_SR
 0x010

	)

52 
	#TIOCM_CTS
 0x020

	)

53 
	#TIOCM_CAR
 0x040

	)

54 
	#TIOCM_RNG
 0x080

	)

55 
	#TIOCM_DSR
 0x100

	)

56 
	#TIOCM_CD
 
TIOCM_CAR


	)

57 
	#TIOCM_RI
 
TIOCM_RNG


	)

62 
	#N_TTY
 0

	)

63 
	#N_SLIP
 1

	)

64 
	#N_MOUSE
 2

	)

65 
	#N_PPP
 3

	)

66 
	#N_STRIP
 4

	)

67 
	#N_AX25
 5

	)

68 
	#N_X25
 6

	)

69 
	#N_6PACK
 7

	)

70 
	#N_MASC
 8

	)

71 
	#N_R3964
 9

	)

72 
	#N_PROFIBUS_FDL
 10

	)

73 
	#N_IRDA
 11

	)

74 
	#N_SMSBLOCK
 12

	)

75 
	#N_HDLC
 13

	)

76 
	#N_SYNC_PPP
 14

	)

77 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

18 #i‚de‡
_SYS_IOCTL_H


23 
	~<asm/io˘ls.h
>

26 
	#SIOCADDRT
 0x890B

	)

27 
	#SIOCDELRT
 0x890C

	)

28 
	#SIOCRTMSG
 0x890D

	)

31 
	#SIOCGIFNAME
 0x8910

	)

32 
	#SIOCSIFLINK
 0x8911

	)

33 
	#SIOCGIFCONF
 0x8912

	)

34 
	#SIOCGIFFLAGS
 0x8913

	)

35 
	#SIOCSIFFLAGS
 0x8914

	)

36 
	#SIOCGIFADDR
 0x8915

	)

37 
	#SIOCSIFADDR
 0x8916

	)

38 
	#SIOCGIFDSTADDR
 0x8917

	)

39 
	#SIOCSIFDSTADDR
 0x8918

	)

40 
	#SIOCGIFBRDADDR
 0x8919

	)

41 
	#SIOCSIFBRDADDR
 0x891®

	)

42 
	#SIOCGIFNETMASK
 0x891b

	)

43 
	#SIOCSIFNETMASK
 0x891¯

	)

44 
	#SIOCGIFMETRIC
 0x891d

	)

45 
	#SIOCSIFMETRIC
 0x891ê

	)

46 
	#SIOCGIFMEM
 0x891‡

	)

47 
	#SIOCSIFMEM
 0x8920

	)

48 
	#SIOCGIFMTU
 0x8921

	)

49 
	#SIOCSIFMTU
 0x8922

	)

50 
	#SIOCSIFNAME
 0x8923

	)

51 
	#SIOCSIFHWADDR
 0x8924

	)

52 
	#SIOCGIFENCAP
 0x8925

	)

53 
	#SIOCSIFENCAP
 0x8926

	)

54 
	#SIOCGIFHWADDR
 0x8927

	)

55 
	#SIOCGIFSLAVE
 0x8929

	)

56 
	#SIOCSIFSLAVE
 0x8930

	)

57 
	#SIOCADDMULTI
 0x8931

	)

58 
	#SIOCDELMULTI
 0x8932

	)

59 
	#SIOCGIFINDEX
 0x8933

	)

60 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

61 
	#SIOCSIFPFLAGS
 0x8934

	)

62 
	#SIOCGIFPFLAGS
 0x8935

	)

63 
	#SIOCDIFADDR
 0x8936

	)

64 
	#SIOCSIFHWBROADCAST
 0x8937

	)

65 
	#SIOCGIFCOUNT
 0x8938

	)

67 
	#SIOCGIFBR
 0x8940

	)

68 
	#SIOCSIFBR
 0x8941

	)

70 
	#SIOCGIFTXQLEN
 0x8942

	)

71 
	#SIOCSIFTXQLEN
 0x8943

	)

76 
	#SIOCDARP
 0x8953

	)

77 
	#SIOCGARP
 0x8954

	)

78 
	#SIOCSARP
 0x8955

	)

81 
	#SIOCDRARP
 0x8960

	)

82 
	#SIOCGRARP
 0x8961

	)

83 
	#SIOCSRARP
 0x8962

	)

87 
	#SIOCGIFMAP
 0x8970

	)

88 
	#SIOCSIFMAP
 0x8971

	)

92 
	#SIOCADDDLCI
 0x8980

	)

93 
	#SIOCDELDLCI
 0x8981

	)

102 
	#SIOCDEVPRIVATE
 0x89F0

	)

108 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/termios.h

19 #i‚de‡
_TERMIOS_H


23 
	tcc_t
;

24 
	t•ìd_t
;

25 
	ttcÊag_t
;

27 
	#NCCS
 32

	)

28 
	sãrmios


30 
tcÊag_t
 
	mc_iÊag
;

31 
tcÊag_t
 
	mc_oÊag
;

32 
tcÊag_t
 
	mc_cÊag
;

33 
tcÊag_t
 
	mc_lÊag
;

34 
cc_t
 
	mc_löe
;

35 
cc_t
 
	mc_cc
[
NCCS
];

36 
•ìd_t
 
	mc_i•ìd
;

37 
•ìd_t
 
	mc_o•ìd
;

38 
	#_HAVE_STRUCT_TERMIOS_C_ISPEED
 1

	)

39 
	#_HAVE_STRUCT_TERMIOS_C_OSPEED
 1

	)

43 
	#VINTR
 0

	)

44 
	#VQUIT
 1

	)

45 
	#VERASE
 2

	)

46 
	#VKILL
 3

	)

47 
	#VEOF
 4

	)

48 
	#VTIME
 5

	)

49 
	#VMIN
 6

	)

50 
	#VSWTC
 7

	)

51 
	#VSTART
 8

	)

52 
	#VSTOP
 9

	)

53 
	#VSUSP
 10

	)

54 
	#VEOL
 11

	)

55 
	#VREPRINT
 12

	)

56 
	#VDISCARD
 13

	)

57 
	#VWERASE
 14

	)

58 
	#VLNEXT
 15

	)

59 
	#VEOL2
 16

	)

62 
	#IGNBRK
 0000001

	)

63 
	#BRKINT
 0000002

	)

64 
	#IGNPAR
 0000004

	)

65 
	#PARMRK
 0000010

	)

66 
	#INPCK
 0000020

	)

67 
	#ISTRIP
 0000040

	)

68 
	#INLCR
 0000100

	)

69 
	#IGNCR
 0000200

	)

70 
	#ICRNL
 0000400

	)

71 
	#IUCLC
 0001000

	)

72 
	#IXON
 0002000

	)

73 
	#IXANY
 0004000

	)

74 
	#IXOFF
 0010000

	)

75 
	#IMAXBEL
 0020000

	)

76 
	#IUTF8
 0040000

	)

79 
	#OPOST
 0000001

	)

80 
	#OLCUC
 0000002

	)

81 
	#ONLCR
 0000004

	)

82 
	#OCRNL
 0000010

	)

83 
	#ONOCR
 0000020

	)

84 
	#ONLRET
 0000040

	)

85 
	#OFILL
 0000100

	)

86 
	#OFDEL
 0000200

	)

87 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


88 
	#NLDLY
 0000400

	)

89 
	#NL0
 0000000

	)

90 
	#NL1
 0000400

	)

91 
	#CRDLY
 0003000

	)

92 
	#CR0
 0000000

	)

93 
	#CR1
 0001000

	)

94 
	#CR2
 0002000

	)

95 
	#CR3
 0003000

	)

96 
	#TABDLY
 0014000

	)

97 
	#TAB0
 0000000

	)

98 
	#TAB1
 0004000

	)

99 
	#TAB2
 0010000

	)

100 
	#TAB3
 0014000

	)

101 
	#BSDLY
 0020000

	)

102 
	#BS0
 0000000

	)

103 
	#BS1
 0020000

	)

104 
	#FFDLY
 0100000

	)

105 
	#FF0
 0000000

	)

106 
	#FF1
 0100000

	)

109 
	#VTDLY
 0040000

	)

110 
	#VT0
 0000000

	)

111 
	#VT1
 0040000

	)

113 #ifde‡
__USE_MISC


114 
	#XTABS
 0014000

	)

118 #ifde‡
__USE_MISC


119 
	#CBAUD
 0010017

	)

121 
	#B0
 0000000

	)

122 
	#B50
 0000001

	)

123 
	#B75
 0000002

	)

124 
	#B110
 0000003

	)

125 
	#B134
 0000004

	)

126 
	#B150
 0000005

	)

127 
	#B200
 0000006

	)

128 
	#B300
 0000007

	)

129 
	#B600
 0000010

	)

130 
	#B1200
 0000011

	)

131 
	#B1800
 0000012

	)

132 
	#B2400
 0000013

	)

133 
	#B4800
 0000014

	)

134 
	#B9600
 0000015

	)

135 
	#B19200
 0000016

	)

136 
	#B38400
 0000017

	)

137 #ifde‡
__USE_MISC


138 
	#EXTA
 
B19200


	)

139 
	#EXTB
 
B38400


	)

141 
	#CSIZE
 0000060

	)

142 
	#CS5
 0000000

	)

143 
	#CS6
 0000020

	)

144 
	#CS7
 0000040

	)

145 
	#CS8
 0000060

	)

146 
	#CSTOPB
 0000100

	)

147 
	#CREAD
 0000200

	)

148 
	#PARENB
 0000400

	)

149 
	#PARODD
 0001000

	)

150 
	#HUPCL
 0002000

	)

151 
	#CLOCAL
 0004000

	)

152 #ifde‡
__USE_MISC


153 
	#CBAUDEX
 0010000

	)

155 
	#B57600
 0010001

	)

156 
	#B115200
 0010002

	)

157 
	#B230400
 0010003

	)

158 
	#B460800
 0010004

	)

159 
	#B500000
 0010005

	)

160 
	#B576000
 0010006

	)

161 
	#B921600
 0010007

	)

162 
	#B1000000
 0010010

	)

163 
	#B1152000
 0010011

	)

164 
	#B1500000
 0010012

	)

165 
	#B2000000
 0010013

	)

166 
	#B2500000
 0010014

	)

167 
	#B3000000
 0010015

	)

168 
	#B3500000
 0010016

	)

169 
	#B4000000
 0010017

	)

170 
	#__MAX_BAUD
 
B4000000


	)

171 #ifde‡
__USE_MISC


172 
	#CIBAUD
 002003600000

	)

173 
	#CMSPAR
 010000000000

	)

174 
	#CRTSCTS
 020000000000

	)

178 
	#ISIG
 0000001

	)

179 
	#ICANON
 0000002

	)

180 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


181 
	#XCASE
 0000004

	)

183 
	#ECHO
 0000010

	)

184 
	#ECHOE
 0000020

	)

185 
	#ECHOK
 0000040

	)

186 
	#ECHONL
 0000100

	)

187 
	#NOFLSH
 0000200

	)

188 
	#TOSTOP
 0000400

	)

189 #ifde‡
__USE_MISC


190 
	#ECHOCTL
 0001000

	)

191 
	#ECHOPRT
 0002000

	)

192 
	#ECHOKE
 0004000

	)

193 
	#FLUSHO
 0010000

	)

194 
	#PENDIN
 0040000

	)

196 
	#IEXTEN
 0100000

	)

197 #ifde‡
__USE_MISC


198 
	#EXTPROC
 0200000

	)

202 
	#TCOOFF
 0

	)

203 
	#TCOON
 1

	)

204 
	#TCIOFF
 2

	)

205 
	#TCION
 3

	)

208 
	#TCIFLUSH
 0

	)

209 
	#TCOFLUSH
 1

	)

210 
	#TCIOFLUSH
 2

	)

213 
	#TCSANOW
 0

	)

214 
	#TCSADRAIN
 1

	)

215 
	#TCSAFLUSH
 2

	)

218 
	#_IOT_ãrmios
 \

219 
	`_IOT
 (
	`_IOTS
 (
cÊag_t
), 4, _IOTS (
cc_t
), 
NCCS
, _IOTS (
•ìd_t
), 2)

	)

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_SETOFFSET
 0x0100

	)

64 
	#ADJ_MICRO
 0x1000

	)

65 
	#ADJ_NANO
 0x2000

	)

66 
	#ADJ_TICK
 0x4000

	)

67 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

68 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

71 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

72 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

73 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

74 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

75 
	#MOD_STATUS
 
ADJ_STATUS


	)

76 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

77 
	#MOD_CLKB
 
ADJ_TICK


	)

78 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

79 
	#MOD_TAI
 
ADJ_TAI


	)

80 
	#MOD_MICRO
 
ADJ_MICRO


	)

81 
	#MOD_NANO
 
ADJ_NANO


	)

85 
	#STA_PLL
 0x0001

	)

86 
	#STA_PPSFREQ
 0x0002

	)

87 
	#STA_PPSTIME
 0x0004

	)

88 
	#STA_FLL
 0x0008

	)

90 
	#STA_INS
 0x0010

	)

91 
	#STA_DEL
 0x0020

	)

92 
	#STA_UNSYNC
 0x0040

	)

93 
	#STA_FREQHOLD
 0x0080

	)

95 
	#STA_PPSSIGNAL
 0x0100

	)

96 
	#STA_PPSJITTER
 0x0200

	)

97 
	#STA_PPSWANDER
 0x0400

	)

98 
	#STA_PPSERROR
 0x0800

	)

100 
	#STA_CLOCKERR
 0x1000

	)

101 
	#STA_NANO
 0x2000

	)

102 
	#STA_MODE
 0x4000

	)

103 
	#STA_CLK
 0x8000

	)

106 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

107 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

74 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

76 #ifde‡
__x86_64__


80 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

83 
	#__INO_T_MATCHES_INO64_T
 1

	)

87 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
f˘

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
f˘

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
f˘

82 
	#__P
(
¨gs
Ë
	)
¨gs

83 
	#__PMT
(
¨gs
Ë
	)
¨gs

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

182 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

184 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

185 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

186 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

187 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

189 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

190 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
˙ame

203 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

204 
	#__©åibuã__
(
xyz
Ë

	)

210 #i‡
__GNUC_PREREQ
 (2,96)

211 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

213 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (4, 3)

219 
	#__©åibuã_Æloc_size__
(
∑øms
) \

220 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

222 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

228 #i‡
__GNUC_PREREQ
 (2,96)

229 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

231 
	#__©åibuã_puª__


	)

235 #i‡
__GNUC_PREREQ
 (2,5)

236 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

238 
	#__©åibuã_c⁄°__


	)

244 #i‡
__GNUC_PREREQ
 (3,1)

245 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

246 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

248 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

249 
	#__©åibuã_noölöe__


	)

253 #i‡
__GNUC_PREREQ
 (3,2)

254 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

256 
	#__©åibuã_dïªˇãd__


	)

265 #i‡
__GNUC_PREREQ
 (2,8)

266 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

268 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

275 #i‡
__GNUC_PREREQ
 (2,97)

276 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

277 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

279 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

284 #i‡
__GNUC_PREREQ
 (3,3)

285 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

287 
	#__n⁄nuŒ
(
∑øms
)

	)

292 #i‡
__GNUC_PREREQ
 (3,4)

293 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

294 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

295 #i‡
__USE_FORTIFY_LEVEL
 > 0

296 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

299 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

301 #i‚de‡
__wur


302 
	#__wur


	)

306 #i‡
__GNUC_PREREQ
 (3,2)

307 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

309 
	#__Æways_ölöe
 
__ölöe


	)

314 #i‡
__GNUC_PREREQ
 (4,3)

315 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

317 
	#__©åibuã_¨tificül__


	)

329 #i‡(!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

330 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

331 || 
deföed
 
__GNUC_GNU_INLINE__
)))

332 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


333 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

334 
	#__exã∫_Æways_ölöe
 \

335 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

337 
	#__exã∫_ölöe
 
__ölöe


	)

338 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

342 #ifde‡
__exã∫_Æways_ölöe


343 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

348 #i‡
__GNUC_PREREQ
 (4,3)

349 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

350 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

357 #i‡!
__GNUC_PREREQ
 (2,8)

358 
	#__exãnsi⁄__


	)

362 #i‡!
__GNUC_PREREQ
 (2,92)

363 
	#__ª°ri˘


	)

369 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


370 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

372 #ifde‡
__GNUC__


373 
	#__ª°ri˘_¨r


	)

375 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

376 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

379 
	#__ª°ri˘_¨r


	)

384 #i‡
__GNUC__
 >= 3

385 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

386 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

388 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

389 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

392 #i‡(!
deföed
 
_N‹ëu∫
 \

393 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

394 && !
	$__GNUC_PREREQ
 (4,7))

395 #i‡
	`__GNUC_PREREQ
 (2,8)

396 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

398 
	#_N‹ëu∫


	)

402 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

403 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

404 && (!
	`__GNUC_PREREQ
 (4, 6Ë|| 
deföed
 
__STRICT_ANSI__
))

405 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

406 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

407 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

410 
	~<bôs/w‹dsize.h
>

412 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


413 
	#__LDBL_COMPAT
 1

	)

414 #ifde‡
__REDIRECT


415 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

416 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

417 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

418 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

419 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

420 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

421 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

422 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

423 
	#__LDBL_REDIR_DECL
(
«me
) \

424 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

425 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

426 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

427 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

428 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

431 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


432 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
¥Ÿo

433 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
¥Ÿo

434 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

435 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

436 
	#__LDBL_REDIR_DECL
(
«me
)

	)

437 #ifde‡
__REDIRECT


438 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

439 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

440 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_MISC


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_MISC


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_MISC


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 #i‚de‡
TIOCSRS485


66 
	#TIOCSRS485
 0x542F

	)

68 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

69 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

70 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, Ë

	)

71 
	#TCGETX
 0x5432

	)

72 
	#TCSETX
 0x5433

	)

73 
	#TCSETXF
 0x5434

	)

74 
	#TCSETXW
 0x5435

	)

75 
	#TIOCSIG
 
	`_IOW
('T', 0x36, Ë

	)

76 
	#TIOCVHANGUP
 0x5437

	)

77 
	#TIOCGPKT
 
	`_IOR
('T', 0x38, Ë

	)

78 
	#TIOCGPTLCK
 
	`_IOR
('T', 0x39, Ë

	)

79 
	#TIOCGEXCL
 
	`_IOR
('T', 0x40, Ë

	)

81 
	#FIONCLEX
 0x5450

	)

82 
	#FIOCLEX
 0x5451

	)

83 
	#FIOASYNC
 0x5452

	)

84 
	#TIOCSERCONFIG
 0x5453

	)

85 
	#TIOCSERGWILD
 0x5454

	)

86 
	#TIOCSERSWILD
 0x5455

	)

87 
	#TIOCGLCKTRMIOS
 0x5456

	)

88 
	#TIOCSLCKTRMIOS
 0x5457

	)

89 
	#TIOCSERGSTRUCT
 0x5458

	)

90 
	#TIOCSERGETLSR
 0x5459

	)

91 
	#TIOCSERGETMULTI
 0x545A

	)

92 
	#TIOCSERSETMULTI
 0x545B

	)

94 
	#TIOCMIWAIT
 0x545C

	)

95 
	#TIOCGICOUNT
 0x545D

	)

101 #i‚de‡
FIOQSIZE


102 
	#FIOQSIZE
 0x5460

	)

106 
	#TIOCPKT_DATA
 0

	)

107 
	#TIOCPKT_FLUSHREAD
 1

	)

108 
	#TIOCPKT_FLUSHWRITE
 2

	)

109 
	#TIOCPKT_STOP
 4

	)

110 
	#TIOCPKT_START
 8

	)

111 
	#TIOCPKT_NOSTOP
 16

	)

112 
	#TIOCPKT_DOSTOP
 32

	)

113 
	#TIOCPKT_IOCTL
 64

	)

115 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

109 
	#__PTHREAD_SPINS
 0, 0

	)

111 
	m__nu£rs
;

112 
__exãnsi⁄__
 union

116 
	m__e•ös
;

117 
	m__ñisi⁄
;

118 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

119 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ñisi⁄


	)

120 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

121 } 
	m__ñisi⁄_d©a
;

122 
__±hªad_¶i°_t
 
	m__li°
;

125 } 
	m__d©a
;

126 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

127 
	m__Æign
;

128 } 
	t±hªad_muãx_t
;

132 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

133 
	m__Æign
;

134 } 
	t±hªad_muãx©å_t
;

143 
	m__lock
;

144 
	m__fuãx
;

145 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

146 
__exãnsi⁄__
 
	m__wakeup_£q
;

147 
__exãnsi⁄__
 
	m__wokí_£q
;

148 *
	m__muãx
;

149 
	m__nwaôîs
;

150 
	m__brﬂdˇ°_£q
;

151 } 
	m__d©a
;

152 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

153 
__exãnsi⁄__
 
	m__Æign
;

154 } 
	t±hªad_c⁄d_t
;

158 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

159 
	m__Æign
;

160 } 
	t±hªad_c⁄d©å_t
;

164 
	t±hªad_key_t
;

168 
	t±hªad_⁄˚_t
;

171 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


176 #ifde‡
__x86_64__


179 
	m__lock
;

180 
	m__ƒ_ªadîs
;

181 
	m__ªadîs_wakeup
;

182 
	m__wrôî_wakeup
;

183 
	m__ƒ_ªadîs_queued
;

184 
	m__ƒ_wrôîs_queued
;

185 
	m__wrôî
;

186 
	m__sh¨ed
;

187 sig√d 
	m__rwñisi⁄
;

188 #ifde‡ 
__ILP32__


189 
	m__∑d1
[3];

190 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

192 
	m__∑d1
[7];

193 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

195 
	m__∑d2
;

198 
	m__Êags
;

199 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

200 } 
	m__d©a
;

204 
	m__lock
;

205 
	m__ƒ_ªadîs
;

206 
	m__ªadîs_wakeup
;

207 
	m__wrôî_wakeup
;

208 
	m__ƒ_ªadîs_queued
;

209 
	m__ƒ_wrôîs_queued
;

212 
	m__Êags
;

213 
	m__sh¨ed
;

214 sig√d 
	m__rwñisi⁄
;

215 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0

	)

216 
	m__∑d2
;

217 
	m__wrôî
;

218 } 
	m__d©a
;

220 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

221 
	m__Æign
;

222 } 
	t±hªad_rwlock_t
;

226 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

227 
	m__Æign
;

228 } 
	t±hªad_rwlock©å_t
;

232 #ifde‡
__USE_XOPEN2K


234 vﬁ©ûê
	t±hªad_•ölock_t
;

241 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

242 
	m__Æign
;

243 } 
	t±hªad_b¨rõr_t
;

247 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

248 
	m__Æign
;

249 } 
	t±hªad_b¨rõøâr_t
;

253 #i‚de‡
__x86_64__


255 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@
1
.
1
/usr/include
106
2591
boot/asm.h
boot/boot.h
boot/main.c
include/adt/list.h
include/assert.h
include/common.h
include/const.h
include/hal.h
include/kernel.h
include/management.h
include/memory.h
include/process.h
include/string.h
include/time.h
include/types.h
include/x86/cpu.h
include/x86/io.h
include/x86/memory.h
include/x86/x86.h
src/kernel/drivers/drivers.c
src/kernel/drivers/hal.c
src/kernel/drivers/ide/cache.c
src/kernel/drivers/ide/disk.c
src/kernel/drivers/ide/ide.c
src/kernel/drivers/ide/ide.h
src/kernel/drivers/ram.c
src/kernel/drivers/timer/timer.c
src/kernel/drivers/tty/banner.c
src/kernel/drivers/tty/console.c
src/kernel/drivers/tty/getty.c
src/kernel/drivers/tty/keyboard.c
src/kernel/drivers/tty/term.h
src/kernel/drivers/tty/tty.c
src/kernel/drivers/tty/tty.h
src/kernel/irq/i8259.c
src/kernel/irq/idt.c
src/kernel/irq/irq_handle.c
src/kernel/main.c
src/kernel/management/fm.c
src/kernel/management/management.c
src/kernel/management/mm.c
src/kernel/management/pm.c
src/kernel/memory/kvm.c
src/kernel/memory/util.c
src/kernel/process/schedule.c
src/kernel/process/util.c
src/lib/kcpy.c
src/lib/logo.c
src/lib/printk.c
src/lib/serial.c
src/lib/string.c
test0/test0.c
test1/test0.c
test2/test0.c
/usr/include/assert.h
/usr/include/memory.h
/usr/include/string.h
/usr/include/term.h
/usr/include/time.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/features.h
/usr/include/ncurses_dll.h
/usr/include/sgtty.h
/usr/include/sys/ioctl.h
/usr/include/termio.h
/usr/include/termios.h
/usr/include/xlocale.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/termios.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/bits/wordsize.h
/usr/include/endian.h
/usr/include/gnu/stubs.h
/usr/include/stdc-predef.h
/usr/include/stdlib.h
/usr/include/sys/cdefs.h
/usr/include/sys/ttydefaults.h
/usr/include/alloca.h
/usr/include/asm/ioctls.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/gnu/stubs-32.h
/usr/include/sys/types.h
/usr/include/asm-generic/ioctls.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/pthreadtypes.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sigset.h
/usr/include/linux/ioctl.h
/usr/include/asm/ioctl.h
/usr/include/asm-generic/ioctl.h
